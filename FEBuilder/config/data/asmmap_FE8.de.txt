//This data is made with the aim of being readable by machine fast.
//
//address	name	RET=return	r0=arg0	//Argument Return value is not yet used and should not trust so much.
//address	@STRUCTNAME	name			//struct STRUCTNAME name;
//address	@STRUCTNAME@[size]	name	//struct STRUCTNAME name[size];
//address	:address2	name			//range data from address to address2
//
//@STRUCTNAME@OFFSET1	TYPE	name	//struct STRUCTNAME{   TYPE name
//@STRUCTNAME@OFFSET2	TYPE	name	//                     TYPE name      };
//
//	{J}		//for FE8J
//	{U}		//for FE8U
//
080B9DEC	Function for obtaining the selling price	RET=Selling price	r0=Number << 8 + ITEM ID	{J}
080B5268	Function for obtaining the selling price	RET=Selling price	r0=Number << 8 + ITEM ID	{U}
0800D340	Function to operate event instruction	void	r0=Event instruction pointer:POINTER_EVENT	r1=?1-3	{J}
0800D07C	Function to operate event instruction	void	r0=Event instruction pointer:POINTER_EVENT	r1=?1-3	{U}
080860A8	Set flag	void	r0=Flags:FLAG	{J}
08083D80	Set flag	void	r0=Flags:FLAG	{U}
080860D0	Check Flag	RET=BOOL	r0=Flag to check:FLAG	{J}
08083DA8	Check Flag	RET=BOOL	r0=Flag to check:FLAG	{U}
0800D548	A function that displays a conversation with a string number	void	r0=String number:TEXT	{J}
0800D284	A function that displays a conversation with a string number	void	r0=String number:TEXT	{U}
080d4ef4	Function to sound effect sound	void	r0=The sound number you want to ring:SOUND	{J}
080D01FC	Function to sound effect sound	void	r0=The sound number you want to ring:SOUND	{U}
0802cb70	Function to make experience+10	void	r0=A unit that gives experience values:UNIT	{J}
0802CC38	Function to make experience+10	void	r0=A unit that gives experience values:UNIT	{U}
08034520	A function that returns the address of the map setting from the map number	r0=Address of map setting	r0=The map ID you want to examine:MAPCHAPTER	{J}
08034618	A function that returns the address of the map setting from the map number	r0=Address of map setting	r0=The map ID you want to examine:MAPCHAPTER	{U}
080a8d94	Function to write clear turn	void	r0=202bcec Fixed?	{J}
080A4350	Function to write clear turn	void	r0=202bcec Fixed?	{U}
08002c30	6C Struct Script loading	void	r0=6C Struct	r1=Unknown	{J}
08002CE0	6C Struct Script loading	void	r0=6C Struct	r1=Unknown	{U}
08000d68	CopyToPaletteBuffer Copies palette to buffer and sets updated palette flag	void	r0=Palette Address:PAL	r1=destination offset	r2=size(0x20 full)	{J}
08000DB8	CopyToPaletteBuffer Copies palette to buffer and sets updated palette flag	void	r0=Palette Address:PAL	r1=destination offset	r2=size(0x20 full)	{U}
08013008	LZ77 Decompression of compressed data	void	r0=Compressed data	r1=Extracted location	{J}
08012f50	LZ77 Decompression of compressed data	void	r0=Compressed data	r1=Extracted location	{U}
080dc0dc	Uncompressed TSA reading	void	r0=Unknown	r1=Uncompressed TSA	r2=Unknown	r3=Unknown	{J}
080D7498	Uncompressed TSA reading	void	r0=Unknown	r1=Uncompressed TSA	r2=Unknown	r3=Unknown	{U}
08008914	Write numbers where you can refer to in conversation @0080@0005	void	r0=The number you want to display	{J}
08008A18	Write numbers where you can refer to in conversation @0080@0005	void	r0=The number you want to display	{U}
08002424	Switch BGM	void	r0=BGM Number:MUSIC	r1=Unknown	{J}
080024D4	Switch BGM	void	r0=BGM Number:MUSIC	r1=Unknown	{U}
080023C8	Switch BGM(Add current BGM)	void	r0=BGM Number:MUSIC	r1=Unknown	r2=Unknown	{J}
08002478	Switch BGM(Add current BGM)	void	r0=BGM Number:MUSIC	r1=Unknown	r2=Unknown	{U}
08002398	Switch BGM (Low layer)	void	r0=BGM Number:MUSIC	{J}
08002448	Switch BGM (Low layer)	void	r0=BGM Number:MUSIC	{U}
08002434 	Switch BGM (another command 1)	void	r0=BGM Number:MUSIC	{J}
080024E4	Switch BGM (another command 1)	void	r0=BGM Number:MUSIC	{U}
08073f38	Switch BGM (another command 2)	void	r0=BGM Number:MUSIC	{J}
08071A54	Switch BGM (another command 2)	void	r0=BGM Number:MUSIC	{U}
08002938	Switch BGM (another command 3)	void	r0=BGM Number:MUSIC	r1=Unknown	r2=Unknown	{J}
080029E8	Switch BGM (another command 3)	void	r0=BGM Number:MUSIC	r1=Unknown	r2=Unknown	{U}
080d6A4C	vsprintf	{J}
080D2F7C	vsprintf	{U}
08088830	Switch to EiLike edition (after the appearance of Verni)	{J}
0808884c	Switch to the Ephraum edition	{J}
02024CC2	Whether the key is kept pressed  not pushed=0x0C   While being pressed Do you count up from 0x02? 	{J}
02024CC4	The key code (bit) is stored while pressing the key A:0x0100 B:0x0200 SELECT:0x0400 START:0x0800 RIGHT:0x1000 LEFT:0x2000 UP:0x4000 DOWN:0x8000 L:0x0001 R:0x0002	{J}
02024CC6	It is the same as 02024CC4, but the update cycle is short	{J}
02024CCA	While holding down the key, store the key code same as 02024CC4	{J}
02024CCC	The key code last pressed is stored permanently	{J}
02029D8C	Cursor x coordinate x coordinate on the screen	{J}
02029D8E	Cursor y coordinate y coordinate on the screen	{J}
02024E5C	Memory Area of BGM Area	{J}
02024E60	BGM number	{J}
02024E62	BGM playback status flag	{J}
02024E63	BGM flag?	{J}
0202BCEC	Memory Area of stage	{J}
0202BCF4	GOLD	{J}
0202BCF9	Fog density	{J}
0202BCFA	MAP ID	{J}
0202BCFB	Phase 0=Your army,0x40=Friendly,0x80=Enemy	{J}
0202BCFC	Number of turns	{J}
0202BD00	Setting flag	{J}
0202BD07	Chapter specification beginning=0x1,EiLike=0x2,Ephraum edition=0x3	{J}
0202BD2C	CONFIG Cursor etc	{J}
0202BD2D	CONFIG Sound effect	{J}
0202BD2E	CONFIG Anime setting difficulty	{J}
0203A818	Contents of the transport team	{J}
0203E89B	Number of wins Number of wins with ID0x1 (Lower 8 bits)	{J}
0203E89B	Number of wins + number of battles ID0x1 of Win or lose(Upper 2 bits)+Battle number << 2	{J}
0203E8A0	ID0x2 of Win or lose  Max ID 0x45	{J}
0203ECF0	Chapter number chapter and number of turns in the introduction Turn << 7 + MAPID	{J}
0203ECF2	The clear time clear time (seconds) of the introduction is entered	{J}
0300007C	Numbers such as price Numbers that can be obtained with @0080@0005 in the text	{J}
030004B0	MemorySlot00 Always be 0.	{J}
030004B8	MemorySlot00 Always be 0.	{U}
030004B4	MemorySlot01	{J}
030004BC	MemorySlot01	{U}
030004B8	MemorySlot02	{J}
030004C0	MemorySlot02	{U}
030004BC	MemorySlot03	{J}
030004C4	MemorySlot03	{U}
030004C0	MemorySlot04	{J}
030004C8	MemorySlot04	{U}
030004C4	MemorySlot05	{J}
030004CC	MemorySlot05	{U}
030004C8	MemorySlot06	{J}
030004D0	MemorySlot06	{U}
030004CC	MemorySlot07 It is often used as a temporary variable.	{J}
030004D4	MemorySlot07 It is often used as a temporary variable.	{U}
030004D0	MemorySlot08	{J}
030004D8	MemorySlot08	{U}
030004D4	MemorySlot09	{J}
030004DC	MemorySlot09	{U}
030004D8	MemorySlot0A	{J}
030004E0	MemorySlot0A	{U}
030004DC	MemorySlot0B It is mainly used for reading coordinates.	{J}
030004E4	MemorySlot0B It is mainly used for reading coordinates.	{U}
030004E0	MemorySlot0C The results of processing are mainly returned.	{J}
030004E4	MemorySlot0C The results of processing are mainly returned.	{U}
//030004E4	MemorySlot0D The size of the queue	{J}
//030004EC	MemorySlot0D The size of the queue	{U}
03005315	Road data to display on the road data screen	{J}
03005260	Flags 0x01ï½ž0x28	{J}
03001C78	Event address being executed? (Excluding start events)	{J}
0202B6A8	The last displayed string ID	{J}
0202B6AC	The last displayed string ID	{U}

//thank you Tiki
//BIOS ARM(not thumb)
080D6364	ArcTan2	{J}
080D166C	ArcTan2	{U}
080D6368	BgAffineSet	{J}
080D1670	BgAffineSet	{U}
080D636C	CPUFastSet	{J}
080D1674	CPUFastSet	{U}
080D6370	CPUSet	{J}
080D1678	CPUSet	{U}
080D6374	Div	{J}
080D167C	Div	{U}
080D637C	Mod	{J}
080D1684	Mod	{U}
080D638C	HuffUnComp	{J}
080D168C	HuffUnComp	{U}
080D6390	LZ77UnCompVram	{J}
080D1690	LZ77UnCompVram	{U}
080D6394	LZ77UnCompWram	{J}
080D1694	LZ77UnCompWram	{U}
080D6398	MultiBoot	{J}
080D1698	MultiBoot	{U}
080D63A0	ObjAffineSet	{J}
080D16A0	ObjAffineSet	{U}
080D63A4	RLUnCompVram	{J}
080D16A4	RLUnCompVram	{U}
080D63A8	RLUnCompWram	{J}
080D16A8	RLUnCompWram	{U}
080D63C4	SoundBiasReset	{J}
080D16C8	SoundBiasReset	{U}
080D63CC	SoundBiasSet	{J}
080D16D0	SoundBiasSet	{U}
080D63D4	Sqrt	{J}
080D16D8	Sqrt	{U}
080D63D8	VBlankIntrWait	{J}
080D16DC	VBlankIntrWait	{U}

// Spell Anmations
//thumb
//08056BC9	NoneSpellAnimation	void	int a1	{J}
//08056C41	ThrowingAxeSpellAnimation	void	int a1	{J}
//	08056F98	ArrowSpellAnimation	void	int a1	{J}
//	08057120	Javelin1SpellAnimation	void	int a1	{J}
//0805717C	Javelin2SpellAnimation	void	int a1	{J}
//080571D8	Javelin3SpellAnimation	void	int a1	{J}
//08057234	Javelin4SpellAnimation	void	int a1	{J}
//08057290	Javelin5SpellAnimation	void	int a1	{J}
//080572EC	Javelin6SpellAnimation	void	int a1	{J}
//08057348	Javelin7SpellAnimation	void	int a1	{J}
//080573A4	Javelin8SpellAnimation	void	int a1	{J}
//08057400	Javelin9SpellAnimation	void	int a1	{J}
//0805745C	Javelin10SpellAnimation	void	int a1	{J}
//080574B8	Javelin11SpellAnimation	void	int a1	{J}
//08057664	DancePlay1SpellAnimation	void	int a1	{J}
//08057924	DancePlay2SpellAnimation	void	int a1	{J}
//08057A6C	BalistaArrowSpellAnimation	void	int a1	{J}
//08057C24	ExaccusWaveSpellAnimation	void	int a1	{J}
//08057F84	SoSFireSpellAnimation	void	int a1	{J}
//08058120	FlametongueSpellAnimation	void	int a1	{J}
//0805843C	FaHolyDragonStoneSpellAnimation	void	int a1	{J}
//08058584	IdunDarkDragonStoneSpellAnimation	void	int a1	{J}
//08058B28	FireSpellAnimation	void	int a1	{J}
//08058B6C	ElfireSpellAnimation	void	int a1	{J}
//0805ABD8	ForblazeSpellAnimation	void	int a1	{J}
//0805882C	ThunderSpellAnimation	void	int a1	{J}
//0805979C	BoltingSpellAnimation	void	int a1	{J}
//08059138	FimbulvetrSpellAnimation	void	int a1	{J}
//08059BF0	AircaliburSpellAnimation	void	int a1	{J}
//08059BF4	FluxSpellAnimation	void	int a1	{J}
//0805A090	NosferatuSpellAnimation	void	int a1	{J}
//0805A60C	LightningSpellAnimation	void	int a1	{J}
//0805A838	PurgeSpellAnimation	void	int a1	{J}
//0805BA78	AureolaSpellAnimation	void	int a1	{J}
//0805B678	DivineSpellAnimation	void	int a1	{J}
//0805C3D4	ApocalypseSpellAnimation	void	int a1	{J}
//0805C3D8	EclipseSpellAnimation	void	int a1	{J}
//0805CA38	FenrirSpellAnimation	void	int a1	{J}
//0805D1D8	HealSpellAnimation	void	int a1	{J}
//0805D328	MendSpellAnimation	void	int a1	{J}
//0805D4CC	RecoverSpellAnimation	void	int a1	{J}
//0805D670	PhysicSpellAnimation	void	int a1	{J}
//0805DEC0	FortifySpellAnimation	void	int a1	{J}
//0805DEF0	FortifyGreenSpellAnimation	void	int a1	{J}
//0805E3B0	RestoreSpellAnimation	void	int a1	{J}
//0805E650	SilenceSpellAnimation	void	int a1	{J}
//0805E8E8	SleepSpellAnimation	void	int a1	{J}
//0805EC08	HammerneSpellAnimation	void	int a1	{J}
//0805EE84	BerserkSpellAnimation	void	int a1	{J}
//0805F48C	BarrierSpellAnimation	void	int a1	{J}
//0805F6F8	ShineSpellAnimation	void	int a1	{J}
//0805FBE8	LunaSpellAnimation	void	int a1	{J}
//080605A4	ExcaliburSpellAnimation	void	int a1	{J}
//08060E70	GespenstSpellAnimation	void	int a1	{J}
//080615C4	AuraSpellAnimation	void	int a1	{J}
//08061BE0	LuceSpellAnimation	void	int a1	{J}
//08062350	ErishkigalAnimation	void	int a1	{J}
//08062AAC	FillaMight1SpellAnimation	void	int a1	{J}
//08062AE8	NinisGraceSpellAnimation	void	int a1	{J}
//08062B24	ThorIreSpellAnimation	void	int a1	{J}
//08062B60	SetLitanySpellAnimation	void	int a1	{J}

// Spell Animation Engine
//arm
//8002BCC	SpellCallBack	void *funcSequence, signed int callNum	{J}
//804EC74	ScrollScreen	int a1, unsigned __int16 a2	{J}
//80689D0	PlaySFX		int SFXID, int a2, int a3, int a4	{J}
//80017E8	memClear2K	void	void *mem, int num	{J}
//8001188	LCDIOMapSync	{J}
//8001320	GetBGnCNTBufferAddr	u16*	u16 *result	{J}
//80016C4	BGMapBGPaletteSync	void	{J}
//8000FD4	SetBGMapSyncFlag	void	u8 flag	{J}
//8000FF0	EnableBGMapSync	void	u8 n	{J}
//8001034	EnableBGPaletteSync	void	{J}
//8001048	DisablePaletteSync	void	{J}
//800105C	OutputToBGPaletteBuffer	void	void *src, signed int paletteOffset, signed int len	{J}
//80010CC	OutputToBGPaletteBufferWithAlpha	void	_WORD *src, signed int paletteOffset, int len, int alpha	{J}
//	8003054	TileTransferInfoSync	void	{J}
//	8002EB8	TileTransferInfoClear	void	{J}
//	8002F54	TileTransferInfoAdd	void	void *src, void *dst, int len	{J}
//	8002FD8	TileIntializeInfoAdd	void	void *src, void *dst, int len	{J}
//	8003214	OAM1BufferSync	void	{J}
//	80031BC	OAM2BufferSync void	{J}
//	8003108	OAMBufferSyncInfoInitialize	void	int SpriteNum1	{J}
//	80031A4	GetSpriteNum1	int	{J}
//	8003264	SetOBJAttribute	void	int OBJIndex, __int16 Attribute0, __int16 Attribute1, __int16 Attribute2, __int16 RSParameter	{J}
8012F94	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{J}
8012EDC	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{U}
8013008	AutoCopyOrDecompressImageToVRAM	void	_BYTE *src, int dst	{J}
8012F50	AutoCopyOrDecompressImageToVRAM	void	_BYTE *src, int dst	{U}
80131BC	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{J}
8013104	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{U}
80130AC	changeTiles	void	void *src, void *dst, int width, int height	{J}
8012FF4	changeTiles	void	void *src, void *dst, int width, int height	{U}
//	80C0C28	writeTemplateTSA	_WORD	_WORD *TSABufferInWRAM, _WORD *TSATemplate, __int16 TSABaseValue	{J}
8005330	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{J}
8005428	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{U}
//	8001D64	setBGnPosition	void	unsigned __int16 n, __int16 x, __int16 y	{J}


@Unit@00	pointer	UnitPointer
@Unit@04	pointer	ClassPointer
@Unit@08	byte	Level
@Unit@09	byte	EXP
@Unit@0A	byte	Recovery mode
@Unit@0B	byte	UnitTableID
@Unit@0C	byte	State	(+1=??,+2=acted,+4=death,+8=non sortie,+10=rescuing,+20=rescuing,+40=??,+80=??)
@Unit@0D	byte	State2	(+@20 Growth up +@40 ?? +@80 ??)
@Unit@0E	byte	Escape	+1=EscapeState
@Unit@0F	byte	Sortie is not allowed	+2=Sortie is not allowed
@Unit@10	byte	X	coordinate
@Unit@11	byte	Y	coordinate
@Unit@12	byte	MAX HP
@Unit@13	byte	Current HP
@Unit@14	byte	Power or Magic
@Unit@15	byte	Skill
@Unit@16	byte	Spd
@Unit@17	byte	Def
@Unit@18	byte	Ref
@Unit@19	byte	Luck
@Unit@1A	byte	Physique correction	(5bit)
@Unit@1B	byte	Trv Unit ID
@Unit@1C	byte	nazo1	(tmp?)
@Unit@1D	byte	Move correction	(5bit)
@Unit@1E	byte	ItemID1
@Unit@1F	byte	ItemStock1
@Unit@20	byte	ItemID2
@Unit@21	byte	ItemStock2
@Unit@22	byte	ItemID3
@Unit@23	byte	ItemStock3
@Unit@24	byte	ItemID4
@Unit@25	byte	ItemStock4
@Unit@26	byte	ItemID5
@Unit@27	byte	ItemStock5
@Unit@28	byte	Sword EXP
@Unit@29	byte	Lance EXP
@Unit@2A	byte	Axs EXP
@Unit@2B	byte	Bow EXP
@Unit@2C	byte	Staff EXP
@Unit@2D	byte	Rule EXP
@Unit@2E	byte	Light EXP
@Unit@2F	byte	Dark EXP
@Unit@30	byte	state and number of turns
@Unit@31	byte	PureWaterTourch
@Unit@32	byte	Support1
@Unit@33	byte	Support2
@Unit@34	byte	Support3
@Unit@35	byte	Support4
@Unit@36	byte	Support5
@Unit@37	byte	Support6
@Unit@38	byte	Support7
@Unit@39	byte	SupportFlag
@Unit@3A	byte	nazo2	maybe blank
@Unit@3B	byte	nazo3	maybe blank
@Unit@3C	byte	nazo4
@Unit@3D	byte	nazo5
@Unit@3E	byte	nazo6
@Unit@3F	byte	nazo7
@Unit@40	byte	AI 3
@Unit@41	byte	AI 4
@Unit@42	byte	AI 1
@Unit@43	byte	AI 1 Counter
@Unit@44	byte	AI 2
@Unit@45	byte	AI 2 Counter
@Unit@46	byte	nazo8	(tmp)
@Unit@47	byte	nazo9	(blank)

0202BE48	@Unit@[3E]	Player	{J}
0202CFB8	@Unit@[32]	Enemy	{J}
0202DDC8	@Unit@[14]	Ally	{J}

0202BE4C	@Unit@[3E]	Player	{U}
0202CFBC	@Unit@[32]	Enemy	{U}
0202DDCC	@Unit@[14]	Ally	{U}


@StatusMenuText@00	short	start tile index	(relative to Font root)
@StatusMenuText@02	byte	current local x cursor	(in pixels)
@StatusMenuText@03	byte	current text color id
@StatusMenuText@04	byte	Text tile width	(usually only half the actual used tile amount!)
@StatusMenuText@05	bool	Uses Double Buffer
@StatusMenuText@06	byte	current buffer id	(0 or 1)
@StatusMenuText@07	byte	idk	(maybe unused? initialized to 0)
02003C34	@StatusMenuText	Skill	{J}
02003C3C	@StatusMenuText	Speed	{J}
02003C44	@StatusMenuText	Luck	{J}
02003C4C	@StatusMenuText	Def	{J}
02003C54	@StatusMenuText	Ref	{J}
02003C5C	@StatusMenuText	Mov	{J}
02003C64	@StatusMenuText	Con	{J}
02003C6C	@StatusMenuText	Aid	{J}
02003C74	@StatusMenuText	Trv	{J}
02003C7C	@StatusMenuText	Affin	{J}
02003C84	@StatusMenuText	Cond	{J}
02003CBC	@StatusMenuText	Atk	{J}
02003CC4	@StatusMenuText	Hit	{J}
02003CB4	@StatusMenuText	Rng	{J}
02003CCC	@StatusMenuText	Crit	{J}
02003CD4	@StatusMenuText	Avoid	{J}
02003CDC	@StatusMenuText	Weapon1	{J}
02003CE4	@StatusMenuText	Weapon2	{J}
02003CEC	@StatusMenuText	Weapon3	{J}
02003CF4	@StatusMenuText	Weapon4	{J}

02003C34	@StatusMenuText	Skill	{U}
02003C3C	@StatusMenuText	Speed	{U}
02003C44	@StatusMenuText	Luck	{U}
02003C4C	@StatusMenuText	Def	{U}
02003C54	@StatusMenuText	Ref	{U}
02003C5C	@StatusMenuText	Mov	{U}
02003C64	@StatusMenuText	Con	{U}
02003C6C	@StatusMenuText	Aid	{U}
02003C74	@StatusMenuText	Trv	{U}
02003C7C	@StatusMenuText	Affin	{U}
02003C84	@StatusMenuText	Cond	{U}
02003CBC	@StatusMenuText	Atk	{U}
02003CC4	@StatusMenuText	Hit	{U}
02003CB4	@StatusMenuText	Rng	{U}
02003CCC	@StatusMenuText	Crit	{U}
02003CD4	@StatusMenuText	Avoid	{U}
080860bc	Unset flag	r0=Declining flag: FLAG	{J}
08083D94	Unset flag	r0=Declining flag: FLAG	{U}
08080D68	Import Palette	r0=Palette address: PAL	r1=Forwarding destination	r2=Size (0x20 in all)	{J}
08080DB8	Import Palette	r0=Palette address: PAL	r1=Forwarding destination	r2=Size (0x20 in all)	{U}
0800290c	Switch BGM (another commandPart 4)	r0=BGM number: MUSIC	r1=Mystery	{J}
080029BC	Switch BGM (another commandPart 4)	r0=BGM number: MUSIC	r1=Mystery	{U}
08002af4	String handling(anti-huffman target 1)	{J}
08002BA4	String handling(anti-huffman target 1)	{U}
08003054	Process related to execution of 6CStruct	{J}
08003104	Process related to execution of 6CStruct	{U}
080040fa	Heart character of unknown character	{J}
08003f76	Heart character of unknown character	{J}
0800e9e0	Load images		r0=NAZO	r1=CG	r2=NAZO	{J}
0800E7D0	Load images		r0=NAZO	r1=CG	r2=NAZO	{U}
080bb17c	Load 10 divided CG	{J}
080B65F8	Load 10 divided CG	{U}
080bdcdc	Obtaining icon of world map tower and castle	{J}
080B8E14	Obtaining icon of world map tower and castle	{U}
08016dfc	Steal item determination	{J}
08017054	Steal item determination	{U}
080197f0	Reading map chips	{J}
08019B18	Reading map chips	{U}
08034548	Examine the address of the stage map	mapdata	{J}
08034640	Examine the address of the stage map	mapdata	{U}
0808b9c0	Read chapter title image	{J}
08025b44	Determining whether to steal a menu	{J}
08025BA0	Determining whether to steal a menu	{U}
080c9630	Eventstuffed roll	{J}
080C4878	Eventstuffed roll	{U}
080c9398	Loading ED illustrations1st sheet	{J}
080C45E0	Loading ED illustrations1st sheet	{U}
080c9a18	Subtitle of OPPart 1	{J}
080C4C60	Subtitle of OPPart 1	{U}
080c9b0c	Subtitle of OPPart 2	{J}
080C4D54	Subtitle of OPPart 2	{U}
080ca4c4	Read image of title screen	{J}
080C56F4	Read image of title screen	{U}
080ca69c	Directing the title screen	{J}
080C58CC	Directing the title screen	{U}
080d24ec	Acquire the word of apprentice CC	{J}
080CD7FC	Acquire the word of apprentice CC	{U}
0801729c	Load item informationNAZO	ITEMPACKr0 = Endurance count << 8 | Item IDExample: Iron swordDurability: 46==2e01	{J}
080174F4	Load item informationNAZO	ITEMPACKr0 = Endurance count << 8 | Item IDExample: Iron swordDurability: 46==2e01	{U}
080162e8	Acquire durability from item ID	ITEMPACKEndurance count << 8 | Item IDExample: Iron swordDurability: 46==2e01	r0=Item ID	{J}
08016540	Acquire durability from item ID	ITEMPACKEndurance count << 8 | Item IDExample: Iron swordDurability: 46==2e01	r0=Item ID	{U}
080319D0	Read information of the opponent in the stadium	{J}
08031abc	Armor decision routine at the Arena	{J}
08031B70	Armor decision routine at the Arena	{U}
08031800	Weapon correction at the field?	{J}
080318B4	Weapon correction at the field?	{U}
08031B0C	Rank up weapons in the field	{J}
08031BC0	Rank up weapons in the field	{U}
0203A8F9	Temporary data of the stadium	{J}
0203A8F0	Temporary data of the stadium	{U}
03007d7c	The weapon of the opponent in the stadium (determined data)	{J}
0807ee68	Get the character MISS at battle	{J}
0807eec4	NO at battleGet the character DAMAGE	{J}
0807CB24	Get the character MISS at battle	{J}
0807CB24	NO at battleGet the character DAMAGE	{J}
0202BCF0	Area of â€‹â€‹the stage	{U}
0202BCF8	Possession money	{U}
0202BD01	Fog density	{U}
0202BD02	Map ID	{U}
0202BD02	Phase. 0=Your army, 0x40 = friendly, 0x80 = enemy army	{U}
0202BD03	Number of turns	{U}
0202BD02	Map cursor X axis	{U}
0202BD03	Map cursor Y axis	{U}
0202BD04	Status of chapter	0x10=Prepare for attack0x40 = hard mode	{U}
0202BD05	Weather	{U}
0202BD0B	Specified edition. 1=Prologue-Ch8,2=Eirika,3=Ephraim
08031450	Pointer to the contents of the transport team	{J}
08031504	Pointer to the contents of the transport team	{U}
03001C80	Event address being executed? (Except start event)	{U}
03004df0	Pointer to the work memory of the operation character	{J}
03004E50	Pointer to the work memory of the operation character	{U}
0808941c	Status 1 parameter	{J}
08087184	Status 1 parameter	{U}
080896ec	Status 2 possessed item	{J}
08087484	Status 2 possessed item	{U}
08089ac4	Status 3 Weapon Level	{J}
0808784C	Status 3 Weapon Level	{U}
0808ac2c	R menu settings	{J}
080889A0	R menu settings	{U}
080890bc	Status screen character drawing	{J}
08086E00	Status screen character drawing	{U}
805D0F4	loadArrowOBJ	void	void *AIS	{J}
805C358	loadArrowOBJ	void	void *AIS	{U}
8055C78	loadSpellCast	void	{J}
8054FA8	loadSpellCast	void	{U}
8056220	reduceHPBar	void	void *targetAIS, bool ifMiss	{J}
8055278	reduceHPBar	void	void *targetAIS, bool ifMiss	{U}
80563C0	suckBloodAnimation	void	int a1, int ifMiss	{J}
8055424	suckBloodAnimation	void	int a1, int ifMiss	{U}
805AF2C	checkIfCritical	int	void *AIS	{J}
805A188	checkIfCritical	int	void *AIS	{U}
806ED0C	criticalAttackEffect	void	int a1	{J}
806C9E8	criticalAttackEffect	void	int a1	{U}
80100CC	eventCodeFunc_DF	int	struct context *parent	{J}
800FF68	eventCodeFunc_DF	int	struct context *parent	{U}
80AEFFC	loadIceCrystal	void	int a1	{J}
80AA518	loadIceCrystal	void	int a1	{U}
806063C	loadResireBG2	void	int a1	{J}
805D8B4	loadResireBG2	void	int a1	{U}
80605B0	loadResireBG	void	int a1, u8 ifMiss	{J}
805F4B0	loadResireBG	void	int a1, u8 ifMiss	{U}
805C1A4	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{J}
805B400	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{U}
8060938	loadResireRST3	void	int a1, struct context *a2, u16 a3	{J}
805F838	loadResireRST3	void	int a1, struct context *a2, u16 a3	{U}
805C5D8	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{J}
805B828	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{U}
805C6EC	loadRestWINH1	void	int a1, int a2, u32 a3	{J}
805B93C	loadRestWINH1	void	int a1, int a2, u32 a3	{U}
8061540	loadHazymoonBG1	void	void *AIS	{J}
8060440	loadHazymoonBG1	void	void *AIS	{U}
8060D90	loadHazymoonOBJ3	void	void *AIS	{J}
805FC90	loadHazymoonOBJ3	void	void *AIS	{U}
80615b0	loadHazymoonBG2	void	void *AIS	{J}
80604B0	loadHazymoonBG2	void	void *AIS	{U}
8061614	loadHazymoonBG3	void	void *AIS	{J}
8060514	loadHazymoonBG3	void	void *AIS	{U}
80616E8	loadHazymoonOBJ2	void	void *AIS	{J}
80605E8	loadHazymoonOBJ2	void	void *AIS	{U}
805B058	getTargetAIS	void	int a1	{J}
805A2B4	getTargetAIS	void	int a1	{U}
8054BF8	loadFlashBG	{J}
8053F10	loadFlashBG	{U}
804f954	Show menu	void	MENUDEF	mazo	{J}
8088798	Scenario Branch Selector Display	void	{J}
804ebc8	Show menu	void	MENUDEF	mazo	{U}
80864CD	Scenario Branch Selector Display	void	{U}
8037B64	Hero determination function	bool	{U}
8037bfc	Hero determination function	bool	{J}
804FA3C	NewMenu Constructs Menu	6C	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=background BG index	r3=tile related thing? (stored to field 0x66)	{J}
804ECB0	NewMenu Constructs Menu	6C	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=background BG index	r3=tile related thing? (stored to field 0x66)	{U}
804F970	NewMenu_Default Constructs Menu	6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	E_Menu 6C pointer	r0=pointer to Menu Definition	{J}
804EBE4	NewMenu_Default Constructs Menu	6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	E_Menu 6C pointer	r0=pointer to Menu Definition	{U}
804F924	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left
r3=X tile position of menu of the right	{J}
804EB98	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left
r3=X tile position of menu of the right	{U}
804F954	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{J}
804EBC8	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{U}
804FA24	NewMenu_BG0BG1 Constructs Menu 6C, BG1 is background, BG0 is foreground	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=parent 6C	{J}
804EC98	NewMenu_BG0BG1 Constructs Menu 6C, BG1 is background, BG0 is foreground	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=parent 6C	{U}
804FCAC	EndAllMenus Kills *all* the E_Menus	void	{J}
804EF20	EndAllMenus Kills *all* the E_Menus	void	{U}
080851FC	CheckForEvents Event Check Buffer Pointer for first callable event (0 if none)	r0=Initial Event Check Buffer	{J}
08082EC4	CheckForEvents Event Check Buffer Pointer for first callable event (0 if none)	r0=Initial Event Check Buffer	{U}
080851B8	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{J}
08082E80	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{U}
089E84F4	Event Check Table	{U}
080A7AA8	GetSaveDataLocation	{J}
080A3064	GetSaveDataLocation	{U}
080A7B74	SaveLocalEventIndexes	{J}
080A3130	SaveLocalEventIndexes	{U}
080A7B74	SaveGlobalEventIndexes	{J}
080A3150	SaveGlobalEventIndexes	{U}
080A7BB4	LoadLocalEventIds	{J}
080A3170	LoadLocalEventIds	{U}
080A7BDC	LoadGlobalEventIds	{J}
080A3198	LoadGlobalEventIds	{U}
080A7C28	SaveConvoyItems	{J}
080A31E4	SaveConvoyItems	{U}
080A7CB0	LoadConvoyItems	{J}
080A326C	LoadConvoyItems	{U}
080A9A28	SaveGame	{J}
080A5010	SaveGame	{U}
080A9B40	LoadGame	{J}
080A5128	LoadGame	{U}
080A9D54	SaveUnit     	void	r0=Unit	r1=Target SRAM	{J}
080A533C	SaveUnit     	void	r0=Unit	r1=Target SRAM	{U}
080AA1AC	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{J}
080A5794	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{U}
080A5A48	SAVE_MOTHEFUCKING_GAME	{U}
080DC1DC	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{J}
080D759C	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{U}
080DC15C	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{J}
080D751C	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{U}
0800916C	TCS_New Creates a new TCS	TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{J}
0800927C	TCS_New Creates a new TCS	TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{U}
08009194	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{J}
080092A4	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{U}
080091AC	TCS_Update Updates TCS Logic and Graphics	bool	r0=TCS	r1=display x	r2=display y	{J}
080092BC	TCS_Update Updates TCS Logic and Graphics	bool	r0=TCS	r1=display x	r2=display y	{U}
08009408	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{J}
08009518	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{U}
08009438	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{J}
08009548	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{U}
08009150	TCS_ClearAll	{J}
08009260	TCS_ClearAll	{U}
080091D4	TCS_RegisterGraphics	{J}
080092E4	TCS_RegisterGraphics	{U}
08009230	TCS_Exec	{J}
08009340	TCS_Exec	{U}
08009320	TCS_QueueRotScaleData	{J}
08009430	TCS_QueueRotScaleData	{U}
08009458	TCS_QueueTileGfx	{J}
08009568	TCS_QueueTileGfx	{U}
08009564	TCS_Load	{J}
08009674	TCS_Load	{U}
08009588	TCS_ExecOneFrame	{J}
08009698	TCS_ExecOneFrame	{U}
080095A8	TCS_Init	{J}
080096B8	TCS_Init	{U}
080095E0	TCS_Alloc	{J}
080096F0	TCS_Alloc	{U}
0801D6FC	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{J}
0801DA98	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{U}
0801D730	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{J}
0801DACC	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{U}
@TrapEntry@00	byte	x pos
@TrapEntry@01	byte	y pos
@TrapEntry@02	byte	trap type id	0=Nothing (unused entry) 1=Ballista 2=Wall/Snag 3=Map Change (yes those are actually traps) 4=Fire Trap 5=Gas Trap 6=Map Change too? game supports them but idk where it might be used 7=Arrow Trap 8=? (used?) 9=? (used?) A=Light from Torch Staff B=Mine C=Gorgon Egg? (needs investigating as to in which circumstances) D=Light Rune
@TrapEntry@03	byte	ext1
@TrapEntry@04	byte	ext2
@TrapEntry@05	byte	ext3
@TrapEntry@06	byte	ext4
@TrapEntry@07	byte	ext5
0203A614	@TrapEntry@[40]	Traps	{U}
0203A610	@TrapEntry@[40]	Traps	{J}
0802E1F0	AddTrap	Adds/Creates new trap	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{J}
0802E2B8	AddTrap	Adds/Creates new trap	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{U}
0802E218	AddTrapExt	Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{J}
0802E2E0	AddTrapExt	Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{U}
0802E128	GetTrapAt	Looks for a trap at given position	RET=Pointer to Trap Entry Struct (0 if no trap at given pos)	r0=x, r1=y	{J}
0802E1F0	GetTrapAt	Looks for a trap at given position	RET=Pointer to Trap Entry Struct (0 if no trap at given pos)	r0=x, r1=y	{U}
0802E184	GetSpecificTrapAt	Looks for a trap at given position with given type	RET=Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{J}
0802E24C	GetSpecificTrapAt	Looks for a trap at given position with given type	RET=Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{U}
0802E100	ResetTraps	Resets Trap Array (Sets all trap ids to 0)	{J}
0802E1C8	ResetTraps	Resets Trap Array (Sets all trap ids to 0)	{U}
0802EAC4	GetTrap	Gets Trap Struct by Index	RET=Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{J}
0802EB8C	GetTrap	Gets Trap Struct by Index	RET=Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{U}
0802E234	RemoveTrap	Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{J}
0802E2FC	RemoveTrap	Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{U}
08037A9C	AddBallista	Adds/Creates Ballista	RET=Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{J}
08037A04	AddBallista	Adds/Creates Ballista	RET=Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{U}
0802E990	AddLightRune	Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	RET=Trap Struct Entry Pointer	r0=x	r1=y	{J}
0802EA58	AddLightRune	Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	RET=Trap Struct Entry Pointer	r0=x	r1=y	{U}
0802E9C8	RemoveLightRune	Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{J}
0802EA90	RemoveLightRune	Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{U}
0802E3A8	UpdateAllLightRunes	Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{J}
0802E470	UpdateAllLightRunes	Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{U}
0802E2E0	AddSnagsAndWalls	Goes through the terrain map and adds all the snag & wall traps where relevant	{J}
0802E3A8	AddSnagsAndWalls	Goes through the terrain map and adds all the snag & wall traps where relevant	{U}
0802E9F8	HandleTrapDecay	Handle Turn count down for Light Runes & Torch Lights	{J}
0802EAC0	HandleTrapDecay	Handle Turn count down for Light Runes & Torch Lights	{U}
0802E530	TriggerMapChange	Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{J}
0802E5F8	TriggerMapChange	Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{U}
0802E544	UntriggerMapChange	Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{J}
0802E60C	UntriggerMapChange	Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{U}
0802E368	ApplyTrapMapChanges	Applies all triggered map changes (used on suspend load maybe?)	{J}
0802E430	ApplyTrapMapChanges	Applies all triggered map changes (used on suspend load maybe?)	{U}
0802E288	AddArrowTrap Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{J}
0802E350	AddArrowTrap	Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{U}
0802E268	AddGasTrap	Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{J}
0802E330	AddGasTrap	Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{U}
0802E24C	AddFireTrap	Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{J}
0802E314	AddFireTrap	Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{U}
0802E4C4	ApplyMapChangesById	void	r0=Map Change Id	{J}
0802E58C	ApplyMapChangesById	void	r0=Map Change Id	{U}
08019FBC	RevertMapChangesById	r0=Map Change Id	{J}
0801A2EC	RevertMapChangesById	r0=Map Change Id	{U}
0801973C	FlushTerrainData	(You need to call that in order to have the map changes properly applied?)	{J}
08019A64	FlushTerrainData	(You need to call that in order to have the map changes properly applied?)	{U}
08050630	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{J}
0804F8BC	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{U}
08050A9C	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{J}
0804FD28	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{U}
08050AA8	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{J}
0804FD34	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{U}
08050618	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{J}
0804F8A4	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{U}
08024F20	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{J}
08024F70	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{U}
08024DF0	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{J}
08024EAC	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{U}
080507B0	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{J}
0804FA3C	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{U}
08050818	NewTargetSelection_Specialized	Same as above, but the A Press routine from the list gets overwritten by the one given as arg	Target Selection 6C	r0=pointer to routine list	r1=routine to call on A Press	{J}
0804FAA4	NewTargetSelection_Specialized	Same as above, but the A Press routine from the list gets overwritten by the one given as arg	Target Selection 6C	r0=pointer to routine list	r1=routine to call on A Press	{U}
08000E4C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{J}
08000E9C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{U}
08000EF4	GetBackgroundControlBufferPtr	{J}
08000F44	GetBackgroundControlBufferPtr	{U}
08000F3C	GetBackgroundTileDataOffset	{J}
08000F8C	GetBackgroundTileDataOffset	{U}
08000F8C	SetBackgroundTileDataOffset	{J}
08000FDC	SetBackgroundTileDataOffset	{U}
08000FB4	SetBackgroundMapDataOffset	{J}
08001004	SetBackgroundMapDataOffset	{U}
08000FFC	SetBackgroundScreenSize	{J}
0800104C	SetBackgroundScreenSize	{U}
08001448	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{J}
0800148C	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{U}
080011D0	FillBGMap Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{J}
08001220	FillBGMap Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{U}
08001BC0	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{J}
08001C4C	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{U}
08001EFC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{J}
08001FAC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{U}
08001F0C	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{J}
08001FBC	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{U}
080010FC	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{J}
0800114C	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{U}
08001F30	ClearTileRigistry Clears array	{J}
08001FE0	ClearTileRigistry Clears array	{U}
08001F64	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{J}
08002014	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{U}
08001FA4	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{J}
08002054	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{U}
080011F0	RegisterBlankTile	void	r0=Tile index	{J}
08001240	RegisterBlankTile	void	r0=Tile index	{U}
08001FD8	FlushTiles DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{J}
08002088	FlushTiles DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{U}
08029E64	NewTorchStaffSelection	{J}
08029ED8	NewTorchStaffSelection	{U}
08029D24	TorchTargetPosSelect_Init	{J}
08029D98	TorchTargetPosSelect_Init	{U}
08029D7C	TorchTargetSelection_Loop	{J}
08029DF0	TorchTargetSelection_Loop	{U}
08029E64	NewTorchStaffSelection	{J}
08029ED8	NewTorchStaffSelection	{U}
080040b8	draw_serif_text	{J}
08004504	draw_serif_text	{U}
08003e6c	strlen_serif_width	{J}
08004538	strlen_serif_width	{U}
08003f28	draw_item_text	{J}
080044C8	draw_item_text	{U}
08003e0c	strlen_item_width	{J}
08004568	strlen_item_width	{U}
08003f10	draw_text_nextline	{J}
080195e4	Map palette loading	{J}
0801990C	Map palette loading	{U}
0801965c	Map palette load 2	{J}
08019984	Map palette load 2	{U}
080D41B0	umul3232H32	{J}
080D41C0	SoundMain	{J}
080D4244	SoundMainRAM	{J}
080D45E8	SoundMainBTM	{J}
080D4600	RealClearChain	{J}
080D4620	ply_fine	{J}
080D4650	MPlayJumpTableCopy	{J}
080D4684	ld_r3_tp_adr_i	{J}
080D4690	ply_goto	{J}
080D46B0	ply_patt	{J}
080D46CC	ply_pend	{J}
080D46E0	ply_rept	{J}
080D4710	ply_prio	{J}
080D471C	ply_tempo	{J}
080D4730	ply_keysh	{J}
080D4744	ply_voice	{J}
080D4774	ply_vol	{J}
080D4788	ply_pan	{J}
080D479C	ply_bend	{J}
080D47B0	ply_bendr	{J}
080D47C4	ply_lfodl	{J}
080D47D0	ply_modt	{J}
080D47E8	ply_tune	{J}
080D47FC	ply_port	{J}
080D4814	m4aSoundVSync	{J}
080D4860	MPlayMain	{J}
080D4AC8	TrackStop	{J}
080D4B0C	ChnVolSetAsm	{J}
080D4B3C	ply_note	{J}
080D4D3C	ply_endtie	{J}
080D4D7C	clear_modM	{J}
080D4DA4	ply_lfos	{J}
080D4DB8	ply_mod	{J}
080D4DCC	MidiKeyToFreq	{J}
080D4E30	UnusedDummyFunc	{J}
080D4E34	MPlayContinue	{J}
080D4E50	MPlayFadeOut	{J}
080D4E70	m4aSoundInit	{J}
080D4EE8	m4aSoundMain	{J}
080D4EF4	m4aSongNumStart	r0=music id	{J}
080D4F20	m4aSongNumStartOrChange	{J}
080D4F20	m4aSongNumStartOrContinue	{J}
080D4FC0	m4aSongNumStop	{J}
080D4FC0	m4aSongNumContinue	{J}
080D5028	m4aMPlayAllStop	{J}
080D5054	m4aMPlayContinue	{J}
080D5028	m4aMPlayAllContinue	{J}
080D508C	m4aMPlayFadeOut	{J}
080D509C	m4aMPlayFadeOutTemporarily	{J}
080D50BC	m4aMPlayFadeIn	{J}
080D50E4	m4aMPlayImmInit	{J}
080D512C	MPlayExtender	{J}
080D5244	MusicPlayerJumpTableCopy	{J}
080D5248	ClearChain	{J}
080D5248	Clear64byte	{J}
080D5270	SoundInit	{J}
080D5368	SampleFreqSet	{J}
080D540C	m4aSoundMode	{J}
080D54A4	SoundClear	{J}
080D54F8	m4aSoundVSyncOff	{J}
080D5574	m4aSoundVSyncOn	{J}
080D55B0	MPlayOpen	{J}
080D5628	MPlayStart	{J}
080D570C	m4aMPlayStop	{J}
080D574C	FadeOutBody	{J}
080D5814	TrkVolPitSet	{J}
080D58C8	MidiKeyToCgbFreq	{J}
080D5970	CgbOscOff	{J}
080D5A28	CgbSound	{J}
080D5E74	m4aMPlayTempoControl	{J}
080D5E9C	m4aMPlayVolumeControl	{J}
080D5F04	m4aMPlayPitchControl	{J}
080D5F78	m4aMPlayPanpotControl	{J}
080D5FE0	ClearModM	{J}
080D6000	m4aMPlayModDepthSet	{J}
080D6074	m4aMPlayLFOSpeedSet	{J}
080D60E8	ply_memacc	{J}
080D6240	ply_xcmd	{J}
08002AF4	ply_xxx	{J}
080D6274	ply_xwave	{J}
080D62BC	ply_xtype	{J}
080D62D0	ply_xatta	{J}
080D62E4	ply_xdeca	{J}
080D62F8	ply_xsust	{J}
080D630C	ply_xrele	{J}
080D6320	ply_xiecv	{J}
080D632C	ply_xiecl	{J}
080D6338	ply_xleng	{J}
080D634C	ply_xswee	{J}
080D6274	ply_xcmd_0D	{J}
080D63AC	SoftReset	{J}
080D65BC	_call_via_r0	{J}
080D65C0	_call_via_r1	{J}
080D65C4	_call_via_r2	{J}
080D65C8	_call_via_r3	{J}
080D65CC	_call_via_r4	{J}
080D65D0	_call_via_r5	{J}
080D65D4	_call_via_r6	{J}
080D65D8	_call_via_r7	{J}
080D65DC	_call_via_r8	{J}
080D65E0	_call_via_r9	{J}
080D65E4	_call_via_sl	{J}
080D65E8	_call_via_fp	{J}
080D65EC	_call_via_ip	{J}
080D65F0	_call_via_sp	{J}
080D65F4	_call_via_lr	{J}
080D65F8	__divsi3	{J}
0805601C	__fixunssfsi	{J}
080D6690	__modsi3	{J}
080D6760	__muldi3	{J}
0800A874	__udivdi3	{J}
080D67D0	__udivsi3	{J}
080D6848	__umodsi3	{J}
080DA9A0	__pack_d	{J}
080DAAE8	__unpack_d	{J}
080DAE2C	__adddf3	{J}
080DAE5C	__subdf3	{J}
080DAE94	__muldf3	{J}
080DB13C	__divdf3	{J}
080DB2C4	__fpcmp_parts_d	{J}
080DB3C4	__cmpdf2	{J}
080DB3F0	__eqdf2	{J}
080DB43C	__nedf2	{J}
080DB488	__gtdf2	{J}
080DB4D4	__gedf2	{J}
080DB520	__ltdf2	{J}
080DB56C	__ledf2	{J}
080DB5B8	__floatsidf	{J}
080DB634	__fixdfsi	{J}
080DB6A8	__negdf2	{J}
080DB6D0	__make_dp	{J}
080DB6F8	__truncdfsf2	{J}
080DB73C	__pack_f	{J}
080DB7F4	__unpack_f	{J}
080DB9EC	__addsf3	{J}
080DBA18	__subsf3	{J}
080DBA4C	__mulsf3	{J}
080DBBB0	__divsf3	{J}
080DBC9C	__fpcmp_parts_f	{J}
080DBD80	__cmpsf2	{J}
080DBDA8	__eqsf2	{J}
080DBDF0	__nesf2	{J}
080DBE38	__gtsf2	{J}
080DBE80	__gesf2	{J}
080DBEC8	__ltsf2	{J}
080DBF10	__lesf2	{J}
080DBF58	__floatsisf	{J}
080DBFB8	__fixsfsi	{J}
080DC020	__negsf2	{J}
080DC044	__make_fp	{J}
080DC05C	__extendsfdf2	{J}
080DC088	__lshrdi3	{J}
080DC0BC	__negdi2	{J}
080D6908	memcpy	{J}
080D6968	memset	{J}
080D6A08	strlen	{J}
080D6B14	vfprintf	{J}
080D6B28	_vfprintf_r	{J}
080D7BEC	__srefill	{J}
080D7BEC	__swsetup	{J}
080D7DF4	_dtoa_r	{J}
080D8BB8	__sfmoreglue	{J}
080D8BE8	__sfp	{J}
080D8C7C	__sinit	{J}
080D8CDC	_free_r	{J}
080D8E9C	_malloc_trim_r	{J}
080D8F5C	__sfvwrite	{J}
080D9188	_fwalk	{J}
080D91C8	_setlocale_r	{J}
080D9234	__smakebuf	{J}
080D946C	_malloc_r	{J}
080D982C	_mbtowc_r	{J}
080D9858	memchr	{J}
080D98D8	memmove	{J}
080D9968	_Balloc	{J}
080D99C0	_Bfree	{J}
080D99D8	_multadd	{J}
080D9A70	_s2b	{J}
080D9AF4	_hi0bits	{J}
080D9B4C	_lo0bits	{J}
080D9BD0	_i2b	{J}
080D9BE4	_multiply	{J}
080D9D50	_pow5mult	{J}
080D9DE8	_lshift	{J}
080D9E88	__mcmp	{J}
080D9EC8	__mdiff	{J}
080D9FB8	_ulp	{J}
080DA004	_b2d	{J}
080DA0C0	_d2b	{J}
080DA1A8	_ratio	{J}
080DA1F8	_mprec_log10	{J}
080DA238	isinf	{J}
080DA25C	isnan	{J}
080DA27C	_close_r	{J}
080DA27C	_sbrk_r	{J}
080DA2A8	__sread	{J}
080DA2DC	__swrite	{J}
080DA31C	__sseek	{J}
080DA36C	strcmp	{J}
080DA434	initialise_monitor_handles	{J}
080DA4E4	_swiread	{J}
080DA508	_read	{J}
080DA550	_swilseek	{J}
080DA5D4	_lseek	{J}
080DA5E0	_swiwrite	{J}
080DA604	_write	{J}
080DA650	_swiopen	{J}
080DA6F0	_open	{J}
080DA704	_swiclose	{J}
080DA738	_close	{J}
080DA744	_exit	{J}
080DA764	_kill	{J}
080DA784	_getpid	{J}
080DA788	_sbrk	{J}
080DA7C4	_fstat	{J}
080DA7D0	_unlink	{J}
080DA7D8	_raise	{J}
080DA7DC	_gettimeofday	{J}
080DA808	_times	{J}
080DA82C	_lseek_r	{J}
080DA82C	_open_r	{J}
080DA85C	_calloc_r	{J}
080DA8EC	_fstat_r	{J}
080DA8EC	_gettimeofday_r	{J}
080DA918	abort	{J}
080DA940	_read_r	{J}
080DA940	_write_r	{J}
080CF4B8	umul3232H32	{U}
080CF4C8	SoundMain	{U}
080CF54C	SoundMainRAM	{U}
080CF8F0	SoundMainBTM	{U}
080CF908	RealClearChain	{U}
080CF928	ply_fine	{U}
080CF958	MPlayJumpTableCopy	{U}
080CF98C	ld_r3_tp_adr_i	{U}
080CF998	ply_goto	{U}
080CF9B8	ply_patt	{U}
080CF9D4	ply_pend	{U}
080CF9E8	ply_rept	{U}
080CFA18	ply_prio	{U}
080CFA24	ply_tempo	{U}
080CFA38	ply_keysh	{U}
080CFA4C	ply_voice	{U}
080CFA7C	ply_vol	{U}
080CFA90	ply_pan	{U}
080CFAA4	ply_bend	{U}
080CFAB8	ply_bendr	{U}
080CFACC	ply_lfodl	{U}
080CFAD8	ply_modt	{U}
080CFAF0	ply_tune	{U}
080CFB04	ply_port	{U}
080CFB1C	m4aSoundVSync	{U}
080CFB68	MPlayMain	{U}
080CFDD0	TrackStop	{U}
080CFE14	ChnVolSetAsm	{U}
080CFE44	ply_note	{U}
080D0044	ply_endtie	{U}
080D0084	clear_modM	{U}
080D00AC	ply_lfos	{U}
080D00C0	ply_mod	{U}
080D00D4	MidiKeyToFreq	{U}
080D0138	UnusedDummyFunc	{U}
080D013C	MPlayContinue	{U}
080D0158	MPlayFadeOut	{U}
080D0178	m4aSoundInit	{U}
080D01F0	m4aSoundMain	{U}
080D0228	m4aSongNumStartOrChange	{U}
080D0228	m4aSongNumStartOrContinue	{U}
080D02C8	m4aSongNumStop	{U}
080D02C8	m4aSongNumContinue	{U}
080D0330	m4aMPlayAllStop	{U}
080D035C	m4aMPlayContinue	{U}
080D0330	m4aMPlayAllContinue	{U}
080D0394	m4aMPlayFadeOut	{U}
080D03A4	m4aMPlayFadeOutTemporarily	{U}
080D03C4	m4aMPlayFadeIn	{U}
080D03EC	m4aMPlayImmInit	{U}
080D0434	MPlayExtender	{U}
080D054C	MusicPlayerJumpTableCopy	{U}
080D0550	ClearChain	{U}
080D0550	Clear64byte	{U}
080D0578	SoundInit	{U}
080D0670	SampleFreqSet	{U}
080D0714	m4aSoundMode	{U}
080D07AC	SoundClear	{U}
080D0800	m4aSoundVSyncOff	{U}
080D087C	m4aSoundVSyncOn	{U}
080D08B8	MPlayOpen	{U}
080D0930	MPlayStart	{U}
080D0A14	m4aMPlayStop	{U}
080D0A54	FadeOutBody	{U}
080D0B1C	TrkVolPitSet	{U}
080D0BD0	MidiKeyToCgbFreq	{U}
080D0C78	CgbOscOff	{U}
080D0D30	CgbSound	{U}
080D117C	m4aMPlayTempoControl	{U}
080D11A4	m4aMPlayVolumeControl	{U}
080D120C	m4aMPlayPitchControl	{U}
080D1280	m4aMPlayPanpotControl	{U}
080D12E8	ClearModM	{U}
080D1308	m4aMPlayModDepthSet	{U}
080D137C	m4aMPlayLFOSpeedSet	{U}
080D13F0	ply_memacc	{U}
080D1548	ply_xcmd	{U}
08002BA4	ply_xxx	{U}
080D157C	ply_xwave	{U}
080D15C4	ply_xtype	{U}
080D15D8	ply_xatta	{U}
080D15EC	ply_xdeca	{U}
080D1600	ply_xsust	{U}
080D1614	ply_xrele	{U}
080D1628	ply_xiecv	{U}
080D1634	ply_xiecl	{U}
080D1640	ply_xleng	{U}
080D1654	ply_xswee	{U}
080D157C	ply_xcmd_0D	{U}
080D16AC	RegisterRamReset	{U}
080D16B0	SoftReset	{U}
080D18C0	_call_via_r0	{U}
080D18C4	_call_via_r1	{U}
080D18C8	_call_via_r2	{U}
080D18CC	_call_via_r3	{U}
080D18D0	_call_via_r4	{U}
080D18D4	_call_via_r5	{U}
080D18D8	_call_via_r6	{U}
080D18DC	_call_via_r7	{U}
080D18E0	_call_via_r8	{U}
080D18E4	_call_via_r9	{U}
080D18E8	_call_via_sl	{U}
080D18EC	_call_via_fp	{U}
080D18F0	_call_via_ip	{U}
080D18F4	_call_via_sp	{U}
080D18F8	_call_via_lr	{U}
080D18FC	__divsi3	{U}
080D1994	__modsi3	{U}
080D1A64	__muldi3	{U}
0800A518	__udivdi3	{U}
080D1AD4	__udivsi3	{U}
080D1B4C	__umodsi3	{U}
080D5D64	__pack_d	{U}
080D5EAC	__unpack_d	{U}
080D61F0	__adddf3	{U}
080D6220	__subdf3	{U}
080D6258	__muldf3	{U}
080D6500	__divdf3	{U}
080D6688	__fpcmp_parts_d	{U}
080D6788	__cmpdf2	{U}
080D67B4	__eqdf2	{U}
080D6800	__nedf2	{U}
080D684C	__gtdf2	{U}
080D6898	__gedf2	{U}
080D68E4	__ltdf2	{U}
080D6930	__ledf2	{U}
080D697C	__floatsidf	{U}
080D69F8	__fixdfsi	{U}
080D6A6C	__negdf2	{U}
080D6A94	__make_dp	{U}
080D6ABC	__truncdfsf2	{U}
080D6B00	__pack_f	{U}
080D6BB8	__unpack_f	{U}
080D6DB0	__addsf3	{U}
080D6DDC	__subsf3	{U}
080D6E10	__mulsf3	{U}
080D6F74	__divsf3	{U}
080D7060	__fpcmp_parts_f	{U}
080D7144	__cmpsf2	{U}
080D716C	__eqsf2	{U}
080D71B4	__nesf2	{U}
080D71FC	__gtsf2	{U}
080D7244	__gesf2	{U}
080D728C	__ltsf2	{U}
080D72D4	__lesf2	{U}
080D731C	__floatsisf	{U}
080D737C	__fixsfsi	{U}
080D73E4	__negsf2	{U}
080D7408	__make_fp	{U}
080D7420	__extendsfdf2	{U}
080D744C	__lshrdi3	{U}
080D7480	__negdi2	{U}
080D1C0C	memcpy	{U}
080D1C6C	memset	{U}
080D1D88	strlen	{U}
080D1EA4	vfprintf	{U}
080D1EB8	_vfprintf_r	{U}
080D2FB0	__srefill	{U}
080D2FB0	__swsetup	{U}
080D31B8	_dtoa_r	{U}
080D3F7C	__sfmoreglue	{U}
080D3FAC	__sfp	{U}
080D4040	__sinit	{U}
080D40A0	_free_r	{U}
080D4260	_malloc_trim_r	{U}
080D4320	__sfvwrite	{U}
080D454C	_fwalk	{U}
080D458C	_setlocale_r	{U}
080D45F8	__smakebuf	{U}
080D4830	_malloc_r	{U}
080D4BF0	_mbtowc_r	{U}
080D4C1C	memchr	{U}
080D4C9C	memmove	{U}
080D4D2C	_Balloc	{U}
080D4D84	_Bfree	{U}
080D4D9C	_multadd	{U}
080D4E34	_s2b	{U}
080D4EB8	_hi0bits	{U}
080D4F10	_lo0bits	{U}
080D4F94	_i2b	{U}
080D4FA8	_multiply	{U}
080D5114	_pow5mult	{U}
080D51AC	_lshift	{U}
080D524C	__mcmp	{U}
080D528C	__mdiff	{U}
080D537C	_ulp	{U}
080D53C8	_b2d	{U}
080D5484	_d2b	{U}
080D556C	_ratio	{U}
080D55BC	_mprec_log10	{U}
080D55FC	isinf	{U}
080D5620	isnan	{U}
080D5640	_close_r	{U}
080D5640	_sbrk_r	{U}
080D566C	__sread	{U}
080D56A0	__swrite	{U}
080D56E0	__sseek	{U}
080D5730	strcmp	{U}
080D57F8	initialise_monitor_handles	{U}
080D58A8	_swiread	{U}
080D58CC	_read	{U}
080D5914	_swilseek	{U}
080D5998	_lseek	{U}
080D59A4	_swiwrite	{U}
080D59C8	_write	{U}
080D5A14	_swiopen	{U}
080D5AB4	_open	{U}
080D5AC8	_swiclose	{U}
080D5AFC	_close	{U}
080D5B08	_exit	{U}
080D5B28	_kill	{U}
080D5B48	_getpid	{U}
080D5B4C	_sbrk	{U}
080D5B88	_fstat	{U}
080D5B94	_unlink	{U}
080D5B9C	_raise	{U}
080D5BA0	_gettimeofday	{U}
080D5BCC	_times	{U}
080D5BF0	_lseek_r	{U}
080D5BF0	_open_r	{U}
080D5C20	_calloc_r	{U}
080D5CB0	_fstat_r	{U}
080D5CB0	_gettimeofday_r	{U}
080D5CDC	abort	{U}
080D5D04	_read_r	{U}
080D5D04	_write_r	{U}
08017294	Durability << 8 | Weapons\u0026Get Weapon ID with 0xFF	{J}
080174EC	Durability << 8 | Weapons\u0026Get Weapon ID with 0xFF	{U}
080730E4	Mamukut transforms and changes class	{J}
08070B3C	Mamukut transforms and changes class	{U}
0807308C	Animation to release Mamukuto's transformation	{J}
08070AE4	Animation to release Mamukuto's transformation	{U}
08072FBC	Process to execute Mamukuto's transformation animation	{J}
08070A16	Process to execute Mamukuto's transformation animation	{U}
08072F14	Processing to sound start and finish by Mamukuto transformation	{J}
0807096C	Processing to sound start and finish by Mamukuto transformation	{U}
08072EA4	The process that Mumukut transforms and "attacks"	{J}
080708FC	The process that Mumukut transforms and "attacks"	{U}
0807D634	Determine data to be called	{J}
0807B2B4	Determine data to be called	{U}
08017A5C	Adding an enemy unit	void	r1=POINTERWork memory for enemy unit to be added	r0=Enemy data UNITID CLASSID	{J}
08017D3C	Adding an enemy unit	void	r1=POINTERWork memory for enemy unit to be added	r0=Enemy data UNITID CLASSID	{U}
@DrawFont@00	pointer	root output VRAM pointer
@DrawFont@04	pointer	pointer to glyphs
@DrawFont@08	pointer	pointer to glyph drawing routine (ex: 08004218+1, 08004268+1)
@DrawFont@0C	pointer	pointer to current VRAM tile offset getter (ex: 080041E8+1)
@DrawFont@10	short	base value for text tiles (containing base tile index & palette mask)
@DrawFont@12	short	current tile index (local/relative to root)
@DrawFont@14	short	palette index
@DrawFont@16	byte	idk	 (set from byte at 02028E74, which is initialized at 1 at the start of the game and never changed again. My guess is that it denotes whenever to use Japanses (Shift-JS, 0) or English (ascii, 1) string format, since it is checked in various routines related to strings and glyphs)
@DrawFont@17	byte	idk
02028E58	@DrawFont	Default font struct	{U}
02028E58	@DrawFont	Default font struct	{J}
08003D38	SetFont	Sets which font to use for the subsequent Text compuations & drawings	r0=Font Struct pointer (0 for default)	{U}
08003CF4	SetFontGlyphSet	Sets Glyph set for current font	r0=0 for UI Font, 1 for Dialogue font	{U}
080043A8	Font_LoadForUI	Loads Palette & sets glyph set for UI Font	{U}
080043E8	Font_LoadForDialogue	Loads Palette & sets glyph set for Dialogue Font	{U}
08003CB8	Font_InitForUI	Inits font for UI drawing, and sets the font as current	r0=Font Struct (0 for default), r1=VRAM Root pointer	r2=VRAM Root Index	r3=Palette Index	{U}
08003C94	Font_InitDefault	Inits default font with default parameters (UI, VRAM Root 0x6001000, palette id 0)	{U}
08003D5C	Text_Init	Inits Text for current font (and clears it)	r0=Text Struct	r1=Text Tile Width	{U}
08003D84	Text_Allocate	Same as Text_Init, but doesn't clear (faster, but beware of leftover garbage graphics)	r0=Text Struct	r1=Text Tile Width	{U}
08003DAC	InitTextBatch	calls Text_Init for a bunch of text structs	r0=pointer to batch definition (see below)	{U}
08003DC8	Text_Clear	clears text (clears previously drawn tile graphics & resets x cursor & color)	r0=Text Struct	{U}
08003E50	Text_GetXCursor	{U}
08003E54	Text_SetXCursor	{U}
08003E58	Text_Advance	Advances x cursor/appends space/whatever	{U}
08003E60	Text_SetColorId	{U}
08003E64	Text_GetColorId	{U}
08003E68	Text_SetParameters	r0=Text Struct	r1=cursor	r2=color id	{U}
08003E70	Text_Draw	Draws text on backgroud tile data, switches buffers when applicable	r0=Text Struct	r1=Output Tile Root	{U}
08003EBC	Text_DrawBlank	Draws a blank rect on background tile data, where the given text would have been drawn	r0=Text Struct	r1=Output Tile Root	{U}
08004004	Text_AppendString	Appends String to Text graphics	r0=Text Struct, r1=String pointer	{U}
08004074	Text_AppendDecNumber	Appends Number as decimal to Text graphics	r0=Text Struct	r1=Number	{U}
08004144	Text_AppendNumberOr2Dashes	Same as above, except 0xFF will display "--"	r0=Text Struct	r1=Number (or 0xFF for "--")	{U}
08004480	Text_InsertString	Inserts String on Text	r0=Text Struct	r1=Cursor Start to insert to	r2=Color Id	r3=String pointer	{U}
080044A4	Text_InsertNumberOr2Dashes	Inserts Dec Number or 2 dashes on Text	r0=Text Struct, r1=Cursor Start to insert to	r2=Color Id	r3=Number (or 0xFF for "--")	{U}
08003EDC	GetStringTextWidth	Returns length of given string as drawn text given current font	r0=String pointer (null terminated ofc)	{U}
08003F90	GetStringTextCenteredPos	Returns pos of Text for the given string to be center given arg length	r0=tile width	r1=String pointer	{U}
0800443C	DrawTextInline	Draws text on screen without *needing* a text struct	r0=Text Struct (0 for temporary), r1=Output tile pointer root	r2=color id	r3=local x start	[sp]=tile width	[sp+4]=String pointer	{U}
08003C68	SetFont	Sets which font to use for the subsequent Text compuations & drawings	r0=Font Struct pointer (0 for default)	{J}
080042E0	Font_LoadForUI	Loads Palette & sets glyph set for UI Font	{J}
08004320	Font_LoadForDialogue	Loads Palette & sets glyph set for Dialogue Font	{J}
08003BE8	Font_InitForUI	Inits font for UI drawing, and sets the font as current	r0=Font Struct (0 for default), r1=VRAM Root pointer	r2=VRAM Root Index	r3=Palette Index	{J}
08003BC4	Font_InitDefault	Inits default font with default parameters (UI, VRAM Root 0x6001000, palette id 0)	{J}
08003C8C	Text_Init	Inits Text for current font (and clears it)	r0=Text Struct	r1=Text Tile Width	{J}
08003CB4	Text_Allocate	Same as Text_Init, but doesn't clear (faster, but beware of leftover garbage graphics)	r0=Text Struct	r1=Text Tile Width	{J}
08003CDC	InitTextBatch	calls Text_Init for a bunch of text structs	r0=pointer to batch definition (see below)	{J}
08003CF8	Text_Clear	clears text (clears previously drawn tile graphics & resets x cursor & color)	r0=Text Struct	{J}
08003D80	Text_GetXCursor	{J}
08003D84	Text_SetXCursor	{J}
08003D88	Text_Advance	Advances x cursor/appends space/whatever	{J}
08003D90	Text_SetColorId	{J}
08003D94	Text_GetColorId	{J}
08003D98	Text_SetParameters	r0=Text Struct	r1=cursor	r2=color id	{J}
08003DA0	Text_Draw	Draws text on backgroud tile data, switches buffers when applicable	r0=Text Struct	r1=Output Tile Root	{J}
08003DEC	Text_DrawBlank	Draws a blank rect on background tile data, where the given text would have been drawn	r0=Text Struct	r1=Output Tile Root	{J}
08003F28	Text_AppendString	Appends String to Text graphics	r0=Text Struct, r1=String pointer	{J}
0800407C	Text_AppendNumberOr2Dashes	Same as above, except 0xFF will display "--"	r0=Text Struct	r1=Number (or 0xFF for "--")	{J}
080043B8	Text_InsertString	Inserts String on Text	r0=Text Struct	r1=Cursor Start to insert to	r2=Color Id	r3=String pointer	{J}
080043DC	Text_InsertNumberOr2Dashes	Inserts Dec Number or 2 dashes on Text	r0=Text Struct, r1=Cursor Start to insert to	r2=Color Id	r3=Number (or 0xFF for "--")	{J}
08003E0C	GetStringTextWidth	Returns length of given string as drawn text given current font	r0=String pointer (null terminated ofc)	{J}
08003EAC	GetStringTextCenteredPos	Returns pos of Text for the given string to be center given arg length	r0=tile width	r1=String pointer	{J}
08004374	DrawTextInline	Draws text on screen without *needing* a text struct	r0=Text Struct (0 for temporary), r1=Output tile pointer root	r2=color id	r3=local x start	[sp]=tile width	[sp+4]=String pointer	{J}

@GameData@00	byte	nazo1
@GameData@01	byte	6C Main 2 Skip Counted	(Main 2 6C Exec will be skipped if this is non 0)
@GameData@02	byte	nazo2
@GameData@03	byte	GameData State bitfield	&0x01:? &0x02:? &0x04:? &0x08:? &0x10:? &0x20:? &0x40:When set, prevents things like gaining wexp, leveling up or recieving support bonuses (Link Arena Flag Maybe?) &0x80:?
@GameData@04	short	VerticalCounter	(IOReg:04000006) state at the end of the last main loop iteration
@GameData@0C	word	Current Real Camera Pos?
@GameData@10	word	nazo3
@GameData@14	word	Target Map Camera Pos?
@GameData@18	word	nazo4
@GameData@1C	word	Another Real Camera Pos?
@GameData@20	word	ANOTHER Real Camera Pos.
@GameData@24	word	Some Real Camera *Offset* (Used When Setting Up Backgrounds)
0202BCB0	@GameData	GameData	{U}
0202BCAC	@GameData	GameData	{J}
@KeyStatusBuffer@00	byte	FirstTickDelay
@KeyStatusBuffer@01	byte	NextTickDelay
@KeyStatusBuffer@02	byte	TickDownCounter	(decreased by one each frame, reset to FirstTickDelay when Presses change and NextTickDelay when reaches 0)
@KeyStatusBuffer@03	byte	unused
@KeyStatusBuffer@04	short	Current
@KeyStatusBuffer@06	short	TickPresses	 1 For Press|Tick&Pressed, 0 Otherwise
@KeyStatusBuffer@08	short	NewPresses:  1 For Press, 0 Otherwise
@KeyStatusBuffer@0A	short	Previous
@KeyStatusBuffer@0C	short	LastPressState: Current, but set only if NewPresses is not null
@KeyStatusBuffer@0E	short	Release	1 for Release (A B L R Only), 0 Otherwise
@KeyStatusBuffer@10	short	Another NewPresses?
@KeyStatusBuffer@12	short	Time since last	Non-Start Non-Select Button was pressed
02024CC0	@KeyStatusBuffer	KeyStatusBuffer	{U}
02024CC0	@KeyStatusBuffer	KeyStatusBuffer	{J}
0858791C	KeyStatusBuffer Pointer	{U}
085775CC	KeyStatusBuffer Pointer	{J}


//https://www.dropbox.com/sh/zymc1h221nnxpm9/AAA1sHR4hvxFxZYqOF3zqkG6a/Stan/_Notes?dl=0&preview=World+Map+Notes.txt
@GmapMUsData@00	byte	some bitfield (&1=set when linked Gmap MU prim is used?, &2=Use class (char otherwise))
@GmapMUsData@01	byte	Current WM Location Index?
@GmapMUsData@02	short	Char/Class ID
03005290	@GmapMUsData	GmapMUsData	{U}

//http://ngmansion.xyz/wiki/hackfe/index.php?%E8%A7%A3%E8%AA%AC/%E7%B5%82%E7%AB%A0%E3%81%B8%E3%81%AE%E9%81%93%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E7%8F%BE%E8%B1%A1%E3%81%AE%E8%80%83%E5%AF%9F
03005314	Worldmap Show RoadID 0	{J}
03005316	Worldmap Show RoadID 2	{J}
03005317	Worldmap Show RoadID 3	{J}
03005318	Worldmap Show RoadID 4	{J}
03005319	Worldmap Show RoadID 5	{J}
0300531A	Worldmap Show RoadID 6	{J}
0300531B	Worldmap Show RoadID 7	{J}
0300531C	Worldmap Show RoadID 8	{J}
0300531D	Worldmap Show RoadID 9	{J}
0300531F	Worldmap Show RoadID 10	{J}
03005320	Worldmap Show RoadID 11	{J}
03005321	Worldmap Show RoadID 12	{J}
03005322	Worldmap Show RoadID 13	{J}
03005323	Worldmap Show RoadID 14	{J}
03005324	Worldmap Show RoadID 15	{J}
03005325	Worldmap Show RoadID 16	{J}
03005326	Worldmap Show RoadID 17	{J}
03005327	Worldmap Show RoadID 18	{J}
03005328	Worldmap Show RoadID 19	{J}
03005329	Worldmap Show RoadID 20	{J}
0300532A	Worldmap Show RoadID 21	{J}
0300532B	Worldmap Show RoadID 22	{J}
0300532C	Worldmap Show RoadID 23	{J}
0300532D	Worldmap Show RoadID 24	{J}
0300532E	Worldmap Show RoadID 25	{J}
0300532F	Worldmap Show RoadID 26	{J}
03005330	Worldmap Show RoadID 27	{J}
03005331	Worldmap Show RoadID 28	{J}
03005332	Worldmap Show RoadID 29	{J}
03005333	Worldmap Show RoadID 30	{J}
03005324	Worldmap Show RoadID 0	{U}
03005325	Worldmap Show RoadID 1	{U}
03005326	Worldmap Show RoadID 2	{U}
03005327	Worldmap Show RoadID 3	{U}
03005328	Worldmap Show RoadID 4	{U}
03005329	Worldmap Show RoadID 5	{U}
0300532A	Worldmap Show RoadID 6	{U}
0300532B	Worldmap Show RoadID 7	{U}
0300532C	Worldmap Show RoadID 8	{U}
0300532D	Worldmap Show RoadID 9	{U}
0300532F	Worldmap Show RoadID 10	{U}
03005330	Worldmap Show RoadID 11	{U}
03005331	Worldmap Show RoadID 12	{U}
03005332	Worldmap Show RoadID 13	{U}
03005333	Worldmap Show RoadID 14	{U}
03005334	Worldmap Show RoadID 15	{U}
03005335	Worldmap Show RoadID 16	{U}
03005336	Worldmap Show RoadID 17	{U}
03005337	Worldmap Show RoadID 18	{U}
03005338	Worldmap Show RoadID 19	{U}
03005339	Worldmap Show RoadID 20	{U}
0300533A	Worldmap Show RoadID 21	{U}
0300533B	Worldmap Show RoadID 22	{U}
0300533C	Worldmap Show RoadID 23	{U}
0300533D	Worldmap Show RoadID 24	{U}
0300533E	Worldmap Show RoadID 25	{U}
0300533F	Worldmap Show RoadID 26	{U}
03005340	Worldmap Show RoadID 27	{U}
03005341	Worldmap Show RoadID 28	{U}
03005342	Worldmap Show RoadID 29	{U}
03005343	Worldmap Show RoadID 30	{U}
@MapSize@0	short	Width
@MapSize@2	short	Height
0202E4D4	@MapSize	MapSize	{U}
0202E4D0	@MapSize	MapSize	{J}
@AttackerBattleStruct@00	short	Seems to be a bitfield	(0x2 seems to be 'battle hasn't started yet') (0x20 is arena)
@AttackerBattleStruct@02	short	Type of animation?	No idea, really. -Appears to be range
@AttackerBattleStruct@04	short	Damage	(Attack - defense)
@AttackerBattleStruct@06	short	Attack
@AttackerBattleStruct@08	short	Defense
@AttackerBattleStruct@0A	short	Battle hit
@AttackerBattleStruct@0C	short	Battle crit
@AttackerBattleStruct@0E	short	Lethality chance
0203A4D4	@AttackerBattleStruct	AttackerBattleStruct	{U}
0203A4D0	@AttackerBattleStruct	AttackerBattleStruct	{J}
@DefenderBattleStruct@00	byte	Option1	0x01=Critical 0x02=Miss 0x04=? 0x08=? 0x10=Brave 0x20=? 0x40=Poison 0x80=Devil
@DefenderBattleStruct@01	byte	Option2	0x01=Steal HP 0x02=? 0x04=Triangle attack 0x08=Lethality 0x10=? 0x20=Petrified 0x40=Sure Shot 0x80=Great Shield
@DefenderBattleStruct@02	byte	Option3	0x01=Pierce 0x02=? 0x04=? 0x08=End Battle 0x10=?
@DefenderBattleStruct@03	byte	Damage
0203A5EC	@DefenderBattleStruct	DefenderBattleStruct	{U}
0203A5E8	@DefenderBattleStruct	DefenderBattleStruct	{J}
@ActionBattleStruct@06	byte	Apparently sometimes has the item id
@ActionBattleStruct@0C	byte	Current character's allegiance
@ActionBattleStruct@0D	byte	Target's allegiance	Target's allegiance byte (once selected)
@ActionBattleStruct@0E	byte	moved-to X	Current character's moved-to x coordinate
@ActionBattleStruct@0F	byte	moved-to Y	Current character's moved-to y coordinate
@ActionBattleStruct@10	byte	Squares moved this turn
@ActionBattleStruct@11	byte	Action taken this turn	0x01=Wait 0x02=Combat (Attack) 0x03=Staff 0x04=Dance/Play 0x05=Unused? 0x06=Steal 0x07=Summon 0x08=DK Summoning (I think) 0x09=Rescue 0x0A=Drop 0x0B=Take 0x0C=Give 0x0D=Unused? (I use this for auto-promotions) 0x0E=Talk 0x0F=Support 0x10=Visit 0x11=Seize 0x12=Door 0x13=Unused? 0x14=Chest 0x15=Pick 0x16=Unused? 0x17=Bought something from shop/armory/(presumably) secret shop 0x18=Unused? 0x19=Arena 0x1A=Use item 0x1B=Unused? (stored at 2D774) 0x1C=Unused? (stored at 9E3BA/9E8F2) 0x1D=Trade/Supply 0x1E=Wait due to finding an enemy in fog 0x1F=Backing out of an action, under certain circumstances 0x20=? 0x21=Ride (ballista) 0x22=Exit (ballista)
@ActionBattleStruct@12	Inventory slot number (0-4)
0203A958	@ActionBattleStruct	ActionBattleStruct	{U}
0203A954	@ActionBattleStruct	ActionBattleStruct	{J}
@ChapterData@08	word	Money
@ChapterData@0D	byte	Vision Range	(0 if there's no fog)
@ChapterData@0E	byte	Chapter ID
@ChapterData@0F	byte	Phase	(0x0=player, 0x40=allied, 0x80=enemy)
@ChapterData@10	short	Turn number
@ChapterData@12	byte	Cursor x position	(only when displaying a menu?)
@ChapterData@13	byte	Cursor y position	(only when displaying a menu?)
@ChapterData@14	byte	Chapter Stuff	&01=Stat screen page 1 (Inventory) (0=stats) (these are set after backing out of the stat menu)	&02=Stat screen page 2 (Difficulty)	&10=Set when on prep screen	&40=Set for hard mode	&80=Don't gain weapon exp (not sure what this is for)
@ChapterData@15	byte	Weather	(0=clear, 1=snow, 2=snowstorm, 4=rain) (funnily enough, if non-zero, arena battles take support bonuses into account)
@ChapterData@16	short	Number of support points gained this chapter?
@ChapterData@1B	byte	Mode	(1=prologue-8, 2=Eirika 3=Ephraim)
@ChapterData@40	byte	Option1	 &02=Terrain window (set=off, not set=on)  &04=Unit window (set=burst, not set=panel) &08=Unit window (set=off, not set=panel)  &10=Autocursor (set=off, not set=on)
&20=Text speed (set=normal, not set=slow)  &40=Text speed (set=fast, not set=slow, set + 0x20 also set=max)  &80=Game speed (set=fast, not set=normal)
@ChapterData@41	byte	Option2	&01=Music (set=off, not set=on) &02=Sound effects (set=off, not set=on) &04=Window color (set=orange, not set=blue) &08=Window color (set=green, not set=blue, set + 0x08 also set=black) &10=Something about displaying B/W/L on the stat screen &40=Autoend turns (set=off, not set=on) &80=Subtitle help (set=off, not set=on)
@ChapterData@42	byte	Option3	&01=Show objective (set=off, not set=on) &02=Combat animations off (if both 2 and 4 are set, combat animations are on with backgrounds on) &04=Combat animations solo (if both 2 and 4 are not set, combat animations are on with backgrounds off) &08=Combat info window (set=detail, not set=strat) &10=Combat info window (set=off, not set=strat)
0202BCF0	@ChapterData	ChapterData	{U}
@CharacterBattleStatistic@00	byte	Losses
@CharacterBattleStatistic@01	short	Number of times a unit performs an action (seems to increase by 2) (non-aligned halfword)
@CharacterBattleStatistic@03	byte	Number of times selected (caps at 199)
@CharacterBattleStatistic@04	byte	Number of times viewed in stat screen (caps at 199)
@CharacterBattleStatistic@05	short	Lower 4 bits are the (most recent) chapter number they died on, upper 4 bits (along with byte 0x6) are the turn number they died on
@CharacterBattleStatistic@09	short	Top 4 bits, along with 0xA, is exp gained this chapter
@CharacterBattleStatistic@0B	byte	Along with bottom 2 bits of 0xC, wins
@CharacterBattleStatistic@0C	short	Bottom 2 bits are wins, top 6 bits, along with the bottom 6 bits of 0xD, are battles
@CharacterBattleStatistic@0E	byte	Character number of the most recent killer
0203E884	@CharacterBattleStatistic@[46]	Unit	{U}
0203E890	@CharacterBattleStatistic@[46]	Unit	{J}

@ClearTurn@00	short	Chapter ID and number of turns	Number of turns<<7+Chapter ID
@ClearTurn@02	short	Clear time seconds
0203ECF0	@ClearTurn@[24]	Chapter Clear Turn	{J}
0203ECF4	@ClearTurn@[24]	Chapter Clear Turn	{U}

@ITEMSTOCK@00	byte	Item ID
@ITEMSTOCK@01	byte	Number of items
0203A818	@ITEMSTOCK@[64]	Storage	{J}
0203A81C	@ITEMSTOCK@[64]	Storage	{U}

03005261	flag0x09 - 0x10	{J}
03005262	flag0x11 - 0x18	{J}
03005263	flag0x19 - 0x20	{J}
03005264	flag0x21 - 0x 28	{J}
03005240	flag0x65 - 0x6C	{J}
03005241	flag0x6D - 0x74	{J}
03005242	flag0x75 - 0x7C	{J}
03005243	flag0x7D - 0x84	{J}
03005244	flag0x85 - 0x8C	{J}
03005245	flag0x8D - 0x94	{J}
03005246	flag0x95 - 0x9C	{J}
03005247	flag0x9D - 0xA4	{J}
03005248	flag0xA5 - 0xAC	{J}
03005249	flag0xAD - 0xB4	{J}
0300524A	flag0xB5 - 0xBC	{J}
0300524B	flag0xBD - 0xC4	{J}
0300524C	flag0xC5 - 0xCC	{J}
0300524D	flag0xCD - 0xD4	{J}
0300524E	flag0xD5 - 0xDC	{J}
0300524F	flag0xDD - 0xE4	{J}
03005250	flag0xE5 - 0xEC	{J}
03005251	flag0xED - 0xF4	{J}
03005252	flag0xF5 - 0xFC	{J}
03005253	flag0xFD - 0x104	{J}
03005254	flag0x105 - 0x10C	{J}
03005255	flag0x10D - 0x114	{J}
03005256	flag0x115 - 0x11C	{J}
03005257	flag0x11D - 0x124	{J}
03005258	flag0x125 - 0x12C	{J}
03005270	flag0x01 - 0x8	{U}
03005271	flag0x09 - 0x10	{U}
03005272	flag0x11 - 0x18	{U}
03005273	flag0x19 - 0x20	{U}
03005274	flag0x21 - 0x28	{U}
03005250	flag0x65 - 0x6C	{U}
03005251	flag0x6D - 0x74	{U}
03005252	flag0x75 - 0x7C	{U}
03005253	flag0x7D - 0x84	{U}
03005254	flag0x85 - 0x8C	{U}
03005255	flag0x8D - 0x94	{U}
03005256	flag0x95 - 0x9C	{U}
03005257	flag0x9D - 0xA4	{U}
03005258	flag0xA5 - 0xAC	{U}
03005259	flag0xAD - 0xB4	{U}
0300525A	flag0xB5 - 0xBC	{U}
0300525B	flag0xBD - 0xC4	{U}
0300525C	flag0xC5 - 0xCC	{U}
0300525D	flag0xCD - 0xD4	{U}
0300525E	flag0xD5 - 0xDC	{U}
0300525F	flag0xDD - 0xE4	{U}
03005261	flag0xED - 0xF4	{U}
03005262	flag0xF5 - 0xFC	{U}
03005263	flag0xFD - 0x104	{U}
03005264	flag0x105 - 0x10C	{U}
03005265	flag0x10D - 0x114	{U}
03005266	flag0x115 - 0x11C	{U}
03005267	flag0x11D - 0x124	{U}
03005268	flag0x125 - 0x12C	{U}

020228A8	Palette wram buffer
02022CA8	BG 0 wram buffer
020234A8	BG 1 wram buffer
02023CA8	BG 2 wram buffer
020244A8	BG 3 wram buffer

0203EFB8	Unit data loaded from events	{U}
0203EFB4	Unit data loaded from events	{J}

02003BFC	Stat screen data	{U}
02003BFC	Stat screen data	{J}

//https://www.dropbox.com/sh/zymc1h221nnxpm9/AACrgal3LFRvbDKL-5qDxF3-a/Tequila/Teq%20Doq?dl=0&preview=Useful+functions.txt
0801A4CC	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{U}
0801A198	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{J}

08019430	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{U}
08019108	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{J}

08018D4C	checks if character is riding a ballista and what the weather is	Usually called before calling 1A4CC, this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{U}
08018A60	checks if character is riding a ballista and what the weather is	Usually called , this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{J}


0800A240	Copy_Text_To_RAM	Calls some functions in IRAM to copy text from the rom to 202A6AC; also stores the text id at 202B6AC.		r0=text id	{U}
08009FA8	Copy_Text_To_RAM	Calls some functions in IRAM to copy text from the rom		r0=text id	{J}

08019150	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{U}
08018E64	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{J}

08019190	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{U}
08018EA4	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{J}
080191B0	Str_Getter	RET=Character's strength	r0=ram char data ptr	{U}
08018EC4	Str_Getter	RET=Character's strength	r0=ram char data ptr	{J}

080191D0	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{U}
08018EE4	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{J}

08019210	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{U}
08018F24	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{J}

08019250	Def_Getter	RET=Character's defense	r0=ram char data ptr	{U}
08018F64	Def_Getter	RET=Character's defense	r0=ram char data ptr	{J}

08019270	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{U}
08018F84	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{J}

08019298	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{U}
08018FAC	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{J}

080189B8	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{U}
080186CC	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{J}

08016B28	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{U}
080168D0	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{J}

0801834C	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{U}
08018060	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{J}

08024DA4	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
08024D54	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}

08024D8C	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
08024D3C	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}

0803C818	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{U}
0803C7A8	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{J}

080192B8	Get_Portrait	Either short 0x6 of char data or (if character doesn't have a character portrait) short 0x8 of class data	RET=index of character's portrait	r0=char data ptr	{U}

08019444	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{U}
0801911C	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{J}
08017548	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{U}
080172F0	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{J}

0800D07C	Call_Event_Engine	Can be used to run events whenever	r0=pointer to events, r1=0 (something to do with fading?)	{U}
0800D340	Call_Event_Engine	Can be used to run events whenever	r0=pointer to events, r1=0 (something to do with fading?)	{J}

080346B0	Get_Chapter_Events	RET=Pointer to that chapter's events	r0=chapter number	{U}
080345B8	Get_Chapter_Events	RET=Pointer to that chapter's events	r0=chapter number	{J}

08019464	Get_Rom_Character_Data	RET=beginning of character data, or 0 if passed 0	r0=character number	{U}
0801913C	Get_Rom_Character_Data	RET=beginning of character data, or 0 if passed 0	r0=character number	{J}
0801829C	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{U}
08017FB0	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{J}


08016FB8	Heal_Amount_Getter	RET=Amount to heal	r0=ram char data ptr	r1=item id/uses	{U}
08016D60	Heal_Amount_Getter	RET=Amount to heal	r0=ram char data ptr	r1=item id/uses	{J}

080177F4	Clear_Character_Data	Clears a person's ram character struct except for the allegiance byte	r0=ram char data ptr	{U}
0801759C	Clear_Character_Data	Clears a person's ram character struct except for the allegiance byte	r0=ram char data ptr	{J}


080178D8	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{U}
08017680	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{J}

08000DB8	Write_Palette CopyToPaletteBuffer	r0=pointer to palette	r1=destination offset	r2=size (0x20 per full palette)	{U}
08000D68	Write_Palette CopyToPaletteBuffer	r0=pointer to palette	r1=destination offset	r2=size (0x20 per full palette)	{J}


08037A04	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{U}
08037A9C	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{J}

080179D8	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{U}
08017780	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{J}
08031570	Count_Items_In_Convoy	RET=Number of items in convoy	{U}
080314BC	Count_Items_In_Convoy	RET=Number of items in convoy	{J}

08024E20	Add_Gold_To_Cashpile	r0=amount of gold	{U}
08024DD0	Add_Gold_To_Cashpile	r0=amount of gold	{J}

080177B0	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{U}
08017558	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{J}


08017A34	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{U}
080177DC	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{J}
08016BC0	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{U}
08016968	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{J}


080197E4	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{U}
080194BC	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{J}
08024D50	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{U}
08024D00	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{J}

0801702C	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{U}
08016DD4	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{J}

08803D30	UnitsID:0	{U}
08858288	UnitsID:0	{J}


//from https://doc.feuniverse.us/static/stan/GraphicsBuffersEtc.txt
08000E4C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{J}
08000E9C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{U}
08000EF4	GetBackgroundControlBufferPtr	{J}
08000F44	GetBackgroundControlBufferPtr	{U}
08000F3C	GetBackgroundTileDataOffset	{J}
08000F8C	GetBackgroundTileDataOffset	{U}
08000F8C	SetBackgroundTileDataOffset	{J}
08000FDC	SetBackgroundTileDataOffset	{U}
08000FB4	SetBackgroundMapDataOffset	{J}
08001004	SetBackgroundMapDataOffset	{U}
08000FFC	SetBackgroundScreenSize	{J}
0800104C	SetBackgroundScreenSize	{U}
08001448	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{J}
0800148C	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{U}
080011D0	FillBGMap	Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{J}
08001220	FillBGMap	Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{U}

08001BC0	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{J}
08001C4C	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{U}
08001EFC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{J}
08001FAC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{U}
08001F0C	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{J}
08001FBC	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{U}
080010FC	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{J}
0800114C	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{U}
08001F30	ClearTileRigistry Clears array	{J}
08001FE0	ClearTileRigistry Clears array	{U}
08001F64	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{J}
08002014	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{U}
08001FA4	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{J}
08002054	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{U}
080011F0	RegisterBlankTile	void	r0=Tile index	{J}
08001240	RegisterBlankTile	void	r0=Tile index	{U}
08001FD8	FlushTiles	DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{J}
08002088	FlushTiles	DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{U}

@IORegisters@00	short	To 04000000 (DISPCNT / LCD Control)
@IORegisters@04	short	To 04000004 (DISPSTAT/ General LCD Status)
@IORegisters@0C	short	To 04000008 (BG0CNT / BG0 Control)
@IORegisters@10	short	To 0400000A (BG1CNT / BG1 Control)
@IORegisters@14	short	To 0400000C (BG2CNT / BG2 Control)
@IORegisters@18	short	To 0400000E (BG3CNT / BG3 Control)
@IORegisters@1C	vec2*	To 04000010 (BG0HOFS / BG0 X-Offset; BG0VOFS  / BG0 Y-Offset)
@IORegisters@20	vec2 	To 04000014 (BG1HOFS / BG1 X-Offset; BG1VOFS  / BG1 Y-Offset)
@IORegisters@24	vec2 	To 04000018 (BG2HOFS / BG2 X-Offset; BG2VOFS  / BG2 Y-Offset)
@IORegisters@28	vec2 	To 0400001C (BG3HOFS / BG3 X-Offset; BG3VOFS  / BG3 Y-Offset)
@IORegisters@2C	short	To 04000040 (WIN0H / Window 0 Horizontal Dimensions)
@IORegisters@2E	short	To 04000042 (WIN1H / Window 1 Horizontal Dimensions)
@IORegisters@30	short	To 04000044 (WIN0V / Window 0 Vertical Dimensions)
@IORegisters@32	short	To 04000046 (WIN1V / Window 1 Vertical Dimensions)
@IORegisters@34	short	To 04000048 (WININ / Inside of Window 0 and 1)
@IORegisters@36	short	To 0400004A (WINOUT / Inside of OBJ Window & Outside of Windows)
@IORegisters@38	short	To 0400004C (MOSAIC / Mosaic Size)
@IORegisters@3C	short	To 04000050 (BLDCNT / Color Special Effects Selection)
@IORegisters@44	short	To 04000052 (BLDALPHA / Alpha Blending Coefficients)
@IORegisters@46	short	To 04000054 (BLDY / Brightness (Fade-In/Out) Coefficient)
@IORegisters@48	short	To 04000020 (BG2PA / BG2 Rotation/Scaling Parameter A (dx))
@IORegisters@4A	short	To 04000022 (BG2PB / BG2 Rotation/Scaling Parameter B (dmx))
@IORegisters@4C	short	To 04000024 (BG2PC / BG2 Rotation/Scaling Parameter C (dy))
@IORegisters@4E	short	To 04000026 (BG2PD / BG2 Rotation/Scaling Parameter D (dmy))
@IORegisters@50	word 	To 04000028 (BG2X / BG2 Reference Point X-Coordinate)
@IORegisters@54	word 	To 0400002C (BG2Y / BG2 Reference Point Y-Coordinate)
@IORegisters@58	short	To 04000030 (BG3PA / BG3 Rotation/Scaling Parameter A (dx))
@IORegisters@5A	short	To 04000032 (BG3PB / BG3 Rotation/Scaling Parameter B (dmx))
@IORegisters@5C	short	To 04000034 (BG3PC / BG3 Rotation/Scaling Parameter C (dy))
@IORegisters@5E	short	To 04000036 (BG3PD / BG3 Rotation/Scaling Parameter D (dmy))
@IORegisters@60	word 	To 04000038 (BG3X / BG3 Reference Point X-Coordinate)
@IORegisters@64	word 	To 0400003C (BG3Y / BG3 Reference Point Y-Coordinate)

03003080	@IORegisters	IORegisters	{U}
03003020	@IORegisters	IORegisters	{J}

02022CA8	BG0 Map Buffer	{U}
02022CA8	BG0 Map Buffer	{J}
020234A8	BG1 Map Buffer	{U}
020234A8	BG1 Map Buffer	{J}
02023CA8	BG2 Map Buffer	{U}
02023CA8	BG2 Map Buffer	{J}
020244A8	BG3 Map Buffer	{U}
020244A8	BG3 Map Buffer	{J}
0300000D	BG Update Flag 		bit 0 | (bool) BG0 Map to be updated	bit 1 | (bool) BG1 Map to be updated	bit 2 | (bool) BG2 Map to be updated	bit 3 | (bool) BG3 Map to be updated	{U}
0300000C	BG Update Flag 		bit 0 | (bool) BG0 Map to be updated	bit 1 | (bool) BG1 Map to be updated	bit 2 | (bool) BG2 Map to be updated	bit 3 | (bool) BG3 Map to be updated	{J}

@TileRegistry@00	word	source pointer / fill value
@TileRegistry@04	word	destination (VRAM) pointer
@TileRegistry@08	short	size of graphics (bytes)
@TileRegistry@0A	short	mode?	is 0 when size isn't a multiple of 0x20, is 2 for fill (not copy)
02024CDC	@TileRegistry@[20]	TileRegistries	{U}
02024CDC	@TileRegistry@[20]	TileRegistries	{J}

020228A8	palette buffer	{U}
020228A8	palette buffer	{J}

0300000E	flag palette RAM needs to be updated	is a byte (bool) that tells the game	{U}
0300000D	flag palette RAM needs to be updated	is a byte (bool) that tells the game	{J}
030030E8	byte that contains a color value difference	Essentially, when non null, it will map *all* colors in *all* palettes the following way	(r, g, b) => (r + x, g + x, b + x); With values being kept in [0, 31] range of course,It's probably used for fading in/out	{U}

03003140	The whole OAM buffer	{U}
03000020	pointer to start of secondary buffer	{U}
03000024	pointer to target VRAM/OAM for secondary buffer	{U}
03000028	starting index for secondary OAM (aka primary OAM size) (seems to be never read?)	{U}
0300002A	size (in number of entries) of secondary OAM buffer (0x80 - start)	{U}
03000030	pointer to start of primary buffer (0x03003140)	{U}
03000034	pointer to target VRAM/OAM for primary buffer (0x07000000)	{U}
03000038	starting index for primary OAM (0) (seems to be never read?)	{U}
0300003A	size (in number of entries) of primary OAM buffer (can be 0!)	{U}
03003070	pointer to next free entry in primary OAM buffer	(can overflow into secondary!)	{U}
03003744	pointer to next free entry in secondary OAM buffer	(can overflow into unsafe memory!)	{U}
03004158	pointer for writing Rotation/Scale data to OAM buffer	(only used by AIS afaik)	{U}
0300312C	current Rotation/Scale data index(type:short)	(used in conjonction with the above)	{U}

0800217C	FlushPrimaryOAM	DON'T CALL THIS YOURSELF (called on VBlank); Sends primary OAM buffer data to actual OAM	{U}
08002138	FlushSecondaryOAM	DON'T CALL THIS YOURSELF (called on VBlank); Sends secondary OAM buffer data to actual OAM	{U}
08002BCC	PushToPrimaryOAM	Pushes data to primary OAM.   Actually calls routine stored in IWRAM (pointed by 03004154, originally at 08000534, ARM)	r0=base x coord	r1=base y coord	r2=pointer to OAM Data	r3=base OAM2 (tile/palette index)	{U}
08002BB8	PushToSecondaryOAM	Pushes data to secondary OAM	Actually calls routine stored in IWRAM (pointed by 03003130, originally at 08000494, ARM)	r0=base x coord	r1=base y coord	r2=pointer to OAM Data	r3=base OAM2 (tile/palette index)	{U}
080021B0	WriteOAMRotScaleData	Writes Rotation/Scale data for a fixed index	r0=index	r1=PA	r2=PB	r3=PC	[sp+0]=PD	{U}
080020FC	SetupOAMBufferSplice	Sets up OAM buffers	r0=Size (in number of entries) of Primary buffer	{U}


030030E0	The whole OAM buffer	{J}
03000018	pointer to start of secondary buffer	{J}
03000028	pointer to start of primary buffer	{J}
03003010	pointer to next free entry in primary OAM buffer	(can overflow into secondary!)	{J}
030036E4	pointer to next free entry in secondary OAM buffer	(can overflow into unsafe memory!)	{J}
030040F8	pointer for writing Rotation/Scale data to OAM buffer	(only used by AIS afaik)	{J}
030030CC	current Rotation/Scale data index(type:short)	(used in conjonction with the above)	{J}

080020CC	FlushPrimaryOAM	DON'T CALL THIS YOURSELF (called on VBlank); Sends primary OAM buffer data to actual OAM	{J}
08002088	FlushSecondaryOAM	DON'T CALL THIS YOURSELF (called on VBlank); Sends secondary OAM buffer data to actual OAM	{J}
08002B1C	PushToPrimaryOAM	Pushes data to primary OAM.   Actually calls routine stored in IWRAM (pointed by 03004154, originally at 08000534, ARM)	r0=base x coord	r1=base y coord	r2=pointer to OAM Data	r3=base OAM2 (tile/palette index)	{J}
08002ACC	PushToSecondaryOAM	Pushes data to secondary OAM	Actually calls routine stored in IWRAM (pointed by 03003130, originally at 08000494, ARM)	r0=base x coord	r1=base y coord	r2=pointer to OAM Data	r3=base OAM2 (tile/palette index)	{J}
08002100	WriteOAMRotScaleData	Writes Rotation/Scale data for a fixed index	r0=index	r1=PA	r2=PB	r3=PC	[sp+0]=PD	{J}
0800204C	SetupOAMBufferSplice	Sets up OAM buffers	r0=Size (in number of entries) of Primary buffer	{J}


@IntermediateOAMEntry@00	word	Next Entry	(yes this is linked list)
@IntermediateOAMEntry@04	short	base x coordinate
@IntermediateOAMEntry@06	short	base y coordinate
@IntermediateOAMEntry@08	short	base OAM2 data	(tile index & palette index)
@IntermediateOAMEntry@0C	word	pointer to ROM OAM Data	(see above, "Object Attributes (raw buffers)" section)
02029D8C	@IntermediateOAMEntry@[40]	oam	{U}
0202A58C	@IntermediateOAMEntry@[F]	oam root node	{U}

02029D88	@IntermediateOAMEntry@[40]	oam	{J}
0202A588	@IntermediateOAMEntry@[F]	oam root node	{J}

08005458	FlushIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); push to secondary raw OAM buffer	{U}
08005428	RegisterObject	(ye idk names anymore) Registers object attributes to intermediate buffers	r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{U}
080053E8	RegisterObjectSafe	I don't see any difference with the above, except that x & y are truncated properly (it's "Safe")	r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{U}
080053A4	ClearIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); resets buffers	{U}


08005360	FlushIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); push to secondary raw OAM buffer	{J}
08005330	RegisterObject	(ye idk names anymore) Registers object attributes to intermediate buffers	r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{J}
080052F0	RegisterObjectSafe	I don't see any difference with the above, except that x & y are truncated properly (it's "Safe")	r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{J}
080052AC	ClearIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); resets buffers	{J}


//DEBUG STUFF NOTES.txt
0801C090	Debug Startup routine	the following EA code will replace the standard one	{U}
0801BD20	Debug Startup routine	the following EA code will replace the standard one	{J}

0800378C	Loads Debug Font (BG)	r0=BG Index (2)	r1=Tile Offset(0 for default)	{U}
080036D8	Loads Debug Font (BG)	r0=BG Index (2)	r1=Tile Offset(0 for default)	{J}
08003804	Displays String to BG	r0=Output Tile Root	r1=String pointer	{U}
08003750	Displays String to BG	r0=Output Tile Root	r1=String pointer	{J}
0800394C	Prints Dec Number to DBG	r0=Number	r1=Digit count to display	{U}
08003898	Prints Dec Number to DBG	r0=Number	r1=Digit count to display	{J}
080039B4	Prints Hex Number to DBG	r0=Number	r1=Digit count to display	{U}
08003900	Prints Hex Number to DBG	r0=Number	r1=Digit count to display	{J}
080039D0	Prints String to DBG	r0=String pointer(will understand newlines!)	{U}
0800391C	Prints String to DBG	r0=String pointer(will understand newlines!)	{J}
08003A3C	Displays DBG text on BG2	{U}
08003988	Displays DBG text on BG2	{J}
08003ABC	Displaus DBG text on BG2 and handles V-Scroll	r0=current key presses	r1=new key presses	{U}
08003A08	Displaus DBG text on BG2 and handles V-Scroll	r0=current key presses	r1=new key presses	{J}
08003B24	Loads Debug Font (OBJ)	r0=OBJ Tile Offset (negative => default)	r1=OBJ Palette Index	{U}
08003A70	Loads Debug Font (OBJ)	r0=OBJ Tile Offset (negative => default)	r1=OBJ Palette Index	{J}
08003BB0	Prints String as OBJ	r0=x	r1=y	r2=String pointer	{U}
08003AFC	Prints String as OBJ	r0=x	r1=y	r2=String pointer	{J}
08003BFC	Prints Dec Number as OBJ	r0=x	r1=y	r2=Number	r3=Digit count to display	{U}
08003B48	Prints Dec Number as OBJ	r0=x	r1=y	r2=Number	r3=Digit count to display	{J}
08003C20	Prints Hex Number as OBJ	r0=x	r1=y	r2=Number	r3=Digit count to display	{U}
08003B6C	Prints Hex Number as OBJ	r0=x	r1=y	r2=Number	r3=Digit count to display	{J}
08003C44	Another Print idk	{U}


//BWLEntry.txt
080A481C	BWL_AddTilesMoved	r0=Char Id	r1=Tiles moved	{U}
080A9260	BWL_AddTilesMoved	r0=Char Id	r1=Tiles moved	{J}
080A4A34	BWL_AddFavoritismValue	r0=Char Id	r1=Value	{U}
080A9478	BWL_AddFavoritismValue	r0=Char Id	r1=Value	{J}


//6CNotes.txt
@6CStructHeader@00	word	Pointer to start of code	(I used to misrefer this as "struct type")
@6CStructHeader@04	word	Pointer to code cursor
@6CStructHeader@08	word	Pointer to Destructor routine	(called when struct is destroyed)
@6CStructHeader@0C	word	Pointer to Loop Routine	(this is called instead of code when it is not null)
@6CStructHeader@10	word	Pointer to name	(Probably for debug purpose. Still set in FE8. /!\ Never cleared)
@6CStructHeader@14	word	Pointer to Parent 6C	(If Struct is Main 6C, Main 6C Array Index instead)
@6CStructHeader@18	word	Pointer to First Child Struct (0 if none)
@6CStructHeader@1C	word	Pointer to Previous Struct (0 if first)
@6CStructHeader@20	word	Pointer to Next Struct (0 if last)
@6CStructHeader@24	short	Sleep Timer	(each call to the sleep loop decrements it, the sleep loop will clear itself when this reaches 0)
@6CStructHeader@26	byte	Mark	(Code 000F stores sarg to this byte, used by various routines)
@6CStructHeader@27	byte	Some kind of bitfield	(see below for known bits)
@6CStructHeader@28	byte	Block Counter (Won't exec self if not 0)
@6CStructHeader@2C	word	userspace0
@6CStructHeader@30	word	userspace1
@6CStructHeader@34	word	userspace2
@6CStructHeader@38	word	userspace3
@6CStructHeader@3C	word	userspace4
@6CStructHeader@40	word	userspace5
@6CStructHeader@44	word	userspace6
@6CStructHeader@48	word	userspace7
@6CStructHeader@4C	word	userspace8
@6CStructHeader@50	word	userspace9
@6CStructHeader@54	word	userspace10
@6CStructHeader@58	word	userspace11
@6CStructHeader@5C	word	userspace12
@6CStructHeader@60	word	userspace13
@6CStructHeader@64	word	userspace14
@6CStructHeader@68	word	userspace15

08002E84	Exec6C Routine Locations	Arguments: r0 = Struct Pointer; Returns: nothing	{U}
08002DD4	Exec6C Routine Locations	Arguments: r0 = Struct Pointer; Returns: nothing	{J}
08002E88	Exec6C Routine Locations(wraps)	{U}
08002DD8	Exec6C Routine Locations(wraps)	{J}

08003394	Run6CCode Routine Locations	r0=Struct Pointer; Returns: nothing	{U}
080032E0	Run6CCode Routine Locations	r0=Struct Pointer; Returns: nothing	{J}
02026A70	Main 6C Array Locations	{U}
02026A70	Main 6C Array Locations	{J}

080152F4	a main update routine 6C Exec Order	{U}
08015318	a main update routine 6C Exec Order	{J}


@6CPointer@0	word	pointer

02024E68	@6CStructHeader@[40]	PoolOf6C	{U}
02026968	@6CPointer@[40]	Lookup6C	{U}
02026A6C	Alloc6CIt	Pointer to the next available slot in the Lookup6C table	{U}
02026A70	@6CPointer@[7]	MainArray	{U}

08002C08	Reset6CEngine	Zeroes all 6C headers in Pool. Called on game startup.	{U}
08002C7C	Create6C	Allocates a new 6C with code pointer (field 0x00&0x04) set to argument	r0=A	r1=Parent is argument	{U}
08002CE0	Create6CBlockingCalls	Create6C, sets 6C (R:r0) field 27 bit 2. Increments 6C (R:r0) parent (field 0x14) Block Counter.	{U}
08002D10	Delete6C	Calls Delete6C for 6C (A:r0) children. Calls 6C (A:r0) Destructor (field 0x08). Calls Free6C.	{U}
08002D6C	Delete6C(Wrapper)	Calls Isolate6C then Delete6C	{U}
08002D84	Allocate6C	Increments Alloc6CIt, returns pointer to next free 6C	{U}
08002D94	Free6C	Wierd, but I assume it frees the 6C (A:r0)	{U}
08002DA4	InsertMain6C	Sets 6C (A:r0) as first Main 6C in array index (A:r1) after linking previous first main accordingly.	{U}
08002DC8	InsertChild6C	Sets 6C (A:r0) as first child of 6C (A:r1) after linking related 6Cs accordingly.	{U}
08002DE0	Isolate6C	Clears 6C (A:r0) Parent, Next & Previous fields (after linking them accordingly). Called during destruction.	{U}
08002E84	Exec6C (Wrapper)	{U}
08002E28	Exec6C	{U}
08002E94	ClearLoop	Sets 6C (A:r0) Loop Routine (field 0xC) to null (used by Loop routines to break loops)	{U}
08002E9C	Find6C	Returns first 6C (R:r0) whose code start pointer (field 0x0) matches argument (A:r0)	{U}
08002EC4	Find6CRunning	Same as Find6C, except it will skip 6Cs that are not currently running (Block Counter (field 0x28) != 0)	{U}
08002EF4	Find6CByMark	Returns first 6C (R:r0) whose Mark (field 0x26) matches argument (A:r0)	{U}
08002F24	Goto6CLabel	Sets 6C (A:r0) code cursor (field 0x04) to after the first label (code 0x0B:sarg) matching argument (A:r1) (*)	{U}
08002F5C	Goto6CPointer	Sets 6C (A:r0) code cursor (field 0x04) to argument (A:r1). Clears 6C loop routine (field 0x0C)	{U}
08002F64	Set6CMark	Sets 6C (A:r0) Mark (field 0x26) to argument (A:r1)	{U}
08002F6C	Set6CDestructor	Sets 6C (A:r0) Destructor routine (field 0x08) to argument (A:r1)	{U}
08002F70	ForAll6C	Executes routine (A:r0) for each existing 6C (r0 passes the 6C pointer)	{U}
08002F98	ForEach6C	Executes routine (A:r0) for each 6C whose code pointer matches argument (A:r1) (r0 passes the 6C pointer)	{U}
08002FC0	ForEach6CMarked	Included for the sake of completeness. Doesn't seem to be ever used (at least in FE8U)	{U}
08002FEC	BlockEach6CMarked	Increments Block Counter (field 0x28) for each 6C whose mark (field 0x26) matches argument (A:r0)	{U}
08003014	UnblockEach6CMarked	Decrements Block Counter (field 0x28) for each 6C whose mark (field 0x26) matches argument (A:r0)	{U}
08003040	DeleteEach6CMarked	Deletes each 6C whose mark (field 0x26) matches argument (A:r0)	{U}
0800306C	Delete6C (Wrapper)	Calls Delete6C. Called only by DeleteEach6C	{U}
08003078	DeleteEach6C	Deletes each 6C whose code pointer matches argument (A:r0)	{U}
08003088	ClearLoop (Wrapper)	Calls ClearLoop. Called only by ClearEach6CLoop	{U}
08003094	ClearEach6CLoop	Clears Loop Routine (field 0x0C) for each 6C whose code pointer matches argument (A:r0)	{U}
080030A4	ForAll6CFollowing	Executes routine (A:r1) for 6C (A:r0). Recursively calls ForAll6CFollowing for 6C (A:r0) Next & First Child.	{U}


02024E68	@6CStructHeader@[40]	PoolOf6C	{J}
02026968	@6CPointer@[40]	Lookup6C	{J}
02026A6C	Alloc6CIt	Pointer to the next available slot in the Lookup6C table	{J}
02026A70	@6CPointer@[7]	MainArray	{J}

08002B58	Reset6CEngine	Zeroes all 6C headers in Pool. Called on game startup.	{J}
08002BCC	Create6C	Allocates a new 6C with code pointer (field 0x00&0x04) set to argument	r0=A	r1=Parent is argument	{J}
08002C30	Create6CBlockingCalls	Create6C, sets 6C (R:r0) field 27 bit 2. Increments 6C (R:r0) parent (field 0x14) Block Counter.	{J}
08002C60	Delete6C	Calls Delete6C for 6C (A:r0) children. Calls 6C (A:r0) Destructor (field 0x08). Calls Free6C.	{J}
08002CBC	Delete6C(Wrapper)	Calls Isolate6C then Delete6C	{J}
08002CD4	Allocate6C	Increments Alloc6CIt, returns pointer to next free 6C	{J}
08002CE4	Free6C	Wierd, but I assume it frees the 6C (A:r0)	{J}
08002CF4	InsertMain6C	Sets 6C (A:r0) as first Main 6C in array index (A:r1) after linking previous first main accordingly.	{J}
08002D18	InsertChild6C	Sets 6C (A:r0) as first child of 6C (A:r1) after linking related 6Cs accordingly.	{J}
08002D30	Isolate6C	Clears 6C (A:r0) Parent, Next & Previous fields (after linking them accordingly). Called during destruction.	{J}
08002DD4	Exec6C (Wrapper)	{J}
08002D78	Exec6C	{J}
08002DE4	ClearLoop	Sets 6C (A:r0) Loop Routine (field 0xC) to null (used by Loop routines to break loops)	{J}
08002DEC	Find6C	Returns first 6C (R:r0) whose code start pointer (field 0x0) matches argument (A:r0)	{J}
08002E14	Find6CRunning	Same as Find6C, except it will skip 6Cs that are not currently running (Block Counter (field 0x28) != 0)	{J}
08002E44	Find6CByMark	Returns first 6C (R:r0) whose Mark (field 0x26) matches argument (A:r0)	{J}
08002E74	Goto6CLabel	Sets 6C (A:r0) code cursor (field 0x04) to after the first label (code 0x0B:sarg) matching argument (A:r1) (*)	{J}
08002EAC	Goto6CPointer	Sets 6C (A:r0) code cursor (field 0x04) to argument (A:r1). Clears 6C loop routine (field 0x0C)	{J}
08002EB4	Set6CMark	Sets 6C (A:r0) Mark (field 0x26) to argument (A:r1)	{J}
08002EBC	Set6CDestructor	Sets 6C (A:r0) Destructor routine (field 0x08) to argument (A:r1)	{J}
08002EC0	ForAll6C	Executes routine (A:r0) for each existing 6C (r0 passes the 6C pointer)	{J}
08002EE8	ForEach6C	Executes routine (A:r0) for each 6C whose code pointer matches argument (A:r1) (r0 passes the 6C pointer)	{J}
08002F10	ForEach6CMarked	Included for the sake of completeness. Doesn't seem to be ever used (at least in FE8U)	{J}
08002F3C	BlockEach6CMarked	Increments Block Counter (field 0x28) for each 6C whose mark (field 0x26) matches argument (A:r0)	{J}
08002F64)	UnblockEach6CMarked	Decrements Block Counter (field 0x28) for each 6C whose mark (field 0x26) matches argument (A:r0)	{J}
08002F90	DeleteEach6CMarked	Deletes each 6C whose mark (field 0x26) matches argument (A:r0)	{J}
08002FBC	Delete6C (Wrapper)	Calls Delete6C. Called only by DeleteEach6C	{J}
08002FC8	DeleteEach6C	Deletes each 6C whose code pointer matches argument (A:r0)	{J}
08002FD8	ClearLoop (Wrapper)	Calls ClearLoop. Called only by ClearEach6CLoop	{J}
08002FE4	ClearEach6CLoop	Clears Loop Routine (field 0x0C) for each 6C whose code pointer matches argument (A:r0)	{J}
08002FF4	ForAll6CFollowing	Executes routine (A:r1) for 6C (A:r0). Recursively calls ForAll6CFollowing for 6C (A:r0) Next & First Child.	{J}


//https://doc.feuniverse.us/static/stan/HiddenMapFlags.txt
0202E4EC	maps to each tile a set of flags	&0x01 <=> A unit is hidden here	&0x02 <=> A trap is hidden here?	{U}
0202E4E8	maps to each tile a set of flags	&0x01 <=> A unit is hidden here	&0x02 <=> A trap is hidden here?	{J}

//https://doc.feuniverse.us/static/stan/HardcodedChecks.txt
08078D6C	Hardcoded Class checks for lots of stuff	{U}
08078D86	Hardcoded Class checks for lots of stuff	{U}
080347D4	Hardcoded Class check for Demon King & Manakete2	{U}
08034810	Hardcoded Class check for Demon King & Manakete2	{U}
080180CC	Gorgon Egg Checks	{U}
080183FC	Phantom Check	{U}
0802A730	Item checks for Magic Swords(SetupBattleWeaponData)	{U}
0802A872	Item checks for Magic Swords	{U}
08016B8C	IsItemCoveringRange	Item Table is read directly for range	{U}
0802AABC	Hardcoded check for legendary weapons(BattleLoadAttack)	{U}
0802AB18	Hardcoded check for legendary weapons	{U}
0802B62C	Donkey Kong Check (Item HP Halving & Poison)	{U}
080812D8	Dancer Class Id Check	{U}

0807B180	Hardcoded Class checks for lots of stuff	{J}
0807B19A	Hardcoded Class checks for lots of stuff	{J}
080346DC	Hardcoded Class check for Demon King & Manakete2	{J}
08034718	Hardcoded Class check for Demon King & Manakete2	{J}
08017DE8	Gorgon Egg Checks	{J}
08018110	Phantom Check	{J}
0802A69C	Item checks for Magic Swords(SetupBattleWeaponData)	{J}
0802A7DE	Item checks for Magic Swords	{J}
08016934	IsItemCoveringRange	Item Table is read directly for range	{J}
0802AA28	Hardcoded check for legendary weapons(BattleLoadAttack)	{J}
0802AA88	Hardcoded check for legendary weapons	{J}
0802B580	Donkey Kong Check (Item HP Halving & Poison)	{J}
08083618	Dancer Class Id Check	{J}
0802FFAC	Read map tile animation	{J}
0803005C	Read map tile animation	{U}
0802FFF4	Read Map Tile Animation 2 (Palette Animation)		{J}
080300A4	Read Map Tile Animation 2 (Palette Animation)		{U}
0203E188	RAM pointer to unit data to attacker (to 0203a4e8)	{J}
0203E18C	RAM pointer to unit data to attacker (to 0203A4EC)	{U}
0203E184	RAM pointer to unit data to defenser (to 0203a568)	{J}
0203E188	RAM pointer to unit data to defenser (to 0203A56C)	{U}
0203a4e8	@Unit	Copy unit data of attacker	{J}
0203A4EC	@Unit	Copy unit data of attacker	{U}
0203a568	@Unit	Copy unit data of defenser	{J}
0203A56C	@Unit	Copy unit data of defenser	{U}

//Circles\ASM\Modular Stat Screens\mss_defs.s
080870BC	Stat Screens DrawBar	{U}
08089354	Stat Screens DrawBar	{J}
02003c2c	Stat Screens TileBufferBase	{U}
//none
08018A58	Stat Screens MagCheck	{U}
0801876C	Stat Screens MagCheck	{J}
080036BC	Stat Screens DrawIcon	{U}
08003608	Stat Screens DrawIcon	{J}
080193E8	Stat Screens WriteTrvText	{U}
080190C0	Stat Screens WriteTrvText	{J}
08019414	Stat Screens WriteStatusText	{U}
080190EC	Stat Screens WriteStatusText	{J}
08004480	Stat Screens AppendText	{U}
080043B8	Stat Screens AppendText	{J}
080286BC	Stat Screens AffinityGetter	{U}
08028650	Stat Screens AffinityGetter	{J}
08016B28	Stat Screens EquippedWeaponGetter	{U}
080168D0	Stat Screens EquippedWeaponGetter	{J}
08086FAC	Stat Screens DrawBWLNumbers	{U}
08089A00	Stat Screens DrawWeaponRank	{J}
08087788	Stat Screens DrawWeaponRank	{U}
08089910	Stat Screens DrawSupports	{J}
08087698	Stat Screens DrawSupports	{U}
02003BFC	Stat Screens StatScreenStruct	{U}
02003BFC	Stat Screens StatScreenStruct	{J}
02003c94	Stat Screens tile_origin	{U}
//none






0806EFB8	Battle animation scriptC26 (throw shield) / C27 (throw sword) command judgment	{J}
0806CC94	Battle animation scriptC26 (throw shield) / C27 (throw sword) command judgment	{U}
080564F0	Special movement of tiles?Called from C26 / C27	r1=Pointer array 1	r2=Pointer array 1	r3=??	{J}
08055554	Special movement of tiles?Called from C26 / C27	r1=Pointer array 1	r2=Pointer array 1	r3=??	{U}
081B16E0	:081B1878	Japanese notation of terrain	{J}
081B1878	:081B258C	The terrain and the name of the character are entered in ASCII	{J}
081B258C	:081B2C80	The staff role is entered in ASCIINot used	{J}
081B2C80	:081B2D84	String of MAPIDNot used	{J}
081C1D28	:081C1EC0	Japanese notation of terrain	{U}
081C1EC0	:081C2BD4	The terrain and the name of the character are entered in ASCII	{U}
081C2BD4	:081C32C8	The staff role is entered in ASCIINot used	{U}
081C32C8	:081C33CC	String of MAPIDNot used	{U}
08A5A720	:08A5A75C	Tutorial Pointer Introduction	{J}
08A613E8	:08A61960	Introduction of an event called from the tutorial	{J}
08A5A884	:08A5A8BC	Tutorial pointer 1 chapter	{J}
08A61DD4	:08A623BC	Events called from the tutorial 1 chapter	{J}
08A5A9DC	:08A5AA54	Tutorial pointer 2	{J}
08A6293C	:08A63288	Events called from the tutorial Chapter 2	{J}
089E85FC	:089E8638	Tutorial Pointer Introduction	{U}
089E8760	:089E8798	Introduction of an event called from the tutorial	{U}
089EF2B0	:089EF828	Tutorial pointer 1 chapter	{U}
089EFC9C	:089F0284	Events called from the tutorial 1 chapter	{U}
089E88B8	:089E8930	Tutorial pointer 2	{U}
089F0808	:089F1154	Events called from the tutorial Chapter 2	{U}
0802AB1C	Avoid ratea formula	{J}
0802ABAC	Avoid ratea formula	{U}
08004EB4	Parsing battle animation frame data	{J}
08004FAC	Parsing battle animation frame data	{U}
0804E884	ClearBG0BG1	{U}
0804F610	ClearBG0BG1	{J}
0804EB68	LoadNewUIGraphics	{U}
0804F8F4	LoadNewUIGraphics	{J}
0800D1F8	SetEventSlotC	{U}
0800D4BC	SetEventSlotC	{J}
080d4f0C	Sound effect playback (discovered when tracking sound effects playback)	{J}
080D0214	Sound effect playback (discovered when tracking sound effects playback)	{U}
0803144c	Base address of transporter	{J}
08031500	Base address of transporter	{U}
08016848	Drawing a sale item column in a store	{U}
080165F0	Drawing a sale item column in a store	{J}
0802e42c	Obtain address of designated map change	r0=Map Change Id	{J}
080B3984	Show list of songs in the sound room	{J}
080AED64	Show list of songs in the sound room	{U}
08058E44	Get indirect effect animation of weapons	{J}
08057FF8	Get indirect effect animation of weapons	{U}
0808E688	Routine to display BAD status statusStatusTextWriter	{J}
0808C388	Routine to display BAD status statusStatusTextWriter	{U}

080D6360	_malloc_unlock_14	{J}
080D6AA0	_sbprintf	{J}
080D7A88	cvt	{J}
080D7B7C	exponent	{J}
080D9204	_localeconv_r	{J}
080D1668	_malloc_unlock_14	{U}
080D1CFC	sprintf	{U}
080D1E30	_sbprintf	{U}
080D2E18	cvt	{U}
080D2F0C	exponent	{U}
080D45C8	_localeconv_r	{U}

@ROMTCS@00	short	Relative Offset to Frame Data Ref Array
@ROMTCS@02	short	Relative Offset to Anim Data Ref Array
	
@ROMTCSRefArrays@00	short	Arrays of shorts that are relative offsets (relative *to the array*) to the relevant data
@ROMTCSAnimData@00	short	cycle time of this anim frame
@ROMTCSAnimData@02	short	data	if (cycle time is non 0){ Frame index of this anim frame}else{ 0 = Error, 1 = End/Free Anim/TCS, FFFF = Loop back to start of Anim, other = same as with std cycle }

@ROMTCSFrameData@00	short	alpha
@ROMTCSFrameData@02	short	xScale
@ROMTCSFrameData@04	short	yScale

@TheConfusingStruct@00	@ROMTCS	Pointer to ROMTCS
@TheConfusingStruct@04	@ROMTCSFrameData	Pointer to Frame Data Ref (from ROMTCS)
@TheConfusingStruct@08	@ROMTCSAnimData	Pointer to Current Anim Data (Start, where you go back on loop)
@TheConfusingStruct@0C	@ROMTCSAnimData	Pointer to Current Anim Data (Cursor)
@TheConfusingStruct@10	@ROMTCSFrameData	Pointer to Current Frame/OAM Data
@TheConfusingStruct@14	pointer	Pointer Current Rot/Scale Data
@TheConfusingStruct@18	short	Cycle Timer
@TheConfusingStruct@1A	short	Cycle Time Step (0x100 is one frame)
@TheConfusingStruct@1C	short	Sub frame time offset or something
@TheConfusingStruct@1E	short	OAM Index?
@TheConfusingStruct@20	byte	bool defining whether gfx needs update
@TheConfusingStruct@21	byte	Rotation/Scale OAM Index
@TheConfusingStruct@22	short	OAM Extra Data (Tile Index Root & OAM2 Stuff)
@TheConfusingStruct@24	pointer	Gfx Pointer

03000108	TheConfusingStruct	{U}
03000100	TheConfusingStruct	{J}


03000008	Call blah and put value??	{U}
030000E8	render_info: for cutscenes.	{U}
030000F0	When dialogue is displayed	{U}
030004E8	0xC slot of setval??	{U}
030004EC	indicates how many words are stored. stored with SAVETOQUEUE.	{U}
030004F0	Queue00 Stores word located at MemorySlot with SAVETOQUEUE.	{U}
030004F4	Queue01 Stores word located at MemorySlot	{U}
030004F8	Queue02 Stores word located at MemorySlot	{U}
030004FC	Queue03 Stores word located at MemorySlot	{U}
03000500	Queue04 Stores word located at MemorySlot	{U}
03000504	Queue05 Stores word located at MemorySlot	{U}
03000508	Queue06 Stores word located at MemorySlot	{U}
0300050C	Queue07 Stores word located at MemorySlot	{U}
03000510	Queue08 Stores word located at MemorySlot(It is unknown how many are there.)	{U}
03000570	Allocated stack for event code branch returns	{U}
030005F0	&UNIT	PopUP Dialog 6C / pointer to relevant Unit Struct	{U}
030005F4	PopUP Dialog 6C / item short / weapon type index	{U}
030005F8	PopUP Dialog 6C / number word	{U}
02020140	Popup 6C pointers seem to be stored	{U}

030000E8	When dialogue is displayed	{J}
030004E4	indicates how many words are stored. stored with SAVETOQUEUE.	{J}
030004E8	Queue00 Stores word located at MemorySlot.stored with SAVETOQUEUE.	{J}
030004EC	Queue01 Stores word located at MemorySlot.	{J}
030004F0	Queue02 Stores word located at MemorySlot.	{J}
030004F4	Queue03 Stores word located at MemorySlot.	{J}
030005F8	Queue04 Stores word located at MemorySlot.	{J}
030005FC	Queue05 Stores word located at MemorySlot.	{J}
03000600	Queue06 Stores word located at MemorySlot.	{J}
03000604	Queue07 Stores word located at MemorySlot.	{J}
03000608	Queue08 Stores word located at MemorySlot.(It is unknown how many are there.)	{J}
0300060C	Allocated stack for event code branch returns	{J}
02020140	Popup 6C pointers seem to be stored	{J}


//Zane's Stuff\Doc\Master MMB Doc.txt
02024CA8	an array of 4 pointers (one for each BG) that contain where in VRAM will the BG Maps be written to.	{U}
0808CCC8	MMBSetup	This is the main routine for setting up the minimug box. It determines where to put the box and the things on it.	{U}
0202BCB0	MiscRAMData	This section of memory has information on cursor position,  phases, chapter number, gold, and a bunch of other things	{U}
0202E4D8	BaseRowPointer	This is part of a system for getting elements on the map.  It begins with two shorts that go 0xXX 0xXX 0xYY 0xYY  followed by a pointer to the first 'row pointer'. The .set value above is this pointer to the first row pointer. I think an example would demonstrate better.	{U}
08A01828	Table of bytes, either 0x00, 0x01, or 0xFF for determining the position of windows such as the  minimug box, goal window, or terrain window	{U}
08A018AC	MMBStructType	This is the type of 0x6C struct used when drawing the box.	{U}
0859A5D0	RAMSlotTable	This is a table of pointers, with one for every deployment slot in RAM	{U}
0808BBCC	WindowPosCheck	This returns 0-3 based on cursor position. Uses the same misc. RAM data. This function is used by all window elements. here (goal, terrain, minimug), so don't edit it.	{U}
0808BBAC	WindowType	'Type' is inaccurate, it's still position but for label purposes I'm calling it type This routine returns 0-3 depending. on whether r0 and r1 are negative, positive, or zero, from the box control table. Used when determining where to draw terrain, goal, and minimug windows.	{U}
0808C5D0	MMBBuilder	This is the routine that handles parts on the box, such as the unit's name and minimug along with the tilemap for the box itself.	{U}
02003D2C	ERAMBGBuffer	This is the BG buffer dedicated to window  tilemaps, such as the tilemaps for the terrain window, goal window, and minimug box	{U}
02003E36	MMBBarRAMBuffer	This is the buffer area for the HP bar	{U}
0200422C	MMBTilemapRAMBuffer	This is where the box's tilemap is written to to accomplish the scrolling effect	{U}
08A17484	MMBTilemap	This is where the rilemap for the minimug box is.	{U}
0202A6AC	TextBufferOffset	This is the buffer text is written to.	{U}
03004150	WRAMRoutinePointer	{U}
08003F90	TexCenterer	his routine takes a given amount of space nd tries to center a given text string n that space.	RET=r0  distance in pixels to center by	r0=Space in pixels available	r1=Text string, usually text buffer	{U}
02028E70	TextParams	{U}
08003DC8	TextVRAMClearer	This function gets a space in VRAM and prepares it for the new text to be written to.	{U}
08004218	DefaultTextDraw	This is the default drawing routine There's a pointer to it at 2028E60	{U}
02028E60	DefaultTextDrawPointer	{U}
08004208	TextPalSelecter	{U}
08002B90	WRAMRoutineGetter	This routine grabs and branches to a routine written in WRAM. This one draws text.	{U}
03003740	WRAMPointer	There's a pointer to the routine here	{U}
03003A8C	TextImageWriter	This is an ARM routine in WRAM that draws text. It's hard to follow, so you might want to skip it. I'll have plenty of notes here. 	r0=font	r1=location to write to	r2=character image	r3=overlap with last character	{U}
08588240	FontColorTable	Shape Data Pointer table	{U}
08000540	CharSizeTable	{U}
080192F4	MinimugGetter	Determines a unit's minimug	{U}
08005988	CreateMinimug	This routine draws the minimug to VRAM and writes its tilemap	{U}
085911C4	MMSizeTable	{U}
08005924	MinimugWriter	{U}
08005F9C	GenericMMGetter	{U}
08005F9C	GenericMMPalGetter	{U}
08005514	PortraitEntryGetter	{U}
08005894	TilemapWriter	Writes a tilemap	r0=destination	r1=tile table	r2=base tile	r3=flag for flipping	{U}
0808C45C	DrawHPNumbers	This routine draws the HP numbers to the minimug box. It handles displaying statuses, too. Warning: This routine is called every frame by another routine in order to keep displaying the OAM	{U}
08590F44	:08591153	OAMTable	This is a table of size/shape	data and number of sprites to draw	{U}
06002DE0	StatusVRAM	{U}
08016574	EquippableCheck:	returns 0 or 1 if a unit can equip and use an item checks for silenced units	{U}
080174AC	UnusableItem	For when an item has ability 2, unusable set	{U}
080163F0	StatBonusGetter	Gets the stat bonus pointer of an item returns 0 if none	{U}
080038E0	NumBufferWriter	{U}
08019190	AnotherHPBonus	Another getter for bonus hp added to max	{U}
03003130	:03003743	OAMWriterOffset(OAMRoutineGetter)	{U}
030039BC	OAMWriter	{U}
03003744	OAMBufferEnd	{U}
0808BC10	HPBarLeftEnd	{U}
0808BC2C	HPBarMiddle	{U}
0808BC68	HPBarRightEnd	{U}
0800043C	TilemapWriter	This is an ARM routine. that draws a tilemap. For some reason, this isn't run from RAM	r0=destination	r1=tilemap	r2=base tile	{U}
0808C2CC	MMBPalSelect	Routine selects a palette and  writes it based on the unit's allegiance after ANDing the unit's number with 0xF0 you'll get 0x00, 0x40, 0x80 which are ally, npc, and enemy, respectively	{U}

08A1738C	:08A173AB	MMBAllyPalette	{U}
08A173AC	:08A173CB	MMBEnemyPalette	{U}
08A173CC	:08A173EB	MMBNPCPal	{U}
0802713C	ChapterMapSpritePal	Map sprite palette routine Called to determine map sprite palettes  in chapter maps. World map uses a  different routine. Called whenever a map sprite changes state, i.e. moving, being selected. Used every frame in unit menu	RET=r0 0x0B-0x0F 0x0B is light rune 0x0C is blue 0x0D is red 0x0E is green 0x0F is gray	r0=character in ram	{U}
08027168	CMSPAllegianceCheck	The Allegiance check is pretty much an extension of the above routine. You could call it to get the palette of a unit.	{U}

080271A0	MSUnk1Start	The following routine comes directly after, andmore research is needed on it. It's called when a sprite is updated. i.e. moving or something	{U}
0203A4C8	UnkEntryPtr	{U}
0203A018	UnkOAMTablePtr	{U}

02002774	When in the item menu	{U}
0203E794	When viewing character list, help functions, armories	{U}
030000F0	When dialogue is displayed	{U}
02000920	Main Menu	{U}
02004BC4	Status screen	{U}
02013648	Supply	{U}
02017648	In battles	{U}
0203DB64	Link Arena	{U}
02000C60	Link Arena point assignment	{U}
0201F148	Sound Room	{U}
0203E7E8	Tutorial Text	{U}
0201AFC0	World Map menu	{U}

080B04F8	Cleared Japanese menu loading routine	{U}

088B0638	:088B0890	Cleared FE6 credit pointers	{U}
081C1EC0	:081C2BD4	Cleared beta class list	{U}
081C2BD4	:081C32C8	Cleared FE6 credits	{U}
085B544C	:085B5888	Cleared Japanese text image	{U}
08A29A88	:08A2B1E4	Cleared Japanese text image	{U}
08A2B1E4	:08A2C838	Cleared Japanese text image	{U}





03000008	Call blah and put value??	{U}
030000E8	render_info: for cutscenes.	{U}
030000F0(00006840->030000E8	When dialogue is displayed	{U}
030004E8(000109B8->030004E0	0xC slot of setval??	{U}
030004EC	indicates how many words are stored. stored with SAVETOQUEUE.	{U}
030004F0(00010B5C->030004E8	Stores word located at MemorySlot00.stored with SAVETOQUEUE.	{U}
030004F4	Stores word located at MemorySlot01.	{U}
030004F8	Stores word located at MemorySlot02.	{U}
030004FC	Stores word located at MemorySlot03.	{U}
03000500	Stores word located at MemorySlot04.	{U}
03000504	Stores word located at MemorySlot05.	{U}
03000508	Stores word located at MemorySlot06.	{U}
0300050C	Stores word located at MemorySlot07.	{U}
03000510	Stores word located at MemorySlot08.(It is unknown how many are there.)	{U}
03000570	Allocated stack for event code branch returns	{U}
030005F0	&UNIT	PopUP Dialog 6C / pointer to relevant Unit Struct	{U}
030005F4	PopUP Dialog 6C / item short / weapon type index	{U}
030005F8	PopUP Dialog 6C / number word	{U}
02020140(00077F88->02020140	Popup 6C pointers seem to be stored	{U}


//Zane's Stuff\Doc\Master MMB Doc.txt
02024CA8	an array of 4 pointers (one for each BG) that contain where in VRAM will the BG Maps be written to.	{J}
0808EFC4	MMBSetup	This is the main routine for setting up the minimug box. It determines where to put the box and the things on it.	{J}
0202BCAC	MiscRAMData	This section of memory has information on cursor position,  phases, chapter number, gold, and a bunch of other things	{J}
0202E4D4	BaseRowPointer	This is part of a system for getting elements on the map.  It begins with two shorts that go 0xXX 0xXX 0xYY 0xYY  followed by a pointer to the first 'row pointer'. The .set value above is this pointer to the first row pointer. I think an example would demonstrate better.	{J}
08A738E0	Table of bytes, either 0x00, 0x01, or 0xFF for determining the position of windows such as the  minimug box, goal window, or terrain window	{J}
08A73964	MMBStructType	This is the type of 0x6C struct used when drawing the box.	{J}
085C2A50	RAMSlotTable	This is a table of pointers, with one for every deployment slot in RAM	{J}
0808DEDC	WindowPosCheck	This returns 0-3 based on cursor position. Uses the same misc. RAM data. This function is used by all window elements. here (goal, terrain, minimug), so don't edit it.	{J}
0808DEBC	WindowType	'Type' is inaccurate, it's still position but for label purposes I'm calling it type This routine returns 0-3 depending. on whether r0 and r1 are negative, positive, or zero, from the box control table. Used when determining where to draw terrain, goal, and minimug windows.	{J}
0808E8CC	MMBBuilder	This is the routine that handles parts on the box, such as the unit's name and minimug along with the tilemap for the box itself.	{J}
02003D2C	ERAMBGBuffer	This is the BG buffer dedicated to window  tilemaps, such as the tilemaps for the terrain window, goal window, and minimug box	{J}
0200422C	MMBTilemapRAMBuffer	This is where the box's tilemap is written to to accomplish the scrolling effect	{J}
08A931D0	MMBTilemap	This is where the rilemap for the minimug box is.	{J}
0202A6A8	TextBufferOffset	This is the buffer text is written to.	{J}
030040F0	WRAMRoutinePointer	{J}
08003EAC	TexCenterer	his routine takes a given amount of space nd tries to center a given text string n that space.	RET=r0  distance in pixels to center by	r0=Space in pixels available	r1=Text string, usually text buffer	{J}
02028E70	TextParams	{J}
08003CF8	TextVRAMClearer	This function gets a space in VRAM and prepares it for the new text to be written to.	{J}
08004150	DefaultTextDraw	This is the default drawing routine There's a pointer to it at 2028E60	{J}
08004140	TextPalSelecter	{J}
08002AE0	WRAMRoutineGetter	This routine grabs and branches to a routine written in WRAM. This one draws text.	{J}
030036E0	WRAMPointer	There's a pointer to the routine here	{J}
08000540	CharSizeTable	{J}
08018FEC	MinimugGetter	Determines a unit's minimug	{J}
085B8F5C	MMSizeTable	{J}
0800582C	MinimugWriter	{J}
08005EA0	GenericMMGetter	{J}
08005EA0	GenericMMPalGetter	{J}
0800541C	PortraitEntryGetter	{J}
0800579CTilemapWriter	Writes a tilemap	r0=destination	r1=tile table	r2=base tile	r3=flag for flipping	{J}
0808E75E	DrawHPNumbers	This routine draws the HP numbers to the minimug box. It handles displaying statuses, too. Warning: This routine is called every frame by another routine in order to keep displaying the OAM	{J}
085B8CDC	:085B8EEB	OAMTable	This is a table of size/shape	data and number of sprites to draw	{J}
0801631C	EquippableCheck:	returns 0 or 1 if a unit can equip and use an item checks for silenced units	{J}
08017254	UnusableItem	For when an item has ability 2, unusable set	{J}
08016198	StatBonusGetter	Gets the stat bonus pointer of an item returns 0 if none	{J}
0800382C	NumBufferWriter	{J}
08018EA4	AnotherHPBonus	Another getter for bonus hp added to max	{J}
030036E0	:03003CF3	OAMWriterOffset(OAMRoutineGetter)	{J}
030039BC	OAMWriter	{J}
030036E4	OAMBufferEnd	{J}
0808BC10	HPBarLeftEnd	{J}
0808DF38	HPBarMiddle	{J}
0808BC68	HPBarRightEnd	{J}
0800043C	TilemapWriter	This is an ARM routine. that draws a tilemap. For some reason, this isn't run from RAM	r0=destination	r1=tilemap	r2=base tile	{J}
0808E5CC	MMBPalSelect	Routine selects a palette and  writes it based on the unit's allegiance after ANDing the unit's number with 0xF0 you'll get 0x00, 0x40, 0x80 which are ally, npc, and enemy, respectively	{J}

08A930D8	:08A930F7	MMBAllyPalette	{J}
08A930F8	:08A93117	MMBEnemyPalette	{J}
08A93118	:08A93137	MMBNPCPal	{J}
080270E0	ChapterMapSpritePal	Map sprite palette routine Called to determine map sprite palettes  in chapter maps. World map uses a  different routine. Called whenever a map sprite changes state, i.e. moving, being selected. Used every frame in unit menu	RET=r0 0x0B-0x0F 0x0B is light rune 0x0C is blue 0x0D is red 0x0E is green 0x0F is gray	r0=character in ram	{J}
0802710C	CMSPAllegianceCheck	The Allegiance check is pretty much an extension of the above routine. You could call it to get the palette of a unit.	{J}

08027144	MSUnk1Start	The following routine comes directly after, andmore research is needed on it. It's called when a sprite is updated. i.e. moving or something	{J}
0203A4C4	UnkEntryPtr	{J}
0203A014	UnkOAMTablePtr	{J}

02002774	When in the item menu	{J}
0203E790	When viewing character list, help functions, armories	{J}
030000E8	When dialogue is displayed	{J}
02000920	Main Menu	{J}
02004BC4	Status screen	{J}
02013640	Supply	{J}
02017648	In battles	{J}
0203DB60	Link Arena	{J}
02000C60	Link Arena point assignment	{J}
0201F148	Sound Room	{J}
0203E7E4	Tutorial Text	{J}
0201AFC0	World Map menu	{J}

080B5110	Cleared Japanese menu loading routine	{J}

081B1878	:081B258C	Cleared beta class list	{J}
081B258C	:081D3910	Cleared FE6 credits	{J}
02022AA8	:02022CA7	start of OAM palette buffer
08048198	Name input event	{J}
08048280	Name input event	{U}


080000fc	intr_main	arm_func	{U}
08000304	Store160To80Structs	arm_func	{U}
080003a8	ARM_FillRect	arm_func	{U}
08000494	IRAMARM_CopyToSecondaryOAM	arm_func	{U}
08000534	IRAMARM_CopyToPrimaryOAM	arm_func	{U}
08000564	IRAMARM_Func3_DrawGlyph	arm_func	{U}
080006e4	IRAMARM_DecompText	arm_func	{U}
08000784	IRAMARM_Func5	arm_func	{U}
08000874	IRAMARM_FillMovementMap	arm_func		{U}
08000a20	AgbMain	{U}
08000b34	StoreIRQToIRAM	{U}
08000b74	DummyIRQRoutine	{U}
08000b78	SetIRQHandler	{U}
08000b88	NextRN	{U}
08000c34	LoadRNState	{U}
08000c4c	StoreRNState	{U}
08000c64	NextRN_100	{U}
08000c80	NextRN_N	{U}
08000ca0	Roll1RN	{U}
08000cb8	Roll2RN	{U}
08000cdc	SetOtherRNState	{U}
08000ce8	GetOtherRN	{U}
08000d34	SetGlobalClock	{U}
08000d40	IncrementGlobalClock	{U}
08000db8	CopyToPaletteBuffer	{U}
08000e9c	FlushLCDControl	{U}
08000f44	GetBackgroundControlBuffer	{U}
08000f8c	GetBackgroundTileDataOffset	{U}
08000fa4	GetTileIndex	{U}
08000fdc	SetBackgroundTileDataOffset	{U}
08001004	SetBackgroundMapDataOffset	{U}
0800104c	SetBackgroundScreenSize	{U}
08001094	FlushPalettesAdditive	{U}
080010f0	FlushPalettesSubstractive	{U}
0800114c	FlushBackgrounds	{U}
08001220	BG_Fill	{U}
08001240	RegisterBlankTile	{U}
08001258	SetInterrupt_LCDVBlank	{U}
080012ac	SetInterrupt_LCDVCountMatch	{U}
0800131c	SetLCDVCountSetting	{U}
08001328	SetMainUpdateRoutine	{U}
08001334	ExecMainUpdate	{U}
0800134c	_UpdateKeyStatus	{U}
080013e0	UpdateKeyStatus	{U}
08001420	ResetKeyStatus	{U}
08001440	SetKeyStatus_IgnoreMask	{U}
0800144c	GetKeyStatus_IgnoreMask	{U}
08001458	KeyStatusSetter_Set	{U}
08001470	NewKeyStatusSetter	{U}
0800148c	BG_SetPosition	{U}
08001b58	SetupBackgrounds	{U}
08001c4c	BG_GetMapBuffer	{U}
08001c68	ShouldSkipHSScreen	{U}
08001d28	UpdateHBlankHandlerState	{U}
08001dd8	SetPrimaryHBlankHandler	{U}
08001dec	SetSecondaryHBlankHandler	{U}
08001e00	GetBackgroundFromBufferPointer	{U}
08001e6c	BG_SetDepth	{U}
08001e8c	BG_GetDepth	{U}
08001ea0	SetSpecialColorEffectsParameters	{U}
08001f80	SetDefaultColorEffects	{U}
08001f94	EnablePaletteSync	{U}
08001fa0	DisablePaletteSync	{U}
08001fac	BG_EnableSyncByMask	{U}
08001fbc	BG_EnableSync	{U}
08001fe0	ClearTileRigistry	{U}
08002014	RegisterTileGraphics	{U}
08002054	RegisterFillTile	{U}
08002088	FlushTiles	{U}
080020fc	SetupOAMBufferSplice	{U}
08002138	FlushSecondaryOAM	{U}
0800217c	FlushPrimaryOAM	{U}
080021b0	WriteOAMRotScaleData	{U}
0800224c	GetPrimaryOAMSize	{U}
08002274	SomethingSoundRelated_8002274	{U}
080022ec	SomethingSoundRelated_80022EC	{U}
0800231c	SoundStuff_800231C	{U}
080023e0	SoundStuff_80023E0	{U}
08002730	ISuspectThisToBeMusicRelated_8002730	{U}
0800281c	Some6CMusicRelatedWaitCallback	{U}
08002858	Exec6CSomeWaitIfMusicOn	{U}
08002ab8	DeleteAll6CWaitMusicRelated	{U}
08002af8	StoreRoutinesToIRAM	{U}
08002ba4	CallARM_DecompText	{U}
08002bb8	CallARM_PushToSecondaryOAM	{U}
08002bcc	CallARM_PushToPrimaryOAM	{U}
08002be0	CallARM_Func5	{U}
08002bf4	CallARM_FillMovementMap	{U}
08002c08	Initialize6CEngine	{U}
08002c7c	New6C	{U}
08002ce0	NewBlocking6C	{U}
08002d10	Delete6CInternal	{U}
08002d6c	Delete6C	{U}
08002d84	Allocate6C	{U}
08002d94	Free6C	{U}
08002da4	InsertMain6C	{U}
08002dc8	InsertChild6C	{U}
08002de0	Isolate6C	{U}
08002e28	Exec6C_	{U}
08002e84	Exec6C	{U}
08002e94	Break6CLoop	{U}
08002e9c	Find6C	{U}
08002f24	Goto6CLabel	{U}
08002f5c	Goto6CPointer	{U}
08002f64	Set6CMark	{U}
08002f6c	Set6CDestructor	{U}
08002f70	ForAll6C	{U}
08002f98	ForEach6C	{U}
08002fec	BlockEach6CMarked	{U}
08003014	UnblockEach6CMarked	{U}
08003040	DeleteEach6CMarked	{U}
0800306c	Delete6C_	{U}
08003078	DeleteEach6C	{U}
08003088	Clear6CLoopWrapper	{U}
08003094	ClearCallbackAll6CMatch	{U}
080030a4	ForAllFollowing6C	{U}
080030e8	Call6C_00Delete	{U}
080030f4	Call6C_01Name	{U}
08003104	Call6C_02CallAndContinue	{U}
08003118	Call6C_16Call	{U}
08003130	Call6C_18CallWithArg	{U}
08003150	Call6C_14While	{U}
0800317c	Call6C_03SetLoop	{U}
0800318c	Call6C_04SetDestructor	{U}
080031a8	Call6C_05AddChild	{U}
080031c4	Call6C_06AddBlockingChild	{U}
080031e0	Call6C_07AddGlobal_BuggedMaybe	{U}
08003200	Call6C_08WhileExists	{U}
08003228	Call6C_09DeleteEach6C	{U}
08003244	Call6C_0AClearLoopForEach6C	{U}
08003260	Call6C_0BOr19Label	{U}
0800326c	Call6C_0DJump	{U}
0800327c	Call6C_0CGotoLabel	{U}
08003290	_6CSleepLoop	{U}
080032ac	Call6C_0ESleep	{U}
080032d4	Call6C_0FMark	{U}
080032e8	Call6C_13Blank	{U}
080032f4	Call6C_10Block	{U}
080032f8	Call6C_11DeleteIfDuplicate	{U}
08003338	Call6C_17DeleteOtherDuplicates	{U}
08003370	Call6C_15Blank	{U}
0800337c	Call6C_12SetBit4	{U}
08003394	Call6CCode	{U}
080033e0	ForEach6CDoNothing	{U}
08003450	Set6CLoop	{U}
0800346c	Find6C_	{U}
08003578	ResetIconGraphics_	{U}
08003584	ResetIconGraphics	{U}
080035bc	LoadIconPalettes	{U}
080035d4	LoadIconPalette	{U}
08003610	GetIconGfxTileIndex	{U}
08003624	GetIconGfxIndex	{U}
08003650	GetIconTileIndex	{U}
080036bc	DrawIcon	{U}
0800370c	ClearIconGfx	{U}
0800372c	LoadIconObjectGraphics	{U}
0800378c	SetupDebugFontForBG	{U}
08003804	PrintDebugStringToBG	{U}
080038c8	ClearSmallStringBuffer	{U}
0800391c	StoreNumberStringOrDashesToSmallBuffer	{U}
08003968	StoreNumberHexStringToSmallBuffer	{U}
080039d0	PrintStringToDBG	{U}
08003a3c	FlushDBGToBG2	{U}
08003b24	SetupDebugFontForOBJ	{U}
08003bb0	PrintDebugStringAsOBJ	{U}
08003c7c	GetSomeByte	{U}
08003c88	SetSomeByte	{U}
08003c94	Font_InitForUIDefault	{U}
08003cb8	Font_InitForUI	{U}
08003cf4	SetFontGlyphSet	{U}
08003d38	SetFont	{U}
08003d5c	Text_Init	{U}
08003d84	Text_Allocate	{U}
08003dac	InitTextBatch	{U}
08003e50	Text_GetXCursor	{U}
08003e54	Text_SetXCursor	{U}
08003e58	Text_Advance	{U}
08003e60	Text_SetColorId	{U}
08003e64	Text_GetColorId	{U}
08003e68	Text_SetParameters	{U}
08003e70	Text_Draw	{U}
08003ebc	Text_DrawBlank	{U}
08003edc	GetStringTextWidth	{U}
08003f3c	GetCharTextWidth	{U}
08003f90	GetStringTextCenteredPos	{U}
08003ff4	String_GetEnd	{U}
08004004	Text_AppendString	{U}
08004074	Text_AppendDecNumber	{U}
08004144	Text_AppendNumberOr2Dashes	{U}
08004180	Text_AppendChar	{U}
080041e8	GetVRAMPointerForTextMaybe	{U}
08004268	Font_SpecializedGlyphDrawer	{U}
08004428	Font_SetSomeSpecialDrawingRoutine	{U}
0800443c	DrawTextInline	{U}
08004480	Text_InsertString	{U}
080044a4	Text_InsertNumberOr2Dashes	{U}
080044c8	Text_AppendStringSimple	{U}
08004504	Text_AppendCharSimple	{U}
08004538	GetCharTextWidthSimple	{U}
08004568	GetStringTextWidthSimple	{U}
0800459c	InitSomeOtherGraphicsRelatedStruct	{U}
080045d8	Text_Init3	{U}
080046b4	Text_80046B4	{U}
080049ac	NewGreenTextColorManager	{U}
080049d0	EndGreenTextColorManager	{U}
08004b94	DrawDecNumber	{U}
08004e40	AIS_ExecAll	{U}
08004eb8	ClearAISArray	{U}
08004f48	AIS_New	{U}
08004fac	AISArray_Sort	{U}
08005004	AIS_Free	{U}
08005034	AIS_Display	{U}
08005040	HandleNextAISFrame	{U}
080051c0	LinkAIS	{U}
08005208	_AIS_Display	{U}
08005458	FlushIntermediateOAMBuffer	{U}
08005514	GetPortraitStructPointer	{U}
08005528	ResetFaces	{U}
08005544	SetupFaceGfxData	{U}
08005594	Load6CFACEGraphics	{U}
0800563c	NewFace	{U}
08005738	DeleteE_FACEByPointer	{U}
08005758	DeleteFaceByIndex	{U}
08005c24	ShouldPortraitBeSmol	{U}
08007c28	_Loop6CBlockingTimer	{U}
080089e8	Face6CExists	{U}
08008f18	GetZero	{U}
08009718	TCSWrapper_New	{U}
08009760	TCSWrapper_OnUpdate	{U}
0800978c	TCSWrapper_OnDelete	{U}
08009798	TCSWrapper_SetParameters	{U}
080097b4	TCSWrapper_Delete	{U}
080097c0	DeleteAllTCSWrappers	{U}
080097d0	DoesTCSWrapperExist	{U}
08009a00	Goto6CLabel12IfSomething	{U}
08009a60	Null6CCallback	{U}
08009a6c	Delete6CIfNotMarkedB	{U}
08009b88	GAMECTRL_MasterSwitch	{U}
08009de0	CallActualSaveMenu	{U}
08009edc	GetChapterIdTo6C	{U}
08009eec	SetChapterIdFrom6C	{U}
08009f08	NewGameControl	{U}
08009f40	GetGameControl6C	{U}
08009f50	SetNextGameActionId	{U}
08009f64	SetNextChapterId	{U}
08009f8c	RestartGameAndGoto8	{U}
08009fb0	RestartGameAndGoto12	{U}
08009fdc	ForceEnableSoundEffects	{U}
0800a1c8	SomethingRelatedToText	{U}
0800a240	GetStringFromIndex	{U}
0800a280	GetStringFromIndexInBuffer	{U}
0800a3b8	FilterSomeTextFromStandardBuffer	{U}
0800ba5c	SetSomeRealCamPos	{U}
0800baf8	TriggerMapChanges	{U}
0800bc1c	HideAllUnits	{U}
0800bc50	GetUnitStructFromEventParameter	{U}
0800bdcc	Event80_	{U}
0800bde8	Event81_	{U}
0800be2c	Event82_EndWM	{U}
0800be38	Event83_WM_SETCAM	{U}
0800be4c	Event84_WM_SETCAMONLOC	{U}
0800be8c	Event85_WM_SETCAMONSPRITE	{U}
0800bed4	Event86_WM_MOVECAM	{U}
0800bf38	Event87_	{U}
0800bfd8	Event88_	{U}
0800c084	Event89_	{U}
0800c0b8	Event8A_	{U}
0800c0c8	Event8B_	{U}
0800c0d4	Event8C_	{U}
0800c0f0	Event8D_	{U}
0800c108	Event8E_	{U}
0800c120	Event8F_	{U}
0800c138	Event90_WM_DRAWPATH	{U}
0800c164	Event91_WM_DRAWPATH_Silent	{U}
0800c198	Event92_REMOVEPATH	{U}
0800c1cc	Event93_	{U}
0800c1e8	Event94_	{U}
0800c204	Event95_	{U}
0800c254	Event96_	{U}
0800c2dc	Event97_	{U}
0800c36c	Event98_	{U}
0800c434	Event99_	{U}
0800c468	Event9A_	{U}
0800c4c8	Event9B_	{U}
0800c4e4	Event9C_	{U}
0800c528	Event9D_	{U}
0800c55c	Event9E_PUTSPRITE	{U}
0800c574	Event9F_	{U}
0800c58c	EventA0_REMSPRITE	{U}
0800c59c	EventA1_	{U}
0800c5ac	EventA2_	{U}
0800c5bc	EventA3_	{U}
0800c5f8	EventA4_	{U}
0800c634	EventA5_	{U}
0800c65c	EventA6_	{U}
0800c68c	EventA7_	{U}
0800c6c0	EventA8_	{U}
0800c754	EventA9_	{U}
0800c7b4	EventAA_	{U}
0800c7e4	EventAB_	{U}
0800c814	EventAC_	{U}
0800c85c	EventAD_	{U}
0800c884	EventAE_	{U}
0800c8b0	EventAF_	{U}
0800c8d4	EventB0_	{U}
0800c8f8	EventB1_	{U}
0800c924	EventB2_	{U}
0800c938	EventB3_	{U}
0800c950	EventB4_	{U}
0800c980	EventB5_	{U}
0800c9a0	EventB6_	{U}
0800c9f0	EventB7_	{U}
0800ca18	EventB8_	{U}
0800ca38	EventB9_	{U}
0800ca60	EventBA_	{U}
0800ca9c	EventBB_	{U}
0800cadc	EventBC_	{U}
0800cb48	EventBD_	{U}
0800cb70	EventBE_	{U}
0800cbac	EventBF_	{U}
0800cbd8	EventC0_	{U}
0800cbf0	EventC1_SKIPWM	{U}
0800cc04	EventC2_	{U}
0800cc18	EventC3_	{U}
0800cc5c	EventCE_	{U}
0800cc74	EventCF_	{U}
0800cc8c	EventC4_	{U}
0800ccf0	EventC5_	{U}
0800cd50	EventC6_	{U}
0800cd88	EventC7_	{U}
0800cda8	EventC8_	{U}
0800cdc8	EventC9_	{U}
0800cdec	__malloc_unlock	{U}
0800cdf0	EventCA_	{U}
0800cdf4	EventCB_	{U}
0800cdf8	EventCC_	{U}
0800ce28	EventCD_	{U}
0800ce40	_MarkSomethingInMenu	{U}
0800ce4c	EventEngine_Loop	{U}
0800cf5c	EventEngine_Destructor	{U}
0800d00c	EqueueEventEngineCall	{U}
0800d044	HandleNextEventEngineCall	{U}
0800d0b0	NewMapEventEngine	{U}
0800d140	NewBattleEventEngine	{U}
0800d198	MapEventEngineExists	{U}
0800d1b0	BattleEventEngineExists	{U}
0800d1c8	DeleteEventEngines	{U}
0800d2d0	CallSomeOtherEvents	{U}
0800d4b8	CheckEventId_	{U}
0800d528	SlotQueuePush	{U}
0800d544	SlotQueuePop	{U}
0800d588	SetEventCounter	{U}
0800d5a0	Event00_NULL	{U}
0800d5a4	Event01_End	{U}
0800d670	Event02_EvBitAndIdMod	{U}
0800d6e4	Event03_CheckEvBitOrId	{U}
0800d754	Event04_CheckRandom	{U}
0800d77c	Event05_SetSlot	{U}
0800d794	Event06_SlotOperation	{U}
0800d918	Event07_SlotQueueOperations	{U}
0800d97c	Event08_Label	{U}
0800d980	Event09_Goto	{U}
0800d9b8	Event0A_Call	{U}
0800da2c	Event0B_	{U}
0800da78	Event0C_Branch	{U}
0800db00	Event0D_AsmCall	{U}
0800db38	Event0E_STAL	{U}
0800dbe0	Event0F_	{U}
0800dc98	Event10_ModifyEvBit	{U}
0800dd58	Event11_SetIgnoredKeys	{U}
0800dd74	Event12_	{U}
0800ddb0	Event13_	{U}
0800de14	Event14_	{U}
0800de74	Event15_	{U}
0800ded4	Event16_	{U}
0800df20	Event17_	{U}
0800dfbc	Event18_	{U}
0800e070	Event19_	{U}
0800e188	Event1A_TEXTSTART	{U}
0800e3c8	Event1B_TEXTSHOW	{U}
0800e51c	Event1C_TEXTCONT	{U}
0800e560	Event1D_TEXTEND	{U}
0800e698	_WhileFace6CExists	{U}
0800e6b4	Event1E_	{U}
0800e77c	Event1F_	{U}
0800e7c4	Event20_	{U}
0800e8cc	Event21_	{U}
0800f0c8	Event22_	{U}
0800f124	Event23_	{U}
0800f150	Event24_	{U}
0800f17c	Event25_	{U}
0800f20c	Event26_CameraControlMaybe	{U}
0800f2d4	Event27_MapChange	{U}
0800f3ec	Event28_ChangeWeather	{U}
0800f3fc	Event29_SetFogVision	{U}
0800f42c	Event2A_MoveToChapter	{U}
0800f528	ShouldUNITBeLoaded	{U}
0800f704	LoadUnit_800F704	{U}
0800fb18	Event2B_	{U}
0800fb84	Event2C_LoadUnits	{U}
0800fc90	TryPrepareEventUnitMovement	{U}
0800fcd8	GetSomeEventEngineMoveRelatedBitfield	{U}
0800fd0c	Event2D_	{U}
0800fd28	Event2E_CheckAt	{U}
0800fd8c	Event2F_MoveUnit	{U}
0800ff24	Event30_ENUN	{U}
0800ff68	Event31_DisplayEffectRange	{U}
0800fff8	Event32_SpawnSingleUnit	{U}
08010110	Event33_CheckUnitVarious	{U}
08010298	Event34_MessWithUnitState	{U}
080104b0	Event35_UnitClassChanging	{U}
0801053c	Event36_CheckInArea	{U}
080105a4	Event37_GiveItem	{U}
08010618	Event38_ChangeActiveUnit	{U}
08010644	Event39_	{U}
080106e4	Event3A_	{U}
0801079c	Event3B_	{U}
08010850	Event3C_	{U}
080108ac	Event3D_	{U}
08010968	Event3E_PrepScreenCall	{U}
08010a58	Event3F_	{U}
08010b78	Event40_	{U}
08010bec	Event41_	{U}
08010c70	Event42_	{U}
08010cf0	Event43_	{U}
08010d28	Event44_	{U}
08010d5c	Event45_	{U}
08010f38	GetSomeLongPopupLength	{U}
0801106c	GenSomeLongPopupText	{U}
0801119c	LongPopup_PrepareGfx	{U}
08011210	LongPopup_PlaySound	{U}
08011254	IconOAMUpdater_Loop	{U}
08011270	LongPopup_Draw	{U}
080113c0	LongPopup_WaitForPress	{U}
080113f8	LongPopup_Clear	{U}
08011450	SetPopupUnit	{U}
0801145c	SetPopupItem	{U}
08011468	SetPopupNumber	{U}
08011474	NewPopupSimple	{U}
08011490	NewPopup	{U}
080114dc	NewGotItemPopup	{U}
08011524	ItemGot_DisplayLePopup	{U}
08011538	ItemGot_GotLeItem	{U}
08011554	NewItemGot	{U}
0801159c	NewGeneralItemGot	{U}
08011644	NewGoldGotPopup	{U}
080116e0	NewPopup_WeaponBroke	{U}
08011704	NewPopup_WRankIncrease	{U}
08012344	GetChapterAllyUnitCount	{U}
08012360	InitPlayerUnitPositionsForPrepScreen	{U}
0801263c	StoreUnitWordStructs	{U}
08012678	LoadUnitWordStructs	{U}
08012ec0	CopyString	{U}
08012edc	CopyDirect	{U}
08012f50	CopyDataWithPossibleUncomp	{U}
08012f90	FilterR0ForRawCopy	{U}
08012ff4	RegisterObjectTileGraphics	{U}
08013020	CopyTileGfxForObj	{U}
0801344c	GetPaletteBufferBuffer	{U}
08013470	SetSomethingInPaletteBB_2A	{U}
08013480	SetSomethingInPaletteBB_5A	{U}
08013494	SetSomethingInPaletteBB_8A	{U}
080134a8	GetSomethingInPaletteBB_2A	{U}
080134b4	GetSomethingInPaletteBB_5A	{U}
080134c4	GetSomethingInPaletteBB_8A	{U}
080134d4	ArchiveCurrentPalettes	{U}
08013520	ArchivePalette	{U}
08013550	WriteFadedPaletteFromArchive	{U}
08014068	ContinueUntilSomeTransistion6CExists	{U}
08014238	NewBlockingTimer	{U}
08014254	Timer6C_Countdown	{U}
08014334	String_FromNumber	{U}
08014480	DeleteAllPaletteAnimator	{U}
08014490	NewPaletteAnimator	{U}
080144e4	NewPaletteAnimator_	{U}
0801487c	FutureCall2_Loop	{U}
080148a0	FutureCall_Loop	{U}
080148c8	SetupFutureCall2	{U}
080148e4	SetupFutureCall	{U}
08014b00	RerangeSomething	{U}
08014b28	PlaySpacialSoundMaybe	{U}
080152a4	GeneralVBlankHandler	{U}
080152f4	SomeUpdateRoutine	{U}
08015360	AddSkipThread2	{U}
08015370	SubSkipThread2	{U}
08015380	GetThread2SkipStack	{U}
0801538c	SwitchPhases	{U}
080153d4	CallBeginningEvents	{U}
08015450	MakePhaseController6C	{U}
080154a4	NewPlayerPhase6C	{U}
080154f4	E_BMAPMAIN_SuspendGame	{U}
08015544	UndeployEveryone	{U}
08015588	GotoChapterWithoutSave	{U}
08015608	SetupBackgroundForWeatherMaybe	{U}
08015680	LoadObjUIGfx	{U}
080156f4	LoadGameCoreGfx	{U}
08015714	HandleCursorMovement	{U}
08015838	MoveCameraByStepMaybe	{U}
080159b8	GetSomeAdjustedCameraX	{U}
080159fc	GetSomeAdjustedCameraY	{U}
08015a98	DisplayCursor	{U}
08015bbc	SetCursorMapPosition	{U}
08015c1c	Init6C_GENS	{U}
08015cb0	Loop6C_GENS	{U}
08015d30	StoreAdjustedCameraPositions	{U}
08015e0c	EnsureCameraOntoPosition	{U}
08015e9c	ShouldMoveCameraPosSomething	{U}
08015fc8	GetCurrentMapMusicIndex	{U}
0801618c	GetItemSomeString	{U}
08016420	GetItemPowBonus	{U}
08016450	GetItemSklBonus	{U}
08016480	GetItemSpdBonus	{U}
080164b0	GetItemDefBonus	{U}
080164e0	GetItemResBonus	{U}
08016510	GetItemLckBonus	{U}
08016574	CanUnitUseAsWeapon	{U}
08016750	CanUnitUseWeapon	{U}
080167a4	CanUnitUseAsStaff	{U}
08016800	CanUnitUseStaff	{U}
08016848	DrawItemMenuCommand	{U}
080169a8	DrawTextAndIconForItem	{U}
08016aec	ValidateItem	{U}
08016b28	GetUnitEquippedWeapon	{U}
08016b58	GetUnitEquippedWeaponSlot	{U}
08016b8c	IsItemCoveringRange	{U}
08016bc0	EquipUnitItemByIndex	{U}
08016bec	IsWeaponEffective	{U}
08016c88	IsSlayerApplied	{U}
08016d5c	GetWeaponRankLevel	{U}
08016d94	GetWRankTextBuffer	{U}
08016df8	GetWRankText	{U}
08016e20	GetWTypeTextInStandardBuffer	{U}
08016e50	GetWRankBarData	{U}
08016ec8	IsItemDanceRing	{U}
08016ee4	IsItemUsable	{U}
08016f7c	CanUnitUse	{U}
08016fb8	GetItemHealAmount	{U}
0801702c	GetUnitItemSlot	{U}
08017054	IsItemStealable	{U}
08017080	IsItemHammernable	{U}
080170d4	GetWeaponRangeMask	{U}
080171e8	GetUnitRangeMask	{U}
0801723c	GetUnitStaffRangeMask_0	{U}
080172f8	GetUnitStaffRangeMask	{U}
0801737c	GetConvoyTotalGoldValue	{U}
080174ec	GetItemIndex	{U}
08017518	GetItemDescId	{U}
08017530	GetItemUseDescId	{U}
08017548	GetItemWType	{U}
0801756c	GetItemAttributes	{U}
08017584	GetItemUses	{U}
080175b0	GetItemMaxUses	{U}
080175dc	GetItemMight	{U}
080175f4	GetItemHit	{U}
0801760c	GetItemWeight	{U}
08017624	GetItemCrit	{U}
0801763c	GetItemCost	{U}
0801766c	GetItemMinRange	{U}
08017684	GetItemMaxRange	{U}
080176a0	GetItemRange	{U}
080176b8	GetItemWRank	{U}
080176d0	GetItemEffectivenessPtr	{U}
080176e8	GetItemStatBonusesPtr	{U}
08017700	GetItemIconId	{U}
08017724	GetItemWeaponEffect	{U}
0801773c	GetItemUseEffect	{U}
08017754	GetItemCostPerUse	{U}
0801776c	GetItemMaxCost	{U}
08017798	GetItemWExp	{U}
080177b0	GetROMItemStructPtr	{U}
080177c4	ClearUnits	{U}
080177f4	ClearUnitStruct	{U}
0801781c	CopyUnitStruct	{U}
08017838	GetNextFreeUnitStructPtr	{U}
08017870	GetNextFreePlayerUnitStruct	{U}
080178a8	GetUnitFogViewRange	{U}
080178d8	SetUnitNewStatus	{U}
080178f4	WriteUnitStatusDuration	{U}
08017904	GetUnitSMSIndex	{U}
08017948	UnitAddItem	{U}
0801796c	UnitClearInventory	{U}
08017984	RemoveUnitBlankItems	{U}
080179d8	GetUnitItemCount	{U}
080179f8	UnitHasItem	{U}
08017a34	LoadUnits	{U}
08017a8c	HasClassWRank	{U}
08017ac4	LoadUnit	{U}
08017d3c	StoreNewUnitFromCode	{U}
08017df8	CharFillInventoryFromCode	{U}
08017e34	LoadUnitStats	{U}
08017ebc	FixROMUnitStructPtr	{U}
08017ef4	LoadUnitSupports	{U}
08017f20	AutolevelUnitWeaponRanks	{U}
08017fc4	IncreaseUnitStatsByLevelCount	{U}
08018064	StoreUnitStats	{U}
08018120	AutolevelUnit	{U}
08018160	AutolevelRealistic	{U}
080181c8	CheckForStatCaps	{U}
0801829c	GetUnitByCharId	{U}
080182d8	GetNonAllyUnitStructById	{U}
0801831c	CanUnitRescue	{U}
0801834c	UnitRescue	{U}
08018370	UpdateRescuingData	{U}
080183c8	UpdateRescueData	{U}
08018430	HandleAllegianceChange	{U}
0801849c	ApplyUnitMovement	{U}
0801865c	SetupActiveUnit	{U}
080186d4	SetActiveUnit	{U}
08018740	MoveActiveUnit	{U}
0801895c	SetAllUnitNotBackSprite	{U}
08018994	ValidateUnitItem	{U}
080189b8	GetUnitAid	{U}
08018a1c	GetUnitMagBy2Range	{U}
08018a58	UnitHasMagicRank	{U}
08018b28	GetUnitUseFlags	{U}
08018bd8	CanUnitMove	{U}
08018c98	IsPosMagicSealed	{U}
08018d08	CanUnitNotUseMagic	{U}
08018d34	GetUnitLastItem	{U}
08018d4c	GetMovCostTablePtr	{U}
08018d90	GetClassStandingMapSpriteId	{U}
08018db0	UpdatePrevDeployStates	{U}
08018e30	LoadUnitPrepScreenPositions	{U}
08018f48	IsUnitSlotAvailable	{U}
080190b4	ClearCutsceneUnits	{U}
08019150	GetUnitCurrentHP	{U}
08019190	GetUnitMaxHP	{U}
080191b0	GetUnitPower	{U}
080191d0	GetUnitSkill	{U}
08019210	GetUnitSpeed	{U}
08019250	GetUnitDefense	{U}
08019270	GetUnitResistance	{U}
08019298	GetUnitLuck	{U}
080192b8	GetUnitPortraitId	{U}
080192f4	GetUnitMiniPortraitId	{U}
08019340	GetUnitLeader	{U}
08019368	SetUnitHP	{U}
080193a4	UnitTryHeal	{U}
080193e8	GetRescuingUnitNameId	{U}
08019414	WriteStatusTextToRAM	{U}
08019430	GetUnitStruct	{U}
08019444	GetROMClassStruct	{U}
08019464	GetROMCharStruct	{U}
08019484	UnitRemoveItem	{U}
0801949c	CanUnitCrossTerrain	{U}
080194bc	InitChapterMap	{U}
080197a4	SetupMapRowPointers	{U}
080197e4	ClearMapWith	{U}
080198ac	LoadChapterMap	{U}
0801990c	LoadChapterMapGfx	{U}
080199a4	FlushTilesFromBuffer	{U}
08019a64	FlushTerrainData	{U}
08019af4	GetSomeTerrainToChangeAtSomePosition	{U}
08019b18	UpdateGameTileGfx	{U}
08019c3c	UpdateGameTilesGraphics	{U}
08019fa0	UpdateUnitMapAndVision	{U}
0801a174	UpdateTrapFogVision	{U}
0801a1a0	UpdateTrapHiddenStates	{U}
0801a1f4	RefreshFogAndUnitMaps	{U}
0801a240	GetTerrainNameString	{U}
0801a258	GetTerrainHealAmount	{U}
0801a268	GetTerrainSomething	{U}
0801a2ec	RevertMapChangesById	{U}
0801a38c	FillMovementMapForUnit	{U}
0801a3cc	FillMovementMapForUnitAndMovement	{U}
0801a408	FillMovementMapForUnitPosition	{U}
0801a43c	FillMovementRangeMapSomehow	{U}
0801a46c	FillMovementMapSomehow	{U}
0801a49c	FillMovementMapForUnitAt	{U}
0801a4cc	StoreMovCostTable	{U}
0801a4ec	FillMovementMap	{U}
0801aabc	MapAddInRange	{U}
0801abc0	StoreR3ToMapSomething	{U}
0801acbc	FillMapAttackRangeForUnit	{U}
0801b460	FillRangeByRangeMask	{U}
0801b618	FillMapStaffRangeForUnit	{U}
0801b810	ApplyStuffToRangeMaps	{U}
0801b998	SetSubjectMap	{U}
0801b9a4	FillRangeMap	{U}
0801b9e4	GetCurrentMovCostTable	{U}
0801ba4c	Get8	{U}
0801ba58	Loop6C_WaitForSelectPress	{U}
0801bb40	DebugMenu_MapIdle	{U}
0801bb54	DebugMenu_MapEffect	{U}
0801bce4	DebugMapMenu_DisplayInfoDraw	{U}
0801bd58	DebugMapMenu_DisplayInfoIdle	{U}
0801bda0	DebugMapMenu_DisplayInfoEffect	{U}
0801bda4	DebugMenu_WeatherDraw	{U}
0801be28	DebugMenu_WeatherIdle	{U}
0801befc	DebugMenu_WeatherEffect	{U}
0801bf00	DebugMenu_ClearDraw	{U}
0801bf6c	DebugMenu_ClearIdle	{U}
0801c014	DebugMenu_ClearEffect	{U}
0801c018	DebugMenu_ErasedEffect	{U}
0801c090	DEBUGONLY_Startup	{U}
0801c3d4	DebugMenu_FogDraw	{U}
0801c448	DebugMenu_FogIdle	{U}
0801c4b0	DebugMenu_FogEffect	{U}
0801c4c0	DebugMenu_GNightEffect	{U}
0801c4d0	DebugChargeMenu_Draw	{U}
0801c588	DebugChargeMenu_Idle	{U}
0801c894	ClearActionAndSave	{U}
0801c8ac	HandlePlayerCursorMovement	{U}
0801c940	PlayerPhase_MainLoop	{U}
0801cb70	DisplayUnitEffectRange	{U}
0801cc7c	DisplayActiveUnitEffectRange	{U}
0801d084	_6CE_PLAYERPAHSE_PrepareAction	{U}
0801d244	TryMakeCantoUnit	{U}
0801d300	RunPotentialWaitEvents	{U}
0801d31c	EnsureCameraOntoActiveUnitPosition	{U}
0801d470	PlayerPhase_ApplyUnitMovement	{U}
0801d51c	GetUnitSelectionValueThing	{U}
0801d64c	PlayerPhase_WaitForUnitMovement	{U}
0801d70c	MakeMoveunitForActiveUnit	{U}
0801d75c	ClearActiveUnit	{U}
0801d89c	Load6CRangeDisplaySquareGfx	{U}
0801d8ec	Loop6C_MLVCHC	{U}
0801d92c	Setup6CRangeDisplayGfx	{U}
0801d9dc	Loop6C_MoveLimitView	{U}
0801da60	DestructMoveLimitView	{U}
0801da98	DisplayMoveRangeGraphics	{U}
0801dacc	HideMoveRangeGraphics	{U}
0801dba4	Goto3IfPhaseHasNoAbleUnits	{U}
0801dbd4	GetSomeFacingDirection	{U}
0801dc00	Make6CMOVEUNITForUnitBeingRescued	{U}
0801dc3c	Loop6C_KOIDO	{U}
0801dc7c	Make6CKOIDO	{U}
0801dcd0	Make6CKOIDOAMM	{U}
0801dda8	Destruct6CBMXFADE	{U}
0801ddc4	NewBMXFADE	{U}
0801ddf0	MakeNew6CBMXFADE2	{U}
0801de18	DoesBMXFADEExist	{U}
0801de30	GetPlayerStartCursorPosition	{U}
0801de88	GetEnemyStartCursorPosition	{U}
0801df64	ADJUSTFROMXI_MoveCameraOnSomeUnit	{U}
0801e098	HandleNewItemGetFromDrop	{U}
0801e138	SendToConvoyMenu_Draw	{U}
0801e144	MenuCommand_DrawExtraItem	{U}
0801e188	SendToConvoyMenu_NormalEffect	{U}
0801e34c	FillWarpRangeMap	{U}
0801f50c	ChangeActiveUnitFacing	{U}
080225f8	CommandEffectEndPlayerPhase	{U}
080226e4	Make6CE_Guide	{U}
08022738	EffectWait	{U}
08022748	GenericSelection_BackToUM	{U}
0802282c	GenericSelection_BackToUM_CamWait	{U}
080228a4	RescueUsability	{U}
080228dc	RescueEffect	{U}
080228fc	RescueSelection_OnSelect	{U}
08022910	DropUsability	{U}
08022948	DropEffect	{U}
08022968	DropSelection_OnSelect	{U}
0802298c	TakeUsability	{U}
080229d4	TakeEffect	{U}
080229f4	GiveUsability	{U}
08022a3c	GiveEffect	{U}
08022a5c	MakeUnitRescueTransferGraphics	{U}
08022a90	TakeSelection_OnSelect	{U}
08022ae0	GiveSelection_OnSelect	{U}
08022c30	DisplayUnitStandingAttackRange	{U}
08022c98	HideMoveRangeGraphicsWrapper	{U}
080232e8	ItemCommandEffect	{U}
08023350	ItemSelectMenu_TextDraw	{U}
080233d8	ItemSelectMenu_Usability	{U}
08023428	ItemSelectMenu_Effect	{U}
080239cc	FillBallistaRange	{U}
08023a54	StaffCommandUsability	{U}
08023acc	StaffCommandEffect	{U}
08023b90	StaffItemSelect_Usability	{U}
08023bc8	StaffItemSelect_Effect	{U}
08023c08	StaffItemSelect_TextDraw	{U}
08023c14	StaffItemSelect_OnHover	{U}
08023e7c	PickCommandUsability	{U}
08023f64	SupplyUsability	{U}
0802418c	StealCommandUsability	{U}
080241dc	StealCommandEffect	{U}
0802421c	StealTargetSelection_OnInit	{U}
08024304	StealItemMenuCommand_Usability	{U}
08024348	StealItemMenuCommand_Draw	{U}
0802439c	StealItemMenuCommand_Effect	{U}
0802467c	RescueSelection_OnConstruction	{U}
0802469c	RescueSelection_OnChange	{U}
080246c0	DropSelection_OnConstruction	{U}
08024768	TradeTargetSelection_OnInit	{U}
080248c4	RideCommandUsability	{U}
08024920	RideCommandEffect	{U}
080249ac	AttackCommandUsability	{U}
08024a28	AttackBallistaCommandUsability	{U}
08024cec	GetPhaseAbleUnitCount	{U}
08024d8c	AreUnitsAllied	{U}
08024da4	IsSameAllegience	{U}
08024dbc	GetCurrentPhase	{U}
08024dd0	IsNotEnemyPhaseMaybe	{U}
08024de8	GetPartyGoldAmount	{U}
08024e04	SetPartyGoldAmount	{U}
08024eac	ForEachUnitInRange	{U}
08024f18	ForEachPosInRange	{U}
08024f70	ForEachAdjacentUnit	{U}
08024fa4	ForEachAdjacentPosition	{U}
08025038	ForEachPosIn12Range	{U}
0802506c	ForEachUnitInMagBy2Range	{U}
080250bc	TryAddTrapsToTargetList	{U}
0802517c	AddUnitToTargetListIfNotAllied	{U}
080251b4	MakeTargetListForWeapon	{U}
0802521c	TryAddUnitToTradeTargetList	{U}
080252d0	MakeTradeTargetList	{U}
08025344	TryAddUnitToRescueTargetList	{U}
080253b4	MakeRescueTargetList	{U}
080253e8	TryAddToDropTargetList	{U}
08025440	MakeDropTargetList	{U}
08025474	TryAddRescuedUnitToTakeTargetList	{U}
080254e0	MakeTakeTargetList	{U}
08025644	MakeTargetListForSupport	{U}
080256f0	AddUnitToTargetListIfAllied	{U}
08025728	FillBallistaRangeMaybe	{U}
08025794	TryAddClosedDoorToTargetList	{U}
080257d4	TryAddBridgeToTargetList	{U}
08025814	MakeTargetListForDoorAndBridges	{U}
08025c00	MakeTargetListForSteal	{U}
08025e28	TryAddUnitToHealTargetList	{U}
08025e7c	MakeTargetListForAdjacentHeal	{U}
08025eb0	MakeTargetListForRangedHeal	{U}
08025efc	AddToTargetListIfNotAllied	{U}
08025f44	MakeTargetListForFuckingNightmare	{U}
08025f98	TryAddUnitToRestoreTargetList	{U}
08025fe8	MakeTargetListForRestore	{U}
0802601c	TryAddUnitToBarrierTargetList	{U}
0802606c	MakeTargetListForBarrier	{U}
080260a0	TryAddUnitToRescueStaffTargetList	{U}
080260d8	MakeTargetListForRescueStaff	{U}
08026100	TryAddUnitToSilenceTargetList	{U}
0802614c	TryAddUnitToSleepTargetList	{U}
08026198	TryAddUnitToBerzerkTargetList	{U}
080261e4	MakeTargetListForSilence	{U}
0802620c	MakeTargetListForSleep	{U}
08026234	MakeTargetListForBerserk	{U}
0802625c	TryAddUnitToWarpTargetList	{U}
08026294	MakeTargetListForWarp	{U}
080262c8	MakeTargetListForUnlock	{U}
080262fc	TryAddUnitToHammerneTargetList	{U}
08026354	MakeTargetListForHammerne	{U}
08026388	MakeTargetListForLatona	{U}
080264f0	MakeTargetListForMine	{U}
08026580	MakeTargetListForLightRune	{U}
080265b4	TryAddUnitToDanceRingTargetList	{U}
080265e4	MakeTargetListForDanceRing	{U}
08026628	SetupMapSpritesPalettes	{U}
08026688	SMS_ClearUsageTable	{U}
080266f0	SMS_80266F0	{U}
0802677c	SMS_SomethingGmapUnit	{U}
080267fc	SMS_RegisterUsage	{U}
080268c8	SomethingSMS_16x16_0	{U}
0802695c	SomethingSMS_16x16	{U}
08026a38	SomethingSMS_16x32	{U}
08026b28	SomethingSMS_32x32	{U}
08026f2c	SMS_FlushDirect	{U}
08026f94	SMS_FlushIndirect	{U}
0802713c	GetUnitSpritePaletteIndexWrapper	{U}
08027168	GetUnitMapSpritePaletteIndex	{U}
080271a0	SMS_UpdateFromGameData	{U}
0802736c	SMS_GetNewInfoStruct	{U}
080273a4	SMS_DisplayAllFromInfoStructs	{U}
08027530	DisplayChapterTileMarker	{U}
080275e8	DisplayUnitAdditionalBlinkingIcons	{U}
08027f28	SMS_DisplayOne	{U}
0802810c	HideUnitSMS	{U}
08028130	ShowUnitSMS	{U}
08028144	GetUnitStandingSpriteDataFlagThing	{U}
080281c8	GetROMUnitSupportCount	{U}
080281dc	GetROMUnitSupportingId	{U}
080281f4	GetUnitSupportingUnit	{U}
0802823c	GetSupportLevelBySupportIndex	{U}
08028264	GetUnitTotalSupportLevels	{U}
08028290	AddSupportPoints	{U}
08028310	CanUnitSupportCommandWith	{U}
0802838c	GetUnitStartingSupportValue	{U}
080283a8	GetSupportDataIdForOtherUnit	{U}
08028434	HandleSupportGains	{U}
0802852c	GetSupportBonusEntryPtr	{U}
08028550	StoreAddedAffinityBonusesForSupportLevel	{U}
080285b0	GetUnitSupportBonuses	{U}
0802878c	CanUnitsStillSupportThisChapter	{U}
08028870	CanUnitUseItem	{U}
08028e60	ItemEffect_Call	{U}
08029068	IsGeneratedTargetListEmpty	{U}
0802907c	CanUseHealingItem	{U}
080290a0	CanUsePureWater	{U}
080290b8	CanUseTorch	{U}
080290e4	CanUseAntidote	{U}
080290fc	CanUseChestKey	{U}
08029138	CanUseDoorKey	{U}
0802914c	CanOpenBridge	{U}
08029160	CanUseLockpick	{U}
080291a8	CanUsePromotionItem	{U}
0802940c	CanUseStatBooster	{U}
08029504	CanUseJunaFruit	{U}
0802951c	EndItemEffectSelectionThing	{U}
08029550	GenericStaffSelection_OnSelect	{U}
08029568	PrepareTargetSelectionForRescueStaff	{U}
080295a8	SetupTargetSelectionForGenericStaff	{U}
080295e8	WarpTargetPosSelect_Init	{U}
0802969c	WarpTargetPosSelect_Loop	{U}
080297d0	WarpTargetPosSelect_Confirm	{U}
0802980c	WarpTargetPosSelect_Cancel	{U}
08029840	WarpTargetPosSelect_Destruct	{U}
08029854	WarpTargetSelection_OnSelect	{U}
0802987c	SetupWarpTargetSelection	{U}
080298f0	PrepareTargetSelectionForMineAndLightRune	{U}
08029944	HammerneTargetSelection_OnSelect	{U}
080299b8	SetupHammerneUseSelection	{U}
08029a08	HammerneTargetSelection_OnChange	{U}
08029a2c	HammerneTargetSelection_OnInit	{U}
08029b8c	PrepareTargetSelectionForHeal	{U}
08029bc8	PrepareTargetSelectionForRestoreStaff	{U}
08029ca0	PrepareTargetSelectionForOffensiveStaff	{U}
08029d28	GenericSelection_DeleteBBAndBG	{U}
08029d98	TorchTargetPosSelect_Init	{U}
08029df0	TorchTargetSelection_Loop	{U}
08029ed8	NewTorchStaffSelection	{U}
08029f00	CanUnitUseItemPrepScreen	{U}
0802a2f4	BATTLE_SaveFromBattle	{U}
0802a400	SetupBattleStructFromUnitAndWeapon	{U}
0802a52c	RollRNIfBattleStarted	{U}
0802a558	Roll2RNIfBattleStarted	{U}
0802a584	CopyUnitToBattleStruct	{U}
0802a668	CopyUnitToBattleStructRawStats	{U}
0802a6a0	WriteBattleStructTerrainBonuses	{U}
0802a6dc	BattleSetupTerrainData	{U}
0802a730	SetupBattleWeaponData	{U}
0802a918	SetupBattleBallistaWeaponData	{U}
0802a95c	FillPreBattleStats	{U}
0802a9a8	FillBattleStats	{U}
0802a9d0	BattleApplyMiscBonuses	{U}
0802aa44	BattleLoadDefense	{U}
0802aaa4	LoadRawDefense	{U}
0802aabc	BattleLoadAttack	{U}
0802ab74	BattleLoadAS	{U}
0802abac	BattleLoadHit	{U}
0802abe4	BattleLoadAvoid	{U}
0802ac18	BattleLoadCrit	{U}
0802ac54	BattleLoadDodge	{U}
0802ac60	ComputeHit	{U}
0802ac90	ComputeCrit	{U}
0802acf8	ComputeLethalityChance	{U}
0802ad54	BattleApplySRankBonuses	{U}
0802ad90	BattleComputeBuffStatus	{U}
0802adcc	ComputeSpecialWeapons	{U}
0802ae90	ClearRounds	{U}
0802aed0	MakeBattle	{U}
0802af7c	GetBattleUnitPointers	{U}
0802af90	BattleCheckDoubling	{U}
0802b018	MakeBattleRound	{U}
0802b080	GetBattleHitCount	{U}
0802b094	BattleCheckBrave	{U}
0802b0cc	CheckForTriangleAttack	{U}
0802b1c4	UpdateBattleStats	{U}
0802b1f4	RollForSureShot	{U}
0802b278	RollForPierce	{U}
0802b2e8	RollForGreatShield	{U}
0802b38c	RollForLethality	{U}
0802b3d0	NullifyBattleDamageIfUsingStone	{U}
0802b3ec	GenerateCurrentRoundData	{U}
0802b578	UpdateBattleTriangleAttackData	{U}
0802b600	CurrentRound_ComputeWeaponEffects	{U}
0802b83c	MakeNextBattleHitRound	{U}
0802b9a0	GetStatIncrease	{U}
0802b9c4	GetAutoleveledStat	{U}
0802b9f4	CanUnitNotLevelUp	{U}
0802ba28	CheckForLevelUp	{U}
0802bf24	CheckForLevelUpCaps	{U}
0802c028	SaveUnitsFromBattle	{U}
0802c0b4	GetBattleNewWExp	{U}
0802c1b0	BattleUnit_DidWRankGoUp	{U}
0802c1ec	SaveUnitFromBattle	{U}
0802c300	UpdateBallistaUsesFromBattle	{U}
0802c334	NullSomeStuff	{U}
0802c5b8	HandleSomeExp	{U}
0802c638	GetBattleUnitStaffExp	{U}
0802c6a0	InstigatorAdd10Exp	{U}
0802c76c	BattleReverseWTriangeEffect	{U}
0802c7c0	BattleApplyWeaponTriangle	{U}
0802c844	DoSomeBattleWeaponStuff	{U}
0802c8c4	MakeSnagBattleTarget	{U}
0802c948	FillSnagBattleStats	{U}
0802c984	SaveSnagWallFromBattle	{U}
0802ca14	BeginBattleAnimations	{U}
0802cc1c	SaveInstigatorFromBattle	{U}
0802ccdc	GetStaffAccuracy	{U}
0802ce88	IsCurrentBattleTriangleAttack	{U}
0802ce9c	DidWeaponBreak	{U}
0802cec8	CurrentRound_ComputeDamage	{U}
0802e1c8	ResetTraps	{U}
0802e1f0	GetTrapAt	{U}
0802e24c	GetSpecificTrapAt	{U}
0802e2b8	AddTrap	{U}
0802e2e0	AddTrapExt	{U}
0802e2fc	RemoveTrap	{U}
0802e314	AddFireTrap	{U}
0802e330	AddGasTrap	{U}
0802e350	AddArrowTrap	{U}
0802e388	AddTrap8	{U}
0802e398	AddTrap9	{U}
0802e3a8	AddSnagsAndWalls	{U}
0802e430	ApplyTrapMapChanges	{U}
0802e470	UpdateAllLightRunes	{U}
0802e4ac	GetTrapExt1At	{U}
0802e4f4	GetMapChangesPointerById	{U}
0802e530	GetMapChangesIdAt	{U}
0802e58c	ApplyMapChangesById	{U}
0802e5f8	AddMapChange	{U}
0802e60c	UntriggerMapChange	{U}
0802e638	AreMapChangeTriggered	{U}
0802e660	HideIfUnderRoof	{U}
0802e6f0	AddToTargetListFromPos	{U}
0802e710	AddArrowTrapTargetsToTargetList	{U}
0802e83c	MakeTargetListForTurnTrapDamage	{U}
0802e9a8	CountDownTraps	{U}
0802e9d0	ResetCounterForCountedDownTraps	{U}
0802ea58	AddLightRune	{U}
0802ea90	RemoveLightRune	{U}
0802eac0	HandleTrapDecay	{U}
0802eb10	BattleSomethingTrapChangeTerrain	{U}
0802eb50	NullAllLightRunesTerrain	{U}
0802eb8c	GetTrap	{U}
0802eb98	ExecStandardHeal	{U}
0802ec20	ExecRestore	{U}
0802ecd0	GetRescueStaffeePosition	{U}
0802eef8	ExecRescueStaff	{U}
0802efac	ExecWarpStaff	{U}
0802f010	ExecStatusStaff	{U}
0802f154	ExecFortify	{U}
0802f2b4	ExecHammerne	{U}
0802f380	ExecSomeSelfHeal	{U}
0802fb88	ExecTorchStaff	{U}
0802fc48	ActionStaffDoorChestUseItem	{U}
0802ffb4	ActionPick	{U}
080300f4	SetupGameVBlank6C_TileAnimations	{U}
08030138	GameVBlank6C_Destructor	{U}
08030144	GameVBlank6C_Loop	{U}
08030150	SetupGameVBlank6C	{U}
08030184	BlockGameGraphicsLogic	{U}
080301b8	UnblockGameGraphicsLogic	{U}
080301f4	SetupOAMSpliceForWeather	{U}
08030b34	SetupWeatherGraphics_Maybe	{U}
08030ba4	UpdateWeatherGraphics	{U}
08030c7c	SetupWeather	{U}
08030c94	GetTextSpeed	{U}
08030dd8	ResetGameState	{U}
08030e04	SetupChapter	{U}
08031178	LoadGameCoreGfx2	{U}
080311bc	MakeBMAPMAIN	{U}
080314e4	GetTacticianNameStringPtr	{U}
08031500	GetConvoyItemArray	{U}
08031508	ClearConvoyItems	{U}
0803152c	ShrinkConvoyItemList	{U}
08031570	GetConvoyItemCount	{U}
08031594	AddItemToConvoy	{U}
080315e4	GetConvoyItemSlot	{U}
0803161c	HasConvoyAccess	{U}
080316c4	InitUnitStack	{U}
080316e0	PushUnit	{U}
08031714	LoadPlayerUnitsFromUnitStack	{U}
08031754	LoadPlayerUnitsFromUnitStack2	{U}
08031794	PrepareArenaStruct	{U}
08031874	PrepareArena	{U}
08031890	PrepareArena2	{U}
080318e0	GetClassBestWRankType	{U}
080319d8	IsWeaponMagic	{U}
080319f8	GetNearLevel	{U}
08031a14	GetUnitArenaWeight	{U}
08031a84	LoadArenaOpponentStruct	{U}
08031c10	PrepareBalancedArenaFight	{U}
08031d58	AdjustArenaOpponentPower	{U}
08031fec	StoreRNStateToActionStruct	{U}
08031ffc	LoadRNStateFromActionStruct	{U}
0803200c	ApplyUnitAction	{U}
08032164	ActionRescue	{U}
080321e0	ActionDrop	{U}
08032270	ActionVisitAndSieze	{U}
0803229c	ActionCombat	{U}
08032344	ActionArena	{U}
08032358	ActionDance	{U}
080323a8	ActionTalk	{U}
080323d4	ActionSupport	{U}
0803247c	ActionSteal	{U}
08032554	ActionSummon	{U}
08032580	ActionSummonDK	{U}
08032774	BATTLE_GOTO1_IfNobodyIsDead	{U}
080327b4	DidUnitDie	{U}
080327c8	BATTLE_ProbablyMakesTheDeadUnitDissapear	{U}
08032860	BATTLE_DeleteLinkedMOVEUNIT	{U}
080328d0	BATTLE_HandleItemDrop	{U}
08033258	GetPlayerLeaderUnitId	{U}
0803374c	CanCharacterBePrepMoved	{U}
08033870	InitPrepScreenUnitsAndCamera	{U}
08033c10	SALLYCURSOR6C_StartUnitSwap	{U}
08033ed4	CallCursorShop	{U}
08034214	ShrinkPlayerUnits	{U}
08034314	CanUnitUseVisit	{U}
080343a8	CanUnitUseSeize	{U}
08034428	CanUnitUseAttack	{U}
08034470	CanActiveUnitUseRescue	{U}
0803448c	CanActiveUnitUseTrade	{U}
080344a8	GetUnitCommandUseFlags	{U}
08034684	GetChapterMapChangesPointer	{U}
080346b0	GetChapterEventDataPointer	{U}
08034704	GetSomethingRelatedToCurrentDifficulty	{U}
080347a8	NewUnitInfoWindow	{U}
080347d4	UnitInfoWindow_PositionUnitName	{U}
0803483c	UnitInfoWindow_DrawBase	{U}
080349d4	GetUnitInfoWindowX	{U}
08034c18	NewUnitInfoWindow_WithAllLines	{U}
08034e5c	DrawHammerneUnitInfoWindow	{U}
08035204	SetupUnitRescueWindow	{U}
08035708	NewBottomHelpText	{U}
08035748	DeleteEach6CBB	{U}
08036594	BattleForecase_SetupLabelText	{U}
0803666c	AddWeaponStatsAfterRound	{U}
080366a0	BKSEL_SetupHitAndSuchStats	{U}
08036d9c	BKSEL_InitGfx	{U}
08036e1c	BKSEL_Destructor	{U}
080372d4	MapEventEngineExists_	{U}
0803730c	NewBattleForecast	{U}
080375e8	GetPickTrapType	{U}
08037660	ExecTrap	{U}
08037744	HandlePostActionTraps	{U}
08037840	LoadTrapData	{U}
08037910	LoadChapterBallistae	{U}
08037928	AddGorgonEggTrap	{U}
0803798c	GetBallistaItemAt	{U}
080379d4	GetSomeBallistaItemAt	{U}
08037a04	AddBallista	{U}
08037a34	RideBallista	{U}
08037a6c	TryRemoveUnitFromBallista	{U}
08037aa8	IsBallista	{U}
08037b10	GetBallistaItemUses	{U}
08037b44	GetCurrentPromotedLevelBonus	{U}
08037b64	CanUnitSeize	{U}
08038208	PushGlobalTimer	{U}
0803821c	PopGlobalTimer	{U}
08039788	Loop6C_E_CPORDER	{U}
080399b0	GetCurrentPhaseUnitCount	{U}
08039abc	CPORDER_End	{U}
08039b00	Call6C_E_CPDECIDE	{U}
08039c00	ClearSomeAIRelatedStruct	{U}
0803a07c	ApplyAICombat2	{U}
0803a308	ApplyAICombat	{U}
0803a358	ApplyAIDKSummonAction	{U}
0803a390	ApplyAIPickAction	{U}
0803a4e4	PrepareAIAction	{U}
0803b558	FillMovementAndRangeMapForItem	{U}
0803c064	SetupUnitInventoryAIFlags	{U}
0803c120	SetupUnitStatusStaffAIFlags	{U}
0803c168	SetupUnitHealStaffAIFlags	{U}
0803c1b4	SaveNumberOfAlliedUnitsIn0To8Range	{U}
0803c258	CharStoreAI	{U}
0803e640	UpdateAllPhaseHealingAIStatus	{U}
0803e698	UpdateUnitHealingAIStatus	{U}
0803e878	GetEscapePointStructThingMaybe	{U}
0803ec98	StoreItemAndGetUnitAttack	{U}
08042e98	CheckSomethingSomewhere	{U}
080450ac	NameSelect_DrawName	{U}
08045c14	New6C_SIOMAIN2	{U}
0804e078	LoadOldUIPal	{U}
0804e0a8	LoadNewUIPal	{U}
0804e0d8	LoadOldUIImage	{U}
0804e108	LoadNewUIImage	{U}
0804e1bc	WriteUIWindowTileMap	{U}
0804e314	ClearTileMapRect	{U}
0804e368	MakeUIWindowTileMap_BG0BG1	{U}
0804eb54	LoadOldUIGfx	{U}
0804eb98	NewMenu_DefaultAdjusted	{U}
0804ebc8	NewMenu_DefaultChild	{U}
0804ebe4	NewMenu_Default	{U}
0804ec34	NewMenu_804EC34	{U}
0804ec98	NewMenu_BG0BG1	{U}
0804ecb0	NewMenu	{U}
0804eea8	EndMenu	{U}
0804ef20	EndAllMenus	{U}
0804ef38	Menu_CallDefinedConstructors	{U}
0804ef70	Menu_Draw	{U}
0804f0e0	Menu_DrawHoverThing	{U}
0804f164	Menu_Idle	{U}
0804f294	Menu_HandleDirectionInputs	{U}
0804f374	Menu_HandleSelectInputs	{U}
0804f400	Menu_GetCursorGfxCurrentPosition	{U}
0804f448	MenuCommand_UsabilityAlways	{U}
0804f44c	UsabilityGrayed	{U}
0804f450	UsabilityNever	{U}
0804f580	Menu_CallTextBox	{U}
0804f60c	MarkSomethingInMenu	{U}
0804f64c	NewMenu_AndDoSomethingCommands	{U}
0804f6a4	Menu_UpdateMovingCursorGfxPosition	{U}
0804f6f8	ClearMenuRelatedList	{U}
0804f8a4	InitTargets	{U}
0804f8bc	AddTarget	{U}
0804f910	LinkTargets	{U}
0804f958	TargetSelection_GetRealCursorPosition	{U}
0804f96c	TargetSelection_Loop	{U}
0804fa3c	NewTargetSelection	{U}
0804faa4	NewTargetSelection_Specialized	{U}
0804fab8	EndTargetSelection	{U}
0804faec	TargetSelection_HandleMoveInput	{U}
0804fb64	TargetSelection_HandleSelectInput	{U}
0804fbfc	GetFarthestTargetIndex	{U}
0804fc5c	LinkTargetsOrdered	{U}
0804fd00	GetLinkedTargetList	{U}
0804fd10	GetFirstTargetPointer	{U}
0804fd34	GetTarget	{U}
0804fd60	NewEkrBattleDeamon	{U}
0804fd8c	EndEkrBattleDeamon	{U}
0804fda0	IsBattleDeamonActive	{U}
0804fdbc	ekrBattleDeamon_Destructor	{U}
0804fdd4	NewEkrBattle	{U}
0804fe40	InBattleMainRoutine	{U}
0804fee4	MainUpdate_804FEE4	{U}
0804ff64	ekrBattle_Init	{U}
08050000	ekrBattle_8050000	{U}
08050054	ekrBattle_8050054	{U}
080500f0	ekrBattle_80500F0	{U}
08050134	ekrBattle_8050134	{U}
08050158	ekrBattle_8050158	{U}
08050174	ekrBattle_8050174	{U}
08050224	ekrBattle_8050224	{U}
08050244	ekrBattle_8050244	{U}
08050290	ekrBattle_8050290	{U}
080502b0	ekrBattle_80502B0	{U}
08050304	ekrBattle_8050304	{U}
08050338	ekrBattle_8050338	{U}
08050360	ekrBattle_8050360	{U}
080503ec	ekrBattle_80503EC	{U}
08050400	ekrBattle_8050400	{U}
08050440	ekrBattle_8050440	{U}
0805046c	ekrBattle_805046C	{U}
080505ec	ekrBattle_80505EC	{U}
08050600	ekrBattle_8050600	{U}
08050684	ekrBattle_8050684	{U}
080506c8	ekrBattle_80506C8	{U}
080508f0	ekrBattle_80508F0	{U}
08050940	ekrBattle_8050940	{U}
080509a8	ekrBattle_80509A8	{U}
08050a84	ekrBattle_8050A84	{U}
08050ab8	ekrBattle_8050AB8	{U}
08050b08	ekrBattle_8050B08	{U}
08050c34	ekrBattle_CheckForLevelup_8050C34	{U}
08050c6c	ekrBattle_WaitForLevelup_8050C6C	{U}
08050c90	ekrBattle_MakePopups	{U}
08050ca8	ekrBattle_WaitForPopup	{U}
08050ccc	ekrBattle_8050CCC	{U}
08050cf8	ekrBattle_8050CF8	{U}
08050d88	ekrBattle_8050D88	{U}
08050da8	ekrBattle_8050DA8	{U}
08050de4	NewEkrLvlupFan	{U}
08050ef8	NewEkrGauge	{U}
0805116c	EndEkrGauge	{U}
08051180	EkrGauge_8051180	{U}
08051190	EkrGauge_8051190	{U}
080511a0	EkrGauge_80511A0	{U}
080511b0	EkrGauge_80511B0	{U}
080511c0	EkrGauge_80511C0	{U}
080511d0	EkrGauge_80511D0	{U}
080511e4	EkrGauge_80511E4	{U}
080511f8	EkrGauge_80511F8	{U}
08051208	EkrGauge_8051208	{U}
08051218	EkrGauge_8051218	{U}
08051228	EkrGauge_8051228	{U}
08051284	ekrGauge_Loop	{U}
08051ac4	NewEkrDispUP	{U}
08051b48	EkrDispUP_8051B48	{U}
08051bb0	ekrDispUP_Loop	{U}
08053f10	StartSpellBG_FLASH	{U}
08054a1c	NewEfxStatusUnit	{U}
08054b54	DeleteEach6C_efxStatusUnit	{U}
08054fa8	NewEfxSpellCast	{U}
08055160	SetSomethingSpellFxToTrue	{U}
0805516c	SetSomethingSpellFxToFalse	{U}
08055178	ClearBG1Setup	{U}
08055188	ClearBG1	{U}
08055278	ThisMakesTheHPInSpellAnimGoAway	{U}
080557d8	SomeImageStoringRoutine_SpellAnim	{U}
08055800	SomePaletteStoringRoutine_SpellAnim	{U}
0805581c	SomeImageStoringRoutine_SpellAnim2	{U}
08055844	SomePaletteStoringRoutine_SpellAnim2	{U}
0805598c	GetAnimationStartFrameMaybe	{U}
08055bd4	BeginAnimsOnBattleAnimations	{U}
08055c68	MainUpdate_8055C68	{U}
08055cdc	NewEkrBattleStarting	{U}
08055cf0	ekrBattleStarting_8055CF0	{U}
08055df4	ekrBattleStarting_8055DF4	{U}
08055f00	ekrBattleStarting_8055F00	{U}
08055fa0	ekrBattleStarting_8055FA0	{U}
08055fe8	ekrBattleStarting_8055FE8	{U}
08056024	ekrBattleStarting_8056024	{U}
08056078	ekrBattleStarting_8056078	{U}
080560f0	ekrBattleEnding_80560F0	{U}
08056170	ekrBattleEnding_8056170	{U}
080561c8	ekrBattleEnding_80561C8	{U}
08056228	ekrBattleEnding_8056228	{U}
08056288	ekrBattleEnding_8056288	{U}
08056310	ekrBattleEnding_8056310	{U}
08056390	ekrBattleEnding_8056390	{U}
08056484	ekrBattleEnding_8056484	{U}
08056d24	NewEkrWindowAppear	{U}
08056e10	NewEkrNamewinAppear	{U}
08056ff8	PrepareBattleGraphicsMaybe	{U}
08057ff8	GetSpellAnimId	{U}
08058848	GetBattleAnimationId	{U}
08058960	SomethingFilterBattleAnimId	{U}
080589b4	GetAllegienceId	{U}
08058a0c	GetSomeAISRelatedIndexMaybeByID	{U}
08058a8c	IsItemDisplayedInBattle	{U}
08058bc8	BattleAIS_ExecCommands	{U}
0805990c	NewEkrChienCHR	{U}
0805993c	RegisterAISSheetGraphics	{U}
0805a16c	GetAISSubjectId	{U}
0805a184	GetSomeBoolean	{U}
0805a2b4	GetCoreAIStruct	{U}
0805a310	GetSomeAISRelatedIndexMaybe	{U}
0805a9c0	NewEfxAnimeDrvProc	{U}
0805a9f4	ExecAllAIS	{U}
0805b01c	SetBattleAnimArenaFlag	{U}
0805b0a8	BeginAnimsOnBattle_Arena	{U}
0805b0f0	NewEkrTogiInitPROC	{U}
0805b278	NewEkrTogiEndPROC	{U}
0805b34c	NewEkrTogiColor	{U}
0805b380	EndEkrTogiColor	{U}
0805b3cc	StartSpellAnimation	{U}
0805bc80	StartSpellThing_MagicQuake	{U}
0805bcc4	Loop6C_efxMagicQUAKE	{U}
0805be90	StartSpellAnimDummy	{U}
0805beb4	Loop6C_efxDummymagic	{U}
0805bf08	StartSpellAnimHandAxe	{U}
0805c264	StartSpellAnimArrow	{U}
0805c3f0	StartSpellAnimJavelin	{U}
0805c934	StartSpellAnimSong	{U}
0805cbdc	StartSpellAnimDance	{U}
0805d064	StartSpellAnimFireBreath	{U}
0805d388	StartSpellAnimIceBreath	{U}
0805d4d0	StartSpellAnimDarkBreath	{U}
0805d508	Loop6C_efxDarkbreath	{U}
0805d7d8	StartSpellAnimThunder	{U}
0805d814	Loop6C_efxThunder	{U}
0805dad4	StartSpellAnimFire	{U}
0805db18	StartSpellAnimElfire	{U}
0805db5c	Loop6C_efxFire	{U}
0805dcc4	Loop6C_efxFireBG	{U}
0805ddf0	StartSubSpell_efxFireHITBG	{U}
0805ded8	StartSubSpell_efxElfireBG	{U}
0805dfa4	StartSubSpell_efxElfireBGCOL	{U}
0805e030	StartSubSpell_efxElfireOBJ	{U}
0805e0e4	StartSpellAnimFimbulvetr	{U}
0805f354	StartSpellAnimNosferatu	{U}
0805f390	Loop6C_efxResire	{U}
0805fae0	StartSpellAnimPurge	{U}
0805fe84	StartSpellAnimDivine	{U}
0805fec0	DivineSfxLoop	{U}
080608a4	StartSpellAnimFenrir	{U}
08061024	StartSpellAnimHeal	{U}
08061158	StartSpellAnimMend	{U}
080612bc	StartSpellAnimRecover	{U}
080623e0	StartSpellAnimSilence	{U}
08062678	StartSpellAnimSleep	{U}
08062998	StartSpellAnimHammerne	{U}
08062c14	StartSpellAnimBerserk	{U}
08063480	StartSpellAnimShine	{U}
08063974	StartSpellAnimLuna	{U}
08064e74	StartSpellAnimAura	{U}
080657d4	StartSpellAnimIvaldi	{U}
08065810	Loop6C_efxIvaldi	{U}
080659ac	StartSpellBG_IvaldiBG1	{U}
08065a10	Loop6C_efxIvaldiBG1	{U}
08065a80	StartSpellBG_IvaldiBG2	{U}
08065aec	Loop6C_efxIvaldiBG2	{U}
08065b54	StartSpellBG_IvaldiBG3	{U}
08065bb8	Loop6C_efxIvaldiBG3	{U}
08065c38	StartSpellBG_IvaldiBG4	{U}
08065d84	PrepareSomeIvaldiParticleGraphics	{U}
08065da4	StartSpellOBJ_IvaldiFall	{U}
08065f10	StartSpellOBJ_IvaldiSideWash	{U}
08065f64	Loop6C_efxIvaldiOBJSideWash	{U}
080674d4	StartSpellAnimStone	{U}
08067798	StartSpellAnimEvilEye	{U}
08067b7c	StartSpellAnimNaglfar	{U}
08067bb8	Loop6C_efxNaglfar	{U}
08067e1c	Loop6C_efxNaglfarBG	{U}
08067ee8	Loop6C_efxNaglfarBG2	{U}
08069ec4	StartSpellAnimCrimsonEye	{U}
08070d7c	FillBGRect	{U}
08071990	SomePlaySound_8071990	{U}
080719f0	Loop6C_efxSoundSE	{U}
080729e0	EkrClasschgFinished	{U}
08072a00	EndEkrClasschg	{U}
08072a14	NewEkrClassChg	{U}
08072dc8	EndEfxStatusUnit	{U}
080734f8	DoesEkrLevelUpSomething	{U}
08073518	EndEkrLevelUp	{U}
08073988	NewEkrLevelup	{U}
08074f5c	NewEkrTriangle	{U}
08075b20	DoesBattlePopupExist	{U}
08075b3c	DeleteAnimsOnPopup	{U}
08075b78	MakeBattlePopupTileMapFromTSA	{U}
08075ca8	DrawBattlePopup	{U}
08075f18	Battle_MakePopups	{U}
0807606c	BattlePopup_Wait16Frames	{U}
08076088	ekrPopup_DrawWRankUp	{U}
080760b0	ekrPopup_WaitWRankUp	{U}
080760ec	ekrPopup_DrawWRankUp2	{U}
08076114	ekrPopup_WaitWRankUp2	{U}
08076150	ekrPopup_DrawWpnBroke	{U}
08076178	ekrPopup_WaitWpnBroke	{U}
080761b4	ekrPopup_DrawWpnBroke2	{U}
080761dc	ekrPopup_WaitWpnBroke2	{U}
0807621c	ekrPopup_MarkEnd	{U}
08076330	BeginAnimsOnBattle_Hensei	{U}
0807636c	NewEkrHenseiInitPROC	{U}
08078214	GetSpellAssocStructPtr	{U}
08078248	GetSpellAssocCharCount	{U}
08078268	GetSpellAssocAlt6CPointer	{U}
08078278	GetSpellAssocReturnBool	{U}
08078288	GetSpellAssocFacing	{U}
08078298	GetSpellAssocFlashColor	{U}
080782ec	GenerateMonsterLevel	{U}
08078324	GenerateMonsterClass	{U}
08078350	GenerateMonsterItems	{U}
0807840c	ResetMoveunitStructs	{U}
08078428	Make6CMOVEUNITForUnit	{U}
08078464	MakeMOVEUNITForMapUnit	{U}
080784e4	MOVEUNIT6C_SetCameraFollow	{U}
080784ec	MOVEUNIT6C_UnsetCameraFollow	{U}
080784f4	Make6CMOVEUNITForUI	{U}
08078540	NewMOVEUNIT	{U}
08078694	MOVEUNIT6C_SetSpriteDirection	{U}
080786bc	MOVEUNIT6C_SetDefaultSpriteDirection	{U}
080786e8	_MOVEUNIT6C_SetDefaultFacingDirection	{U}
08078700	_MOVEUNIT6C_ChangeFutureMovement	{U}
08078720	DoesMoveunitExist	{U}
08078738	IsThereAMovingMoveunit	{U}
08078790	MOVEUNIT6C_ChangeFutureMovement	{U}
080787fc	Init6C_89A2938	{U}
08078810	Call89A2938_PlaySound1	{U}
08078824	Call89A2938_PlaySound2	{U}
0807883c	NewSoundStepPlay6C	{U}
08078888	__MOVEUNIT6C_PlaySoundStepByClass	{U}
08078898	Moveunit_ExecMoveCommand	{U}
08078a14	DisplayFogThingMaybe	{U}
08078a64	Call6C_89A2968	{U}
08078b08	Loop6C_89A2968_1	{U}
08078bcc	Loop6C_89A2968_2	{U}
08078bfc	Does6C_89A2968Exist	{U}
08078c14	MOVU_Call5_WaitForSomething	{U}
08078c30	MOVU_Call4_SetState2	{U}
08078c38	MOVU_Call3_Wait	{U}
08078c60	MOVU_Call2_Moving	{U}
08078d6c	MOVEUNIT6C_PlaySoundStepByClass	{U}
08079030	_6CMOVEUNIT_Loop	{U}
08079090	_6CMOVEUNIT_Destructor	{U}
080790a4	ClearMOVEUNITs	{U}
080790b4	EndMoveunitMaybe	{U}
080790c0	Delete6C__	{U}
080790e0	BlockAll6CMarked4	{U}
080790ec	UnblockAll6CMarked4	{U}
0807916c	IsSomeMOVEUNITRelatedStructAvailable	{U}
08079190	ResetAllMoveunitAnims	{U}
080791cc	GetNextMoveunitEntryStruct	{U}
0807924c	GetMOVEUNITDisplayPosition	{U}
080792f8	UpdateMOVEUNITGfx_Idle	{U}
080793a4	UpdateMOVEUNITGfx_Movement	{U}
0807947c	MOVEUNIT6C_GetMovementSpeed	{U}
08079558	GetMOVEUNITGraphicsBuffer	{U}
08079574	GetMovingMapSpriteGfxPtrFromMOVEUNIT	{U}
08079588	MMS_GetROMTCS	{U}
0807959c	MOVEUNIT6C_807959C	{U}
08079618	BlendTimer6C_MainLoop	{U}
080797d4	SetMOVEUNITField40To1	{U}
080797e4	MOVEUNIT6C_SetDisplayPos	{U}
080798b0	SetupSomeMoveunitAnim	{U}
080798e0	TCS_HaltAnim2	{U}
08079944	MOVEUNIT_Begin20FramesFastAnim	{U}
08079968	TCS_HaltAnim	{U}
08079af8	SetAllMOVEUNITField44To1	{U}
08079b10	SetMOVEUNITField44To1	{U}
08079b18	ChangeMOVEUNITDataMaybe	{U}
08079b90	GetMoveunitByIndex	{U}
08079bb8	GetExistingMoveunitForUnit	{U}
08079cd8	CopyEventMoveToBuffer	{U}
08079d40	ClearEventMoveBuffer	{U}
08079e78	MuCtr_SetupWithEventMoveBuffer	{U}
08079f84	MuCtrExists	{U}
08079f9c	SetAllMOVEUNITField44To1_	{U}
0807a014	MoveUnit_	{U}
0807a054	GetPreferredPositionForUNIT	{U}
0807a4e8	GetAdjustedPositionForNewUnit	{U}
0807a72c	DisplayWpnBrokePopup	{U}
0807a770	BattleUnit_ShouldDisplayWpnBroke	{U}
0807a794	DisplayWRankUpPopup	{U}
0807a7d8	BattleUnit_ShouldDisplayWRankUp	{U}
0807a800	_InitFontForUIDefault	{U}
0807a80c	MapAnim_Cleanup	{U}
0807a838	MapAnim_AdvanceBattleRound	{U}
0807a894	MapAnim_PrepareNextBattleRound	{U}
0807a8f0	MapAnim_DisplayRoundAnim	{U}
0807a904	MapAnim_ShowPoisonEffectIfAny	{U}
0807a940	MapAnim_MoveCameraOntoSubject	{U}
0807a95c	MapAnim_MoveCameraOntoTarget	{U}
0807abb8	MapAnim_CallBattleQuoteEvents	{U}
0807acd0	PlaySoundIdA0	{U}
0807ad08	New6C_SummonGfx_FromActionPos	{U}
0807b334	MakeBattleMOVEUNIT	{U}
0807b3bc	SetBattleAnimFacing	{U}
0807b464	SetupBattleMOVEUNITs	{U}
0807b6e4	BeginMapAnimForSteal	{U}
0807b740	BeginMapAnimForSummon	{U}
0807b798	BeginMapAnimForSummonDK	{U}
0807b854	BeginBattleMapAnims	{U}
0807b8d4	SetupMapAnimSpellData	{U}
0807b900	SetupMapBattleAnim	{U}
0807b9b8	GetFacingDirection	{U}
0807bbb8	DeleteBattleAnimInfoThing	{U}
0807bbc8	NewMapBattleInfoThing	{U}
0807cb24	MapAnim_BeginMISSAnim	{U}
0807cb80	MapAnim_BeginNODAMAGEAnim	{U}
0807cbdc	MapAnim_BeginWallBreakAnim	{U}
0807cc28	WallBreakAnim_Init	{U}
0807cc78	NewMapPoisonEffect	{U}
0807ccc0	MapAnim_BeginPoisonAnim	{U}
0807d82c	NewMapAnimEffectAnimator	{U}
0807daa8	New6C_SomethingFlashy	{U}
0807ec08	GetSomeStatUp	{U}
0807ed30	GetSomeStatBase	{U}
0807f614	NewBG0Shaker	{U}
0807f628	BG0Shaker_Init	{U}
0807f630	BG0Shaker_Loop	{U}
0807f6c0	LoadSparkGfx	{U}
0807f7f8	StartStarRotationEffect	{U}
0807f838	StartStarExplosionEffect	{U}
0807f858	StartStarImplosionEffect	{U}
08080d2c	New6C_SummonGfx	{U}
08081260	GetItemAnim6CCode	{U}
08081278	MapAnim_AnimateSubjectIdle	{U}
0808129c	MapAnim_SubjectResetAnim	{U}
080813f8	MapAnim_BeginSubjectFastAnim	{U}
080814d4	MapAnim_MoveSubjectsTowardsTarget	{U}
08081534	MapAnim_MoveSubjectsAwayFromTarget	{U}
08081594	MapAnim_MoveCameraOnSubject	{U}
080815c0	MapAnim_MoveCameraOnTarget	{U}
0808161c	MapAnim_BeginRoundSpecificAnims	{U}
08081914	MapAnim_WaitForHPToEndChangingMaybe	{U}
08081930	MapAnim_PoisonEffectOnTarget	{U}
08082e80	CallEventsFromBuffer	{U}
08082ec4	CheckForEvents	{U}
08082f28	CheckForNextEvents	{U}
080831ac	IsThereClosedChestAt	{U}
080831f0	IsThereClosedDoorAt	{U}
080832d8	CheckEventId3	{U}
08083308	GetCurrentChapterBallistaePtr	{U}
08083320	GetCurrentChapterBallistae2Ptr	{U}
08083348	GetChapterAllyUnitDataPointer	{U}
080834b0	ShouldCallBattleQuote	{U}
08083504	CallBattleQuoteEventsIfAny	{U}
08083834	CheckAFEV	{U}
08083864	CheckTURN	{U}
080838ac	CheckCHAR	{U}
080838fc	CheckCHARASM	{U}
08083938	CheckLOCA	{U}
08083978	CheckVILL	{U}
0808398c	CheckCHES	{U}
080839c8	CheckDOOR	{U}
08083a58	CheckSHOP	{U}
08083aa4	CheckAREA	{U}
08083bd8	SetLocalEventId	{U}
08083c0c	UnsetLocalEventId	{U}
08083c48	ClearLocalEvents	{U}
08083c60	CheckLocalEventId	{U}
08083ca0	SetGlobalEventId	{U}
08083cd8	UnsetGlobalEventId	{U}
08083d6c	CheckGlobalEventId	{U}
08083dc0	GetGlobalEventIdStorage	{U}
08083dc8	GetGlobalEventIdStorageSize	{U}
08083dcc	GetLocalEventIdStorage	{U}
08083dd4	GetLocalEventIdStorageSize	{U}
08083e64	TryCallSelectEvents_u1C	{U}
08084078	GetAvailableLocaCommandAt	{U}
08084330	CheckForWaitEvents	{U}
080843c0	RunWaitEvents	{U}
0808445c	TryCallSelectEvents	{U}
0808464c	GetBattleQuoteEntry	{U}
08084800	IsCharacterForceDeployed_	{U}
08084858	IsSethLArachelMyrrhInnes	{U}
08084ee8	AreAnyEnemyUnitDead	{U}
08084f1c	GetDeadEnemyAmount	{U}
08084f6c	IsCharDeadAsNonPlayerUnit	{U}
08085484	ResetAllPlayerUnitState	{U}
08085970	SetEventId_0x84	{U}
0808597c	UnsetEventId_0x84	{U}
08086414	HandleCh5xUnits_Start	{U}
08086464	HandleCh5xUnits_End	{U}
080864cc	CallRouteSplitMenu	{U}
08086514	MenuCommand_DrawRouteSplit	{U}
08086564	Command_EirikaMode	{U}
08086580	Command_EphraimMode	{U}
08086dbc	EndBG3Slider	{U}
08086dcc	GetSomeUnitId	{U}
080870bc	DrawStatScreenBar	{U}
08087698	DrawUnitScreenSupportList	{U}
08087788	DrawUnitWeaponRank	{U}
08089164	Create6CRText	{U}
0808948c	Loop6C_8A00B20_UpdateOAMData	{U}
08089804	LoadDialogueBoxGfx	{U}
0808bbcc	GetCameraMovementSpeedMaybe	{U}
0808bcf8	Loop6CUI1_DisplayTransition	{U}
0808be70	Loop6CUI1_HideTransition	{U}
0808c45c	DrawMinimugBoxMaybe	{U}
0808c5d0	InitMinimugBoxMaybe	{U}
0808ccc8	Loop6CUI1_Hidden	{U}
0808cd74	Loop6CUI1_Displayed	{U}
0808ce9c	Init6CUI2	{U}
0808cec8	Loop6CUI2	{U}
0808cfc4	InitPlayerPhaseInterfaceMaybe	{U}
0808d13c	New6CPPInterfaceConstructor	{U}
0808d150	DeletePlayerPhaseInterface6Cs	{U}
0808d288	Init6CPI	{U}
0808d47c	Loop16CPI	{U}
0808d6d4	Loop26CPI	{U}
0808d71c	Loop46CPI	{U}
0808d77c	__malloc_unlock_0	{U}
0808d784	Loop36CPI	{U}
0808dae4	MinimalVBlankHandler	{U}
0808e764	NewChapterStatusScreen	{U}
080952d0	__malloc_unlock_1	{U}
080953f0	IsCharacterForceDeployed	{U}
0809545c	SomeLeftoverFunctionThatReturns0	{U}
08095460	IsUnitInCurrentRoster	{U}
08095748	SortPlayerUnitsForPrepScreen	{U}
08095a38	EndBG3Slider_	{U}
08096684	NewPrepScreenTraineePromotionManager	{U}
08096698	PrepScreenTraineePromotionManagerExists	{U}
08097684	Delete6CMenuScroll	{U}
08097698	Make6CMenuScroll	{U}
080981e4	SomethingPrepListRelated	{U}
0809839c	CanUnitPrepScreenUse	{U}
0809d2c4	StoreConvoyWeaponIconGraphics	{U}
080a075c	__malloc_unlock_2	{U}
080a2d28	LoadSomeUnitStatThingUnlockIdk	{U}
080a2da8	SaveSomeUnitStatThingUnlockIdk	{U}
080a2ed4	GetSaveDataOffsetPointer	{U}
080a3064	GetSaveDataLocation	{U}
080a3130	SaveLocalEventIndexes	{U}
080a3150	SaveGlobalEventIndexes	{U}
080a3170	LoadLocalEventIds	{U}
080a3198	LoadGlobalEventIds	{U}
080a31e4	SaveConvoyItems	{U}
080a326c	LoadConvoyItems	{U}
080a37a8	SetSomeUnitStatThingUnlockMaybeIdk	{U}
080a386c	__malloc_unlock_3	{U}
080a421c	LoadBWLEntries	{U}
080a4248	LoadSomeTable	{U}
080a4264	SaveBWLEntries	{U}
080a4288	SaveChapterWinData	{U}
080a429c	GetChapterWinDataEntry	{U}
080a42bc	GetNextChapterWinDataEntryIndex	{U}
080a42ec	GetWonChapterCount	{U}
080a4350	RegisterChapterTimeAndTurnCount	{U}
080a43d8	GetGameTotalTurnCount	{U}
080a4404	DoesThisChapterCount	{U}
080a4448	GetGameTotalTime	{U}
080a4488	GetGameTotalTurnCount2	{U}
080a4684	BWL_AddWinOrLossIdk	{U}
080a474c	BWL_IncrementMoveValue	{U}
080a478c	BWL_IncrementStatScreenViews	{U}
080a47cc	BWL_IncrementDeployCountMaybe	{U}
080a481c	BWL_AddTilesMoved	{U}
080a487c	BWL_AddExpGained	{U}
080a48dc	StoreSomeUnitSetFlags	{U}
080a4a34	BWL_AddFavoritismValue	{U}
080a4cfc	BWL_GetEntry	{U}
080a4d34	Set0203EDB4	{U}
080a4d40	Save0203EDB4	{U}
080a4d5c	Load0203EDB4	{U}
080a5010	SaveGame	{U}
080a5128	LoadGame	{U}
080a533c	SaveUnit	{U}
080a5794	LoadSavedUnit	{U}
080a59e0	SaveRNGState_Maybe	{U}
080a5a48	SaveSuspendedGame	{U}
080a5c14	LoadSuspendedGame	{U}
080a5e10	PackUnitStructForSuspend	{U}
080a6118	UnpackUnitStructFromSuspend	{U}
080a6370	SaveTrapStructs	{U}
080a9024	Loop6C_savemenu	{U}
080aa4c0	Make6C_savemenu	{U}
080aa518	Make6C_savemenu2	{U}
080aa52c	savemenu_SetDifficultyChoice	{U}
080ab300	New6C_savedraw	{U}
080ac3e0	NewNewGameDifficultySelect	{U}
080ad2e8	_CallDifferedLoop	{U}
080ad2f8	Get6CDifferedLoop6C	{U}
080ad31c	DeleteEach6CDifferedLoop	{U}
080ad338	Find6CDifferedLoop	{U}
080ad5d8	EnableAllGfx	{U}
080ae18c	FadeInOut_Init	{U}
080ae1a0	FadeIn_Loop	{U}
080ae200	FadeOut_Loop	{U}
080ae248	FadeInOut_DisableGfx	{U}
080ae2a0	FadeInExists	{U}
080ae2b8	FadeOutExists	{U}
080ae2d0	NewFadeIn	{U}
080ae2f4	NewFadeOut	{U}
080b29f8	Make6C_opinfo	{U}
080b4154	Shop6C_GetPortraitIndex	{U}
080b41e0	MakeShopArmory	{U}
080b4200	MakeShopVendor	{U}
080b4240	MakeShop	{U}
080b8a18	WorldMap_Destruct	{U}
080b8d5c	SetupGraphicSystemsForWorldMap	{U}
080b8fa4	DeployEveryUnit	{U}
080b9a10	WorldMap_HideEverything	{U}
080b9b38	WorldMap_InitChapterTransition	{U}
080b9cb0	WorldMap_WaitForChapterIntroEvents	{U}
080b9f08	DoNothing	{U}
080ba024	EndWM	{U}
080ba2e4	NewWorldMap	{U}
080ba334	WorldMap_SetupChapterStuff	{U}
080ba3d4	CallChapterWMIntroEvents	{U}
080ba718	NewMapScreenVSynce	{U}
080ba758	MapScreen_OnDelete	{U}
080ba764	MapScreen_Init	{U}
080babf0	NewMapScreen	{U}
080bac1c	MMS_GetGfx	{U}
080bac30	MMS_GetROMTCS2	{U}
080bac44	GetMapUnitMMSGfxBuffer	{U}
080bac58	GmapUnit_Destruct	{U}
080bac64	GmapUnit_Init	{U}
080bac78	GmapUnit_Loop	{U}
080badd4	GetPaletteIdForAllegience	{U}
080badf0	NewMapUnit	{U}
080baf0c	MapUnitC_DeleteGmapUnit	{U}
080baf34	MapUnitC_SetPosition	{U}
080baf84	MapUnitC_SetTCSAnim	{U}
080bb018	MapUnitC_SetTCSOAMIndex	{U}
080bb038	MapUnitC_SetAllegienceColorIndex	{U}
080bb0a4	MapUnitC_MarkSomething	{U}
080bb1a0	GmapUnitContainer_Destruct	{U}
080bb1c8	GmapUnitContainer_Init	{U}
080bb1e8	NewGmapUnitContainer	{U}
080bb20c	GmapUnitFade_Destruct	{U}
080bb264	GmapUnitFade_Init	{U}
080bb348	GmapUnitFade_Loop	{U}
080bb5b0	WMLoc_GetChapterId	{U}
080bb5e4	WMLoc_GetNextLocId	{U}
080bb718	GmapScreen2_Destruct	{U}
080bb724	GmapScreen2_Init	{U}
080bb798	GmapScreen2_Loop	{U}
080bba84	GmapCursor_Init	{U}
080bbad4	GmapCursor_Destruct	{U}
080bbbc4	NewGmapCursor	{U}
080bc0bc	MapRoute_StartTransition	{U}
080bc184	MapRoute_EnableBGSyncs	{U}
080bc1b8	MapRoute_TransitionLoop	{U}
080bc228	MapRoute_TransitionEnd	{U}
080bc29c	MapRoute_BeginRouteTransition	{U}
080bc2dc	MapRoute_80BC2DC	{U}
080bc3a4	NewMapRoute	{U}
080bc8bc	SetupNewWMRoute	{U}
080bc8ec	WM_RemovePath	{U}
080bd068	GetChapterThing	{U}
080bd2ac	GetCharacterClassId	{U}
080bd2ec	MapMUPrim_MakeUnitForChar	{U}
080bd374	MapMUPrim_MakeUnitForClass	{U}
080bd3e8	MapMUPrim_RemoveLinkedMapUnit	{U}
080bdc04	MapMU_FillPrim	{U}
080bdc28	NewMapMU	{U}
080bdc3c	MapMU_SetUnit	{U}
080bdd2c	MapMU_RemoveUnit	{U}
080be0e8	MapMU_SetUnitTCSOAMIndex	{U}
080be108	MapMU_80BE108	{U}
080be534	MapMU_SetUnitClass	{U}
080be550	MapMU_SetUnitChar	{U}
080bf4d0	WM_PutClassSprite	{U}
080bf504	WM_PutCharSprite	{U}
080bf538	WM_RemoveUnit	{U}
080bf58c	WM_DrawPath	{U}
080c01dc	NewMapMuEntry	{U}
080c0858	GetWMCenteredCameraPosition	{U}
080c2420	Make6C_Gmap_RM	{U}
080c24ac	GetWMDisplayPosition	{U}
080c6738	AddSomeChild6C	{U}
080c674c	DeleteSome6C	{U}
080c6760	StorePaletteToBufferMaybe	{U}
080c6a54	Initialize6CIntroSequence	{U}
080c6e90	Until6C2AIs8Callback	{U}
080cc1f8	PrepareHealthAndSafetyScreen	{U}
080cc468	MakePromotionScreen	{U}
080cc498	Make6C_PromotionMain	{U}
080cc904	PromotionInit_SetNullState	{U}
080cc910	PromotionInit_Loop	{U}
080ccd34	Make6C_PromotionSub	{U}
080cdb34	PromotionCommand_OnSelect	{U}
080cdcc4	PromotionCommand_OnTextDraw	{U}
080cdd00	PromotionCommand_OnChange	{U}
080cdd38	Usability_ThirdPromotionOption	{U}
080cdddc	Make6C_PromotionMenuSelect	{U}
080d1680	DivArm	{U}
080d16e4	SRAMLoader	{U}
080d1724	SRAMTransfer	{U}
080d1764	SaveChecker	{U}
080d17b0	StoreLoadRoutinesToRAM	{U}
080d184c	SRAMTransfer_WithCheck	{U}
080d4020	_cleanup_r	{U}
080d4030	_cleanup	{U}
080d45d0	setlocale	{U}
080d45e8	localeconv	{U}
080d556c	_ratio	{U}
080d55bc	_mprec_log10	{U}
080d5720	__sclose	{U}
080d57ac	remap_handle	{U}
080d5868	get_errno	{U}
080d587c	error	{U}
080d5890	wrap	{U}
080d5cfc	isatty	{U}
080d5d00	alarm	{U}
080d5eac	__unpack_d	{U}
080d5f84	_fpadd_parts	{U}
080d6c34	_fpadd_parts_0	{U}
080d74a0	CallARM_FillTileRect	{U}
080d74a8	TileMap_FillRect	{U}
080d74b8	TileMap_CopyRect	{U}


080003A8	ARM_FillRect	arm_func	{J}
08000B0C	StoreIRQToIRAM	{J}
08000B4C	DummyIRQRoutine	{J}
08000B50	SetIRQHandler	{J}
08000B60	NextRN	{J}
08000C0C	LoadRNState	{J}
08000C24	StoreRNState	{J}
08000C3C	NextRN_100	{J}
08000C58	NextRN_N	{J}
08000C78	Roll1RN	{J}
08000C90	Roll2RN	{J}
08000CB4	SetOtherRNState	{J}
08000CC0	GetOtherRN	{J}
08000CE4	SetGlobalClock	{J}
08000CF0	IncrementGlobalClock	{J}
08000D68	CopyToPaletteBuffer	{J}
08000E4C	FlushLCDControl	{J}
08000EF4	GetBackgroundControlBuffer	{J}
08000F3C	GetBackgroundTileDataOffset	{J}
08000F54	GetTileIndex	{J}
08000F8C	SetBackgroundTileDataOffset	{J}
08000FB4	SetBackgroundMapDataOffset	{J}
08000FFC	SetBackgroundScreenSize	{J}
08001044	FlushPalettesAdditive	{J}
080010A0	FlushPalettesSubstractive	{J}
080010FC	FlushBackgrounds	{J}
080011D0	BG_Fill	{J}
080011F0	RegisterBlankTile	{J}
08001208	SetInterrupt_LCDVBlank	{J}
0800125C	SetInterrupt_LCDVCountMatch	{J}
080012CC	SetLCDVCountSetting	{J}
080012D8	SetMainUpdateRoutine	{J}
080012E4	ExecMainUpdate	{J}
08001302	_UpdateKeyStatus	{J}
0800139C	UpdateKeyStatus	{J}
080013DC	ResetKeyStatus	{J}
080013FC	SetKeyStatus_IgnoreMask	{J}
08001408	GetKeyStatus_IgnoreMask	{J}
08001414	KeyStatusSetter_Set	{J}
0800142C	NewKeyStatusSetter	{J}
08001448	BG_SetPosition	{J}
08001ACC	SetupBackgrounds	{J}
08001BC0	BG_GetMapBuffer	{J}
08001C78	UpdateHBlankHandlerState	{J}
08001D28	SetPrimaryHBlankHandler	{J}
08001D3C	SetSecondaryHBlankHandler	{J}
08001D50	GetBackgroundFromBufferPointer	{J}
08001DBC	BG_SetDepth	{J}
08001DDC	BG_GetDepth	{J}
08001DF0	SetSpecialColorEffectsParameters	{J}
08001ED0	SetDefaultColorEffects	{J}
08001EF0	DisablePaletteSync	{J}
08001EFC	BG_EnableSyncByMask	{J}
08001F0C	BG_EnableSync	{J}
08001F30	ClearTileRigistry	{J}
08001F64	RegisterTileGraphics	{J}
08001FA4	RegisterFillTile	{J}
08001FD8	FlushTiles	{J}
0800204C	SetupOAMBufferSplice	{J}
08002088	FlushSecondaryOAM	{J}
080020CC	FlushPrimaryOAM	{J}
08002100	WriteOAMRotScaleData	{J}
0800219C	GetPrimaryOAMSize	{J}
080021C4	SomethingSoundRelated_8002274	{J}
0800223C	SomethingSoundRelated_80022EC	{J}
0800226C	SoundStuff_800231C	{J}
08002330	SoundStuff_80023E0	{J}
08002680	ISuspectThisToBeMusicRelated_8002730	{J}
0800276C	Some6CMusicRelatedWaitCallback	{J}
080027A8	Exec6CSomeWaitIfMusicOn	{J}
08002A08	DeleteAll6CWaitMusicRelated	{J}
08002A48	StoreRoutinesToIRAM	{J}
08002ACC	CallARM_DecompText	{J}
08002ACC	CallARM_PushToSecondaryOAM	{J}
08002B1C	CallARM_PushToPrimaryOAM	{J}
08002B30	CallARM_Func5	{J}
08002B44	CallARM_FillMovementMap	{J}
08002B58	Initialize6CEngine	{J}
08002BCC	New6C	{J}
08002C30	NewBlocking6C	{J}
08002C60	Delete6CInternal	{J}
08002CBC	Delete6C	{J}
08002CD4	Allocate6C	{J}
08002CE4	Free6C	{J}
08002CF4	InsertMain6C	{J}
08002D18	InsertChild6C	{J}
08002D30	Isolate6C	{J}
08002D78	Exec6C_	{J}
08002DD4	Exec6C	{J}
08002DE4	Break6CLoop	{J}
08002DEC	Find6C	{J}
08002E74	Goto6CLabel	{J}
08002EAC	Goto6CPointer	{J}
08002EB4	Set6CMark	{J}
08002EBC	Set6CDestructor	{J}
08002EC0	ForAll6C	{J}
08002EE8	ForEach6C	{J}
08002F3C	BlockEach6CMarked	{J}
08002F64	UnblockEach6CMarked	{J}
08002F90	DeleteEach6CMarked	{J}
08002FBC	Delete6C_	{J}
08002FC8	DeleteEach6C	{J}
08002FD8	Clear6CLoopWrapper	{J}
08002FE4	ClearCallbackAll6CMatch	{J}
08002FF4	ForAllFollowing6C	{J}
08003038	Call6C_00Delete	{J}
08003044	Call6C_01Name	{J}
08003054	Call6C_02CallAndContinue	{J}
08003068	Call6C_16Call	{J}
08003130	Call6C_18CallWithArg	{J}
0800309C	Call6C_14While	{J}
080030C8	Call6C_03SetLoop	{J}
080030D8	Call6C_04SetDestructor	{J}
080030F4	Call6C_05AddChild	{J}
08003110	Call6C_06AddBlockingChild	{J}
0800312C	Call6C_07AddGlobal_BuggedMaybe	{J}
0800314C	Call6C_08WhileExists	{J}
08003174	Call6C_09DeleteEach6C	{J}
08003190	Call6C_0AClearLoopForEach6C	{J}
080031AC	Call6C_0BOr19Label	{J}
080031B8	Call6C_0DJump	{J}
080031C8	Call6C_0CGotoLabel	{J}
080031DC	_6CSleepLoop	{J}
080031F8	Call6C_0ESleep	{J}
08003220	Call6C_0FMark	{J}
08003234	Call6C_13Blank	{J}
08003240	Call6C_10Block	{J}
08003244	Call6C_11DeleteIfDuplicate	{J}
08003284	Call6C_17DeleteOtherDuplicates	{J}
080032BC	Call6C_15Blank	{J}
080032C8	Call6C_12SetBit4	{J}
080032E0	Call6CCode	{J}
0800332C	ForEach6CDoNothing	{J}
0800339C	Set6CLoop	{J}
080033B8	Find6C_	{J}
080034C4	ResetIconGraphics_	{J}
080034D0	ResetIconGraphics	{J}
08003508	LoadIconPalettes	{J}
08003520	LoadIconPalette	{J}
0800355C	GetIconGfxTileIndex	{J}
08003570	GetIconGfxIndex	{J}
0800359C	GetIconTileIndex	{J}
08003608	DrawIcon	{J}
08003658	ClearIconGfx	{J}
08003678	LoadIconObjectGraphics	{J}
080036D8	SetupDebugFontForBG	{J}
08003750	PrintDebugStringToBG	{J}
08003814	ClearSmallStringBuffer	{J}
08003868	StoreNumberStringOrDashesToSmallBuffer	{J}
080038B4	StoreNumberHexStringToSmallBuffer	{J}
0800391C	PrintStringToDBG	{J}
08003988	FlushDBGToBG2	{J}
08003A70	SetupDebugFontForOBJ	{J}
08003AFC	PrintDebugStringAsOBJ	{J}
08003BAC	GetSomeByte	{J}
08003BB8	SetSomeByte	{J}
08003BC4	Font_InitForUIDefault	{J}
08003BE8	Font_InitForUI	{J}
08003C24	SetFontGlyphSet	{J}
08003C68	SetFont	{J}
08003C8C	Text_Init	{J}
08003CB4	Text_Allocate	{J}
08003CDC	InitTextBatch	{J}
08003D80	Text_GetXCursor	{J}
08003D84	Text_SetXCursor	{J}
08003D88	Text_Advance	{J}
08003D90	Text_SetColorId	{J}
08003D94	Text_GetColorId	{J}
08003D98	Text_SetParameters	{J}
08003DA0	Text_Draw	{J}
08003DEC	Text_DrawBlank	{J}
08003E0C	GetStringTextWidth	{J}
08003E6C	GetCharTextWidth	{J}
08003EAC	GetStringTextCenteredPos	{J}
08003F18	String_GetEnd	{J}
08003F28	Text_AppendString	{J}
08003F98	Text_AppendDecNumber	{J}
0800407C	Text_AppendNumberOr2Dashes	{J}
080040B8	Text_AppendChar	{J}
08004120	GetVRAMPointerForTextMaybe	{J}
080041A0	Font_SpecializedGlyphDrawer	{J}
08004360	Font_SetSomeSpecialDrawingRoutine	{J}
08004374	DrawTextInline	{J}
080043B8	Text_InsertString	{J}
080043DC	Text_InsertNumberOr2Dashes	{J}
08004400	Text_AppendStringSimple	{J}
0800443C	Text_AppendCharSimple	{J}
08004470	GetStringTextWidthSimple	{J}
080044A4	InitSomeOtherGraphicsRelatedStruct	{J}
080044E0	Text_Init3	{J}
080045BC	Text_80046B4	{J}
080048B4	NewGreenTextColorManager	{J}
080048D8	EndGreenTextColorManager	{J}
08004A9C	DrawDecNumber	{J}
08004D48	AIS_ExecAll	{J}
08004DC0	ClearAISArray	{J}
08004E50	AIS_New	{J}
08004EB4	AISArray_Sort	{J}
08004F0C	AIS_Free	{J}
08004F3C	AIS_Display	{J}
08004F48	HandleNextAISFrame	{J}
080050C8	LinkAIS	{J}
08005110	_AIS_Display	{J}
08005360	FlushIntermediateOAMBuffer	{J}
0800541C	GetPortraitStructPointer	{J}
08005430	ResetFaces	{J}
0800544C	SetupFaceGfxData	{J}
0800549C	Load6CFACEGraphics	{J}
08005544	NewFace	{J}
08005640	DeleteE_FACEByPointer	{J}
08005660	DeleteFaceByIndex	{J}
08005B28	ShouldPortraitBeSmol	{J}
08007B24	_Loop6CBlockingTimer	{J}
08008E08	GetZero	{J}
08009608	TCSWrapper_New	{J}
08009650	TCSWrapper_OnUpdate	{J}
0800967C	TCSWrapper_OnDelete	{J}
08009688	TCSWrapper_SetParameters	{J}
080096A4	TCSWrapper_Delete	{J}
080096B0	DeleteAllTCSWrappers	{J}
080098F0	Goto6CLabel12IfSomething	{J}
080099B0	Null6CCallback	{J}
080099BC	Delete6CIfNotMarkedB	{J}
08009D40	CallActualSaveMenu	{J}
08009E3C	GetChapterIdTo6C	{J}
08009E4C	SetChapterIdFrom6C	{J}
08009E68	NewGameControl	{J}
08009EA0	GetGameControl6C	{J}
08009EB0	SetNextGameActionId	{J}
08009EC4	SetNextChapterId	{J}
08009EEC	RestartGameAndGoto8	{J}
08009EEC	RestartGameAndGoto12	{J}
08009F3C	ForceEnableSoundEffects	{J}
08009F58	SomethingRelatedToText	{J}
08009FA8	GetStringFromIndex	{J}
08009FE4	GetStringFromIndexInBuffer	{J}
0800A118	FilterSomeTextFromStandardBuffer	{J}
0800BD4C	SetSomeRealCamPos	{J}
0800BF08	HideAllUnits	{J}
0800C0B8	Event80_	{J}
0800C0D4	Event81_	{J}
0800C118	Event82_EndWM	{J}
0800C128	Event83_WM_SETCAM	{J}
0800C13C	Event84_WM_SETCAMONLOC	{J}
0800C17C	Event85_WM_SETCAMONSPRITE	{J}
0800CA88	Event86_WM_MOVECAM	{J}
0800C224	Event87_	{J}
0800C2B8	Event88_	{J}
0800C35C	Event89_	{J}
0800C390	Event8A_	{J}
0800C3A0	Event8B_	{J}
0800C3AC	Event8C_	{J}
0800C3C8	Event8D_	{J}
0800C3E0	Event8E_	{J}
0800C3F8	Event8F_	{J}
0800C410	Event90_WM_DRAWPATH	{J}
0800C43C	Event91_WM_DRAWPATH_Silent	{J}
0800C43C	Event92_REMOVEPATH	{J}
0800C4A4	Event93_	{J}
0800C4C0	Event94_	{J}
0800C4DC	Event95_	{J}
0800C52C	Event96_	{J}
0800C5B4	Event97_	{J}
0800C644	Event98_	{J}
0800C70C	Event99_	{J}
0800C740	Event9A_	{J}
0800C7A0	Event9B_	{J}
0800C7BC	Event9C_	{J}
0800C800	Event9D_	{J}
0800C834	Event9E_PUTSPRITE	{J}
0800C84C	Event9F_	{J}
0800C864	EventA0_REMSPRITE	{J}
0800C874	EventA1_	{J}
0800C884	EventA2_	{J}
0800C894	EventA3_	{J}
0800C8D0	EventA4_	{J}
0800C90C	EventA5_	{J}
0800C934	EventA6_	{J}
0800C964	EventA7_	{J}
0800C994	EventA8_	{J}
0800CA34	EventA9_	{J}
0800CA94	EventAA_	{J}
0800CAC4	EventAB_	{J}
0800CAF4	EventAC_	{J}
0800CB38	EventAD_	{J}
0800CB60	EventAE_	{J}
0800CB8C	EventAF_	{J}
0800CBB0	EventB0_	{J}
0800CBD4	EventB1_	{J}
0800CC00	EventB2_	{J}
0800CC14	EventB3_	{J}
0800C0CE	EventB4_	{J}
0800CC5C	EventB5_	{J}
0800CC7C	EventB6_	{J}
0800CCC4	EventB7_	{J}
0800CCEC	EventB8_	{J}
0800CD0C	EventB9_	{J}
0800CD34	EventBA_	{J}
0800CD70	EventBB_	{J}
0800CDB0	EventBC_	{J}
0800CE18	EventBD_	{J}
0800CE40	EventBE_	{J}
0800CE7C	EventBF_	{J}
0800CEA8	EventC0_	{J}
0800CEC0	EventC1_SKIPWM	{J}
0800CED4	EventC2_	{J}
0800CEE8	EventC3_	{J}
0800CF2C	EventCE_	{J}
0800CF44	EventCF_	{J}
0800CF5C	EventC4_	{J}
0800CFB4	EventC5_	{J}
0800D014	EventC6_	{J}
0800D04C	EventC7_	{J}
0800D06C	EventC8_	{J}
0800D08C	EventC9_	{J}
0800DBFC	__malloc_unlock	{J}
0800D0EC	EventCD_	{J}
0800D104	_MarkSomethingInMenu	{J}
0800D110	EventEngine_Loop	{J}
0800D220	EventEngine_Destructor	{J}
0800D2D0	EqueueEventEngineCall	{J}
0800D308	HandleNextEventEngineCall	{J}
0800D374	NewMapEventEngine	{J}
0800D404	NewBattleEventEngine	{J}
0800D45C	MapEventEngineExists	{J}
08007B08	DeleteEventEngines	{J}
0800D594	CallSomeOtherEvents	{J}
0800D77C	CheckEventId_	{J}
0800D7EC	SlotQueuePush	{J}
0800D808	SlotQueuePop	{J}
0800D844	SetEventCounter	{J}
0800D85C	Event00_NULL	{J}
0800D860	Event01_End	{J}
0800D914	Event02_EvBitAndIdMod	{J}
0800D97C	Event03_CheckEvBitOrId	{J}
0800D9DC	Event04_CheckRandom	{J}
0800DA04	Event05_SetSlot	{J}
0800DA1C	Event06_SlotOperation	{J}
0800DBA0	Event07_SlotQueueOperations	{J}
0800DC04	Event08_Label	{J}
0800DC08	Event09_Goto	{J}
0800DC40	Event0A_Call	{J}
0800DC94	Event0B_	{J}
0800DCE0	Event0C_Branch	{J}
0800DD68	Event0D_AsmCall	{J}
0800DD9C	Event0E_STAL	{J}
0800DE3C	Event0F_	{J}
0800DEF0	Event10_ModifyEvBit	{J}
0800DFB0	Event11_SetIgnoredKeys	{J}
0800D014	Event12_	{J}
0800FD0C	Event13_	{J}
0800E064	Event14_	{J}
0800E0BC	Event15_	{J}
0800E666	Event16_	{J}
0800E160	Event17_	{J}
0800E1FC	Event18_	{J}
0800E2C8	Event19_	{J}
0800E3E0	Event1A_TEXTSTART	{J}
0800E5CC	Event1B_TEXTSHOW	{J}
0800E730	Event1C_TEXTCONT	{J}
0800E774	Event1D_TEXTEND	{J}
0800E8AC	_WhileFace6CExists	{J}
0800E8C8	Event1E_	{J}
0800E98C	Event1F_	{J}
0800E9D4	Event20_	{J}
0800EADC	Event21_	{J}
0800F2DC	Event22_	{J}
0800F338	Event23_	{J}
0800F364	Event24_	{J}
0800F390	Event25_	{J}
0800F41C	Event26_CameraControlMaybe	{J}
0800F4D0	Event27_MapChange	{J}
0800F5EC	Event28_ChangeWeather	{J}
0800F5FC	Event29_SetFogVision	{J}
0800DC94	Event2A_MoveToChapter	{J}
0800F720	ShouldUNITBeLoaded	{J}
0800F8D4	LoadUnit_800F704	{J}
0800FD02	Event2C_LoadUnits	{J}
0800FE0C	TryPrepareEventUnitMovement	{J}
0800FE54	GetSomeEventEngineMoveRelatedBitfield	{J}
0800FE88	Event2D_	{J}
0800FEA4	Event2E_CheckAt	{J}
0800FF08	Event2F_MoveUnit	{J}
08010088	Event30_ENUN	{J}
080100CC	Event31_DisplayEffectRange	{J}
0801015C	Event32_SpawnSingleUnit	{J}
08010270	Event33_CheckUnitVarious	{J}
080103F4	Event34_MessWithUnitState	{J}
0801060C	Event35_UnitClassChanging	{J}
080106A0	Event36_CheckInArea	{J}
080106FC	Event37_GiveItem	{J}
08010770	Event38_ChangeActiveUnit	{J}
0801079C	Event39_	{J}
080108E4	Event3B_	{J}
08010994	Event3C_	{J}
080109F0	Event3D_	{J}
08010AAC	Event3E_PrepScreenCall	{J}
08010B9C	Event3F_	{J}
08010C0E	Event40_	{J}
08010D24	Event41_	{J}
08010D9E	Event42_	{J}
08010E38	Event43_	{J}
08010E70	Event44_	{J}
08010EA4	Event45_	{J}
08011080	GetSomeLongPopupLength	{J}
08011288	LongPopup_PrepareGfx	{J}
080112FC	LongPopup_PlaySound	{J}
08011340	IconOAMUpdater_Loop	{J}
0801135C	LongPopup_Draw	{J}
080114AC	LongPopup_WaitForPress	{J}
080114E4	LongPopup_Clear	{J}
08011554	SetPopupNumber	{J}
08011560	NewPopupSimple	{J}
0801157C	NewPopup	{J}
080115C8	NewGotItemPopup	{J}
08011610	ItemGot_DisplayLePopup	{J}
08011624	ItemGot_GotLeItem	{J}
08011640	NewItemGot	{J}
08011688	NewGeneralItemGot	{J}
08011730	NewGoldGotPopup	{J}
080117CC	NewPopup_WeaponBroke	{J}
080117F0	NewPopup_WRankIncrease	{J}
08012414	GetChapterAllyUnitCount	{J}
08012430	InitPlayerUnitPositionsForPrepScreen	{J}
08012700	StoreUnitWordStructs	{J}
0801273C	LoadUnitWordStructs	{J}
08012F78	CopyString	{J}
08012F94	CopyDirect	{J}
08013008	CopyDataWithPossibleUncomp	{J}
08013048	FilterR0ForRawCopy	{J}
080130AC	RegisterObjectTileGraphics	{J}
080130D8	CopyTileGfxForObj	{J}
08013504	GetPaletteBufferBuffer	{J}
08013528	SetSomethingInPaletteBB_2A	{J}
08013538	SetSomethingInPaletteBB_5A	{J}
0801354C	SetSomethingInPaletteBB_8A	{J}
08013560	GetSomethingInPaletteBB_2A	{J}
0801356C	GetSomethingInPaletteBB_5A	{J}
0801357C	GetSomethingInPaletteBB_8A	{J}
0801358C	ArchiveCurrentPalettes	{J}
080135D8	ArchivePalette	{J}
08013608	WriteFadedPaletteFromArchive	{J}
08014120	ContinueUntilSomeTransistion6CExists	{J}
080142F0	NewBlockingTimer	{J}
0801430C	Timer6C_Countdown	{J}
08014494	DeleteAllPaletteAnimator	{J}
080144A4	NewPaletteAnimator	{J}
080144F8	NewPaletteAnimator_	{J}
080148A4	FutureCall2_Loop	{J}
080148C8	FutureCall_Loop	{J}
080148F0	SetupFutureCall2	{J}
0801490C	SetupFutureCall	{J}
08014B28	RerangeSomething	{J}
08014B50	PlaySpacialSoundMaybe	{J}
080152C8	GeneralVBlankHandler	{J}
08015318	SomeUpdateRoutine	{J}
08015374	AddSkipThread2	{J}
080153A4	GetThread2SkipStack	{J}
080153B0	SwitchPhases	{J}
080153F8	CallBeginningEvents	{J}
08015474	MakePhaseController6C	{J}
080154C8	NewPlayerPhase6C	{J}
08015518	E_BMAPMAIN_SuspendGame	{J}
08015568	UndeployEveryone	{J}
080155AC	GotoChapterWithoutSave	{J}
08015624	SetupBackgroundForWeatherMaybe	{J}
0801569C	LoadObjUIGfx	{J}
08015710	LoadGameCoreGfx	{J}
08015730	HandleCursorMovement	{J}
08015854	MoveCameraByStepMaybe	{J}
080159D4	GetSomeAdjustedCameraX	{J}
08015A18	GetSomeAdjustedCameraY	{J}
08015AB4	DisplayCursor	{J}
08015BD8	SetCursorMapPosition	{J}
08011EEA	Init6C_GENS	{J}
08015CBC	Loop6C_GENS	{J}
08015D3C	StoreAdjustedCameraPositions	{J}
08015E18	EnsureCameraOntoPosition	{J}
08015EA8	ShouldMoveCameraPosSomething	{J}
08015FD4	GetCurrentMapMusicIndex	{J}
08016198	GetItemPowBonus	{J}
08016198	GetItemSklBonus	{J}
08016198	GetItemSpdBonus	{J}
08016198	GetItemDefBonus	{J}
08016198	GetItemResBonus	{J}
08016198	GetItemLckBonus	{J}
0801631C	CanUnitUseAsWeapon	{J}
080164F8	CanUnitUseWeapon	{J}
0801654C	CanUnitUseAsStaff	{J}
080165A8	CanUnitUseStaff	{J}
08016750	DrawTextAndIconForItem	{J}
08016894	ValidateItem	{J}
080168D0	GetUnitEquippedWeapon	{J}
08016900	GetUnitEquippedWeaponSlot	{J}
08016934	IsItemCoveringRange	{J}
08016968	EquipUnitItemByIndex	{J}
08016994	IsWeaponEffective	{J}
08016A30	IsSlayerApplied	{J}
08016B04	GetWeaponRankLevel	{J}
08016B3C	GetWRankTextBuffer	{J}
08016BA0	GetWRankText	{J}
08016BC8	GetWTypeTextInStandardBuffer	{J}
08016BF8	GetWRankBarData	{J}
08016C70	IsItemDanceRing	{J}
08016C8C	IsItemUsable	{J}
08016D24	CanUnitUse	{J}
08016D60	GetItemHealAmount	{J}
08016DD4	GetUnitItemSlot	{J}
08016DFC	IsItemStealable	{J}
08016E28	IsItemHammernable	{J}
08016E7C	GetWeaponRangeMask	{J}
08016F90	GetUnitRangeMask	{J}
08016FE4	GetUnitStaffRangeMask_0	{J}
080170A0	GetUnitStaffRangeMask	{J}
08017124	GetConvoyTotalGoldValue	{J}
08017294	GetItemIndex	{J}
080172C0	GetItemDescId	{J}
080172D8	GetItemUseDescId	{J}
080172F0	GetItemWType	{J}
08017314	GetItemAttributes	{J}
0801732C	GetItemUses	{J}
08017358	GetItemMaxUses	{J}
08017384	GetItemMight	{J}
0801739C	GetItemHit	{J}
080173B4	GetItemWeight	{J}
080173CC	GetItemCrit	{J}
080173E4	GetItemCost	{J}
08017414	GetItemMinRange	{J}
0801742C	GetItemMaxRange	{J}
08017448	GetItemRange	{J}
08017460	GetItemWRank	{J}
08017478	GetItemEffectivenessPtr	{J}
080172D8	GetItemStatBonusesPtr	{J}
080172F0	GetItemIconId	{J}
080174CC	GetItemWeaponEffect	{J}
080174E4	GetItemUseEffect	{J}
080174FC	GetItemCostPerUse	{J}
08017514	GetItemMaxCost	{J}
08017540	GetItemWExp	{J}
08017558	GetROMItemStructPtr	{J}
0801756C	ClearUnits	{J}
0801759C	ClearUnitStruct	{J}
080175C4	CopyUnitStruct	{J}
080175E0	GetNextFreeUnitStructPtr	{J}
08017618	GetNextFreePlayerUnitStruct	{J}
08017650	GetUnitFogViewRange	{J}
08017680	SetUnitNewStatus	{J}
0801769C	WriteUnitStatusDuration	{J}
080176AC	GetUnitSMSIndex	{J}
080176F0	UnitAddItem	{J}
08017714	UnitClearInventory	{J}
0801772C	RemoveUnitBlankItems	{J}
08017780	GetUnitItemCount	{J}
080177A0	UnitHasItem	{J}
080177DC	LoadUnits	{J}
08017834	HasClassWRank	{J}
0801786C	08017ac4	LoadUnit	{J}
08017A5C	StoreNewUnitFromCode	{J}
08017B18	CharFillInventoryFromCode	{J}
08017B54	LoadUnitStats	{J}
08017BDC	FixROMUnitStructPtr	{J}
08017C14	LoadUnitSupports	{J}
08017C40	AutolevelUnitWeaponRanks	{J}
08017CE4	IncreaseUnitStatsByLevelCount	{J}
08017E3C	AutolevelUnit	{J}
08017E7C	08018160	AutolevelRealistic	{J}
08017EDC	CheckForStatCaps	{J}
08017FB0	GetUnitByCharId	{J}
08017FEC	GetNonAllyUnitStructById	{J}
08018030	CanUnitRescue	{J}
08018060	UnitRescue	{J}
08018084	UpdateRescuingData	{J}
080180DC	UpdateRescueData	{J}
08018144	HandleAllegianceChange	{J}
080181B0	ApplyUnitMovement	{J}
08018370	SetupActiveUnit	{J}
080183E8	SetActiveUnit	{J}
08018454	MoveActiveUnit	{J}
08018670	SetAllUnitNotBackSprite	{J}
080186A8	ValidateUnitItem	{J}
080186CC	GetUnitAid	{J}
08018730	GetUnitMagBy2Range	{J}
0801876C	UnitHasMagicRank	{J}
0801883C	GetUnitUseFlags	{J}
080188EC	CanUnitMove	{J}
080189AC	IsPosMagicSealed	{J}
08018A1C	CanUnitNotUseMagic	{J}
08018A48	GetUnitLastItem	{J}
08018A60	GetMovCostTablePtr	{J}
08018AA4	GetClassStandingMapSpriteId	{J}
08018AC4	UpdatePrevDeployStates	{J}
08018B44	LoadUnitPrepScreenPositions	{J}
08018C5C	IsUnitSlotAvailable	{J}
08018DC8	ClearCutsceneUnits	{J}
08018E64	GetUnitCurrentHP	{J}
08018EA4	GetUnitMaxHP	{J}
08018EC4	GetUnitPower	{J}
08018EE4	GetUnitSkill	{J}
08018F24	GetUnitSpeed	{J}
08018F64	GetUnitDefense	{J}
08018F84	GetUnitResistance	{J}
08018FAC	GetUnitLuck	{J}
08018FCC	080192b8	GetUnitPortraitId	{J}
08018FEC	GetUnitMiniPortraitId	{J}
08019018	GetUnitLeader	{J}
08019040	SetUnitHP	{J}
0801907C	UnitTryHeal	{J}
080190C0	GetRescuingUnitNameId	{J}
080190EC	WriteStatusTextToRAM	{J}
08019108	GetUnitStruct	{J}
0801911C	GetROMClassStruct	{J}
0801913C	GetROMCharStruct	{J}
0801915C	UnitRemoveItem	{J}
08019174	CanUnitCrossTerrain	{J}
08019194	InitChapterMap	{J}
0801947C	SetupMapRowPointers	{J}
080194BC	ClearMapWith	{J}
08019584	LoadChapterMap	{J}
080195E4	LoadChapterMapGfx	{J}
0801967C	FlushTilesFromBuffer	{J}
0801973C	FlushTerrainData	{J}
080197CC	GetSomeTerrainToChangeAtSomePosition	{J}
080197F0	UpdateGameTileGfx	{J}
08019914	UpdateGameTilesGraphics	{J}
08019C78	UpdateUnitMapAndVision	{J}
08019E4C	UpdateTrapFogVision	{J}
08019E78	UpdateTrapHiddenStates	{J}
08019ECC	RefreshFogAndUnitMaps	{J}
08019F18	0801a240	GetTerrainNameString	{J}
08019F28	GetTerrainHealAmount	{J}
08019F38	GetTerrainSomething	{J}
08019FBC	RevertMapChangesById	{J}
0801A05C	FillMovementMapForUnit	{J}
0801A058	FillMovementMapForUnitAndMovement	{J}
0801A0D4	FillMovementMapForUnitPosition	{J}
0801A108	FillMovementRangeMapSomehow	{J}
0801A108	FillMovementMapSomehow	{J}
0801A168	FillMovementMapForUnitAt	{J}
0801A198	StoreMovCostTable	{J}
0801A1B8	FillMovementMap	{J}
0801A798	MapAddInRange	{J}
0801A89C	StoreR3ToMapSomething	{J}
0801A998	FillMapAttackRangeForUnit	{J}
0801B13C	FillRangeByRangeMask	{J}
0801B2F4	FillMapStaffRangeForUnit	{J}
0801B4E6	ApplyStuffToRangeMaps	{J}
0801B668	SetSubjectMap	{J}
0801b9a4	FillRangeMap	{J}
0801B6B0	GetCurrentMovCostTable	{J}
0801B718	Get8	{J}
0801B724	Loop6C_WaitForSelectPress	{J}
0801B80C	DebugMenu_MapIdle	{J}
0801B820	DebugMenu_MapEffect	{J}
0801BA20	DebugMapMenu_DisplayInfoIdle	{J}
0801BA6E	DebugMapMenu_DisplayInfoEffect	{J}
0801BA72	DebugMenu_WeatherDraw	{J}
0801BC1C	DebugMenu_WeatherIdle	{J}
0801BB94	DebugMenu_WeatherEffect	{J}
0801BB98	DebugMenu_ClearDraw	{J}
0801BBFC	DebugMenu_ClearIdle	{J}
0801BCA4	DebugMenu_ClearEffect	{J}
0801BCA8	DebugMenu_ErasedEffect	{J}
0801BD20	DEBUGONLY_Startup	{J}
0801DDA4	DebugMenu_FogDraw	{J}
0801BA1E	DebugMenu_FogIdle	{J}
0801C12C	DebugMenu_FogEffect	{J}
0801C13C	DebugMenu_GNightEffect	{J}
0801C14C	0801c4d0	DebugChargeMenu_Draw	{J}
0801C1F0	DebugChargeMenu_Idle	{J}
0801C4FC	ClearActionAndSave	{J}
0801C514	HandlePlayerCursorMovement	{J}
0801C5A8	PlayerPhase_MainLoop	{J}
0801C7D8	DisplayUnitEffectRange	{J}
0801C8E4	DisplayActiveUnitEffectRange	{J}
0801CCEC	_6CE_PLAYERPAHSE_PrepareAction	{J}
0801CEA8	TryMakeCantoUnit	{J}
0801CF64	RunPotentialWaitEvents	{J}
0801CF80	EnsureCameraOntoActiveUnitPosition	{J}
0801D0D4	PlayerPhase_ApplyUnitMovement	{J}
0801D180	GetUnitSelectionValueThing	{J}
0801D2B0	PlayerPhase_WaitForUnitMovement	{J}
0801D370	MakeMoveunitForActiveUnit	{J}
0801D3C0	ClearActiveUnit	{J}
0801D500	Load6CRangeDisplaySquareGfx	{J}
0801D550	Loop6C_MLVCHC	{J}
0801D590	Setup6CRangeDisplayGfx	{J}
0801D640	Loop6C_MoveLimitView	{J}
0801D6C4	DestructMoveLimitView	{J}
0801D6FC	DisplayMoveRangeGraphics	{J}
0801D730	HideMoveRangeGraphics	{J}
0801D808	Goto3IfPhaseHasNoAbleUnits	{J}
0801D838	GetSomeFacingDirection	{J}
0801D864	Make6CMOVEUNITForUnitBeingRescued	{J}
0801D8A0	Loop6C_KOIDO	{J}
0801D8E0	Make6CKOIDO	{J}
0801D934	Make6CKOIDOAMM	{J}
0801DA0C	Destruct6CBMXFADE	{J}
0801DA28	NewBMXFADE	{J}
0801DA8C	GetPlayerStartCursorPosition	{J}
0801DAE4	GetEnemyStartCursorPosition	{J}
0801DBC0	ADJUSTFROMXI_MoveCameraOnSomeUnit	{J}
0801DCF4	HandleNewItemGetFromDrop	{J}
0801DD94	SendToConvoyMenu_Draw	{J}
0801DDA0	MenuCommand_DrawExtraItem	{J}
0801DDE4	SendToConvoyMenu_NormalEffect	{J}
0801DFA8	FillWarpRangeMap	{J}
0801F164	ChangeActiveUnitFacing	{J}
080225C4	CommandEffectEndPlayerPhase	{J}
080226AC	Make6CE_Guide	{J}
08022700	EffectWait	{J}
08022710	GenericSelection_BackToUM	{J}
080227F4	GenericSelection_BackToUM_CamWait	{J}
0802286C	RescueUsability	{J}
080228A4	RescueEffect	{J}
080228C4	RescueSelection_OnSelect	{J}
080228D8	DropUsability	{J}
08022910	DropEffect	{J}
08022930	DropSelection_OnSelect	{J}
08022954	TakeUsability	{J}
080228A4	TakeEffect	{J}
080229BC	GiveUsability	{J}
080228A4	GiveEffect	{J}
08022A24	MakeUnitRescueTransferGraphics	{J}
08022A58	TakeSelection_OnSelect	{J}
08022AA8	GiveSelection_OnSelect	{J}
08022BF8	DisplayUnitStandingAttackRange	{J}
08022C60	HideMoveRangeGraphicsWrapper	{J}
080232B0	ItemCommandEffect	{J}
08023318	ItemSelectMenu_TextDraw	{J}
0802339C	ItemSelectMenu_Usability	{J}
080233EC	ItemSelectMenu_Effect	{J}
08023990	FillBallistaRange	{J}
08023A18	StaffCommandUsability	{J}
08023A90	StaffCommandEffect	{J}
08023B54	StaffItemSelect_Usability	{J}
08023B8C	StaffItemSelect_Effect	{J}
08023BCC	StaffItemSelect_TextDraw	{J}
08023BD8	StaffItemSelect_OnHover	{J}
08023E38	PickCommandUsability	{J}
08023F20	SupplyUsability	{J}
08024148	StealCommandUsability	{J}
08024198	StealCommandEffect	{J}
080241D4	StealTargetSelection_OnInit	{J}
080242BC	StealItemMenuCommand_Usability	{J}
08024300	StealItemMenuCommand_Draw	{J}
08024354	StealItemMenuCommand_Effect	{J}
080241D4	RescueSelection_OnConstruction	{J}
0802464C	RescueSelection_OnChange	{J}
08024670	DropSelection_OnConstruction	{J}
080241D4	TradeTargetSelection_OnInit	{J}
08024874	RideCommandUsability	{J}
080248D0	RideCommandEffect	{J}
0802495C	AttackCommandUsability	{J}
080249D8	AttackBallistaCommandUsability	{J}
08024C9C	GetPhaseAbleUnitCount	{J}
08024D3C	AreUnitsAllied	{J}
08024D54	IsSameAllegience	{J}
08024D6C	GetCurrentPhase	{J}
08024D80	IsNotEnemyPhaseMaybe	{J}
08024D98	GetPartyGoldAmount	{J}
08024DB4	SetPartyGoldAmount	{J}
08024DF0	ForEachUnitInRange	{J}
08024EC8	ForEachPosInRange	{J}
08024F20	ForEachAdjacentUnit	{J}
08024F54	ForEachAdjacentPosition	{J}
08024FE8	ForEachPosIn12Range	{J}
0802501C	ForEachUnitInMagBy2Range	{J}
0802506C	TryAddTrapsToTargetList	{J}
0802512C	AddUnitToTargetListIfNotAllied	{J}
08025164	MakeTargetListForWeapon	{J}
080251CC	TryAddUnitToTradeTargetList	{J}
08025280	MakeTradeTargetList	{J}
080252F4	TryAddUnitToRescueTargetList	{J}
08025364	MakeRescueTargetList	{J}
08025398	TryAddToDropTargetList	{J}
08025364	MakeDropTargetList	{J}
08025424	TryAddRescuedUnitToTakeTargetList	{J}
08025364	MakeTakeTargetList	{J}
080255F4	MakeTargetListForSupport	{J}
0802512C	AddUnitToTargetListIfAllied	{J}
080256D8	FillBallistaRangeMaybe	{J}
08025744	TryAddClosedDoorToTargetList	{J}
08025784	TryAddBridgeToTargetList	{J}
080257C4	MakeTargetListForDoorAndBridges	{J}
08025364	MakeTargetListForSteal	{J}
08025DCC	TryAddUnitToHealTargetList	{J}
08025364	MakeTargetListForAdjacentHeal	{J}
08025E54	MakeTargetListForRangedHeal	{J}
08025EA0	AddToTargetListIfNotAllied	{J}
08025EE8	MakeTargetListForFuckingNightmare	{J}
08025F3C	TryAddUnitToRestoreTargetList	{J}
08025364	MakeTargetListForRestore	{J}
08025FC0	TryAddUnitToBarrierTargetList	{J}
08025364	MakeTargetListForBarrier	{J}
08026044	TryAddUnitToRescueStaffTargetList	{J}
0802607C	MakeTargetListForRescueStaff	{J}
080260A4	TryAddUnitToSilenceTargetList	{J}
080260F0	TryAddUnitToSleepTargetList	{J}
0802613C	TryAddUnitToBerzerkTargetList	{J}
0802607C	MakeTargetListForSilence	{J}
0802607C	MakeTargetListForSleep	{J}
0802607C	MakeTargetListForBerserk	{J}
08026044	TryAddUnitToWarpTargetList	{J}
08025364	MakeTargetListForWarp	{J}
08025364	MakeTargetListForUnlock	{J}
080262A0	TryAddUnitToHammerneTargetList	{J}
08025364	MakeTargetListForHammerne	{J}
0802632C	MakeTargetListForLatona	{J}
08025364	MakeTargetListForMine	{J}
08025364	MakeTargetListForLightRune	{J}
08026558	TryAddUnitToDanceRingTargetList	{J}
08025364	MakeTargetListForDanceRing	{J}
080265CC	SetupMapSpritesPalettes	{J}
0802662C	SMS_ClearUsageTable	{J}
08026694	SMS_80266F0	{J}
08026720	SMS_SomethingGmapUnit	{J}
080267A0	SMS_RegisterUsage	{J}
0802686C	SomethingSMS_16x16_0	{J}
08026900	SomethingSMS_16x16	{J}
080269DC	SomethingSMS_16x32	{J}
08026ACC	SomethingSMS_32x32	{J}
08026ED0	SMS_FlushDirect	{J}
08026F38	SMS_FlushIndirect	{J}
080270E0	GetUnitSpritePaletteIndexWrapper	{J}
0802710C	GetUnitMapSpritePaletteIndex	{J}
08027144	SMS_UpdateFromGameData	{J}
08027310	SMS_GetNewInfoStruct	{J}
08027348	SMS_DisplayAllFromInfoStructs	{J}
080274D4	DisplayChapterTileMarker	{J}
0802758C	DisplayUnitAdditionalBlinkingIcons	{J}
08027EBC	SMS_DisplayOne	{J}
080280A0	HideUnitSMS	{J}
080280C4	ShowUnitSMS	{J}
080280D8	GetUnitStandingSpriteDataFlagThing	{J}
0802815C	GetROMUnitSupportCount	{J}
08028170	GetROMUnitSupportingId	{J}
08028188	GetUnitSupportingUnit	{J}
080281D0	GetSupportLevelBySupportIndex	{J}
080281F8	GetUnitTotalSupportLevels	{J}
08028224	AddSupportPoints	{J}
080282A4	CanUnitSupportCommandWith	{J}
08028320	GetUnitStartingSupportValue	{J}
0802833C	GetSupportDataIdForOtherUnit	{J}
080283C8	HandleSupportGains	{J}
080284C0	GetSupportBonusEntryPtr	{J}
080284E4	StoreAddedAffinityBonusesForSupportLevel	{J}
08028544	GetUnitSupportBonuses	{J}
08028720	CanUnitsStillSupportThisChapter	{J}
0802881C	CanUnitUseItem	{J}
08028E0C	ItemEffect_Call	{J}
08029010	IsGeneratedTargetListEmpty	{J}
08029024	CanUseHealingItem	{J}
08029048	CanUsePureWater	{J}
08029060	CanUseTorch	{J}
0802908C	CanUseAntidote	{J}
080290A4	CanUseChestKey	{J}
080290E0	CanUseDoorKey	{J}
080290F4	CanOpenBridge	{J}
08029108	CanUseLockpick	{J}
08029150	CanUsePromotionItem	{J}
080293B4	CanUseStatBooster	{J}
080294AC	CanUseJunaFruit	{J}
080294C4	EndItemEffectSelectionThing	{J}
080294F8	GenericStaffSelection_OnSelect	{J}
08029510	PrepareTargetSelectionForRescueStaff	{J}
08029550	SetupTargetSelectionForGenericStaff	{J}
08029590	WarpTargetPosSelect_Init	{J}
08029644	WarpTargetPosSelect_Loop	{J}
08029770	WarpTargetPosSelect_Confirm	{J}
080297AC	WarpTargetPosSelect_Cancel	{J}
080297E0	WarpTargetPosSelect_Destruct	{J}
080297F4	WarpTargetSelection_OnSelect	{J}
0802981C	SetupWarpTargetSelection	{J}
08029890	PrepareTargetSelectionForMineAndLightRune	{J}
080298E4	HammerneTargetSelection_OnSelect	{J}
08029944	SetupHammerneUseSelection	{J}
08029994	HammerneTargetSelection_OnChange	{J}
080299B8	HammerneTargetSelection_OnInit	{J}
08029944	PrepareTargetSelectionForHeal	{J}
08029944	PrepareTargetSelectionForRestoreStaff	{J}
08029944	PrepareTargetSelectionForOffensiveStaff	{J}
08029CB4	GenericSelection_DeleteBBAndBG	{J}
08029D24	TorchTargetPosSelect_Init	{J}
08029D7C	TorchTargetSelection_Loop	{J}
08029E64	NewTorchStaffSelection	{J}
08029E8C	CanUnitUseItemPrepScreen	{J}
0802A280	BATTLE_SaveFromBattle	{J}
0802A4F0	CopyUnitToBattleStruct	{J}
0802A5D4	CopyUnitToBattleStructRawStats	{J}
0802A60C	WriteBattleStructTerrainBonuses	{J}
0802A648	BattleSetupTerrainData	{J}
0802A69C	SetupBattleWeaponData	{J}
0802A884	SetupBattleBallistaWeaponData	{J}
0802A8C8	FillPreBattleStats	{J}
0802A914	FillBattleStats	{J}
0802A93C	BattleApplyMiscBonuses	{J}
0802A9B0	BattleLoadDefense	{J}
0802AA10	LoadRawDefense	{J}
0802AA28	BattleLoadAttack	{J}
0802AAE4	BattleLoadAS	{J}
0802AB1C	BattleLoadHit	{J}
0802AB54	BattleLoadAvoid	{J}
0802AB88	BattleLoadCrit	{J}
0802ABC4	BattleLoadDodge	{J}
0802ABD0	ComputeHit	{J}
0802AC00	ComputeCrit	{J}
0802AC68	ComputeLethalityChance	{J}
0802ACC4	BattleApplySRankBonuses	{J}
0802AD00	BattleComputeBuffStatus	{J}
0802AD3C	ComputeSpecialWeapons	{J}
0802AE00	ClearRounds	{J}
0802AE40	MakeBattle	{J}
0802AEEC	GetBattleUnitPointers	{J}
0802AF00	BattleCheckDoubling	{J}
0802AF88	MakeBattleRound	{J}
0802AFF0	GetBattleHitCount	{J}
0802B004	BattleCheckBrave	{J}
0802B03C	CheckForTriangleAttack	{J}
0802B134	UpdateBattleStats	{J}
0802B164	RollForSureShot	{J}
0802B1E8	RollForPierce	{J}
0802B258	RollForGreatShield	{J}
0802B2FC	RollForLethality	{J}
0802B328	NullifyBattleDamageIfUsingStone	{J}
0802958C	GenerateCurrentRoundData	{J}
0802B4CC	UpdateBattleTriangleAttackData	{J}
0802B554	CurrentRound_ComputeWeaponEffects	{J}
0802B784	MakeNextBattleHitRound	{J}
0802B8E8	GetStatIncrease	{J}
0802B90C	GetAutoleveledStat	{J}
0802B93C	CanUnitNotLevelUp	{J}
0802B970	CheckForLevelUp	{J}
0802BE6C	CheckForLevelUpCaps	{J}
0802BF70	SaveUnitsFromBattle	{J}
0802BFFC	GetBattleNewWExp	{J}
0802C0F8	BattleUnit_DidWRankGoUp	{J}
0802C134	SaveUnitFromBattle	{J}
0802C248	UpdateBallistaUsesFromBattle	{J}
0802C27C	NullSomeStuff	{J}
0802C4F0	HandleSomeExp	{J}
0802C570	GetBattleUnitStaffExp	{J}
0802C5D8	InstigatorAdd10Exp	{J}
0802C6A4	BattleReverseWTriangeEffect	{J}
0802C6F8	BattleApplyWeaponTriangle	{J}
0802C77C	DoSomeBattleWeaponStuff	{J}
0802C7FC	MakeSnagBattleTarget	{J}
0802C880	FillSnagBattleStats	{J}
0802C8BC	SaveSnagWallFromBattle	{J}
0802C94C	BeginBattleAnimations	{J}
0802CB54	SaveInstigatorFromBattle	{J}
0802CC14	GetStaffAccuracy	{J}
0802CDC0	IsCurrentBattleTriangleAttack	{J}
0802CDD4	DidWeaponBreak	{J}
0802CE00	CurrentRound_ComputeDamage	{J}
0802E100	ResetTraps	{J}
0802E128	GetTrapAt	{J}
0802E184	GetSpecificTrapAt	{J}
0802E1F0	AddTrap	{J}
0802E218	AddTrapExt	{J}
0802E234	RemoveTrap	{J}
0802E24C	AddFireTrap	{J}
0802E268	AddGasTrap	{J}
0802E288	AddArrowTrap	{J}
0802E2C0	AddTrap8	{J}
0802E2D0	AddTrap9	{J}
0802E2E0	AddSnagsAndWalls	{J}
0802E368	ApplyTrapMapChanges	{J}
0802E3A8	UpdateAllLightRunes	{J}
0802E3E4	GetTrapExt1At	{J}
0802E42C	GetMapChangesPointerById	{J}
0802E468	GetMapChangesIdAt	{J}
0802E4C4	ApplyMapChangesById	{J}
0802E530	AddMapChange	{J}
0802E544	UntriggerMapChange	{J}
0802E570	AreMapChangeTriggered	{J}
0802E598	HideIfUnderRoof	{J}
0802E628	AddToTargetListFromPos	{J}
0802E648	AddArrowTrapTargetsToTargetList	{J}
0802E774	MakeTargetListForTurnTrapDamage	{J}
0802E8E0	CountDownTraps	{J}
0802E908	ResetCounterForCountedDownTraps	{J}
0802E990	AddLightRune	{J}
0802E9C8	RemoveLightRune	{J}
0802E9F8	HandleTrapDecay	{J}
0802EA48	BattleSomethingTrapChangeTerrain	{J}
0802E3A8	NullAllLightRunesTerrain	{J}
0802EAC4	GetTrap	{J}
0802EAD0	ExecStandardHeal	{J}
0802EB58	ExecRestore	{J}
0802EC08	GetRescueStaffeePosition	{J}
0802EE30	ExecRescueStaff	{J}
0802EEE4	ExecWarpStaff	{J}
0802EF48	ExecStatusStaff	{J}
0802F080	ExecFortify	{J}
0802F1E0	ExecHammerne	{J}
0802F2A0	ExecSomeSelfHeal	{J}
0802FAD8	ExecTorchStaff	{J}
0802FB98	ActionStaffDoorChestUseItem	{J}
0802FF04	ActionPick	{J}
08030044	SetupGameVBlank6C_TileAnimations	{J}
08030088	GameVBlank6C_Destructor	{J}
08030094	GameVBlank6C_Loop	{J}
080300A0	SetupGameVBlank6C	{J}
080300D4	BlockGameGraphicsLogic	{J}
08030108	UnblockGameGraphicsLogic	{J}
08030144	SetupOAMSpliceForWeather	{J}
08030A84	SetupWeatherGraphics_Maybe	{J}
08030AF4	UpdateWeatherGraphics	{J}
08030BCC	SetupWeather	{J}
08030BE4	GetTextSpeed	{J}
08030D24	ResetGameState	{J}
08030D50	SetupChapter	{J}
080310C4	LoadGameCoreGfx2	{J}
08031108	MakeBMAPMAIN	{J}
08031430	GetTacticianNameStringPtr	{J}
0803144C	GetConvoyItemArray	{J}
08031454	ClearConvoyItems	{J}
08031478	ShrinkConvoyItemList	{J}
080314BC	GetConvoyItemCount	{J}
080314E0	AddItemToConvoy	{J}
08031530	GetConvoyItemSlot	{J}
08031568	HasConvoyAccess	{J}
08031610	InitUnitStack	{J}
0803162C	PushUnit	{J}
08031660	LoadPlayerUnitsFromUnitStack	{J}
08031660	LoadPlayerUnitsFromUnitStack2	{J}
080316E0	PrepareArenaStruct	{J}
080317C0	PrepareArena	{J}
080317DC	PrepareArena2	{J}
0803182C	GetClassBestWRankType	{J}
08031924	IsWeaponMagic	{J}
08031944	GetNearLevel	{J}
08031962	GetUnitArenaWeight	{J}
080319D0	LoadArenaOpponentStruct	{J}
08031B5C	PrepareBalancedArenaFight	{J}
08031CA4	AdjustArenaOpponentPower	{J}
08031F48	LoadRNStateFromActionStruct	{J}
08031F58	ApplyUnitAction	{J}
080320B0	ActionRescue	{J}
0803212C	ActionDrop	{J}
080321BC	ActionVisitAndSieze	{J}
080321E8	ActionCombat	{J}
08032290	ActionArena	{J}
080322A4	ActionDance	{J}
080322F4	ActionTalk	{J}
08032320	ActionSupport	{J}
080323C8	ActionSteal	{J}
080324A0	ActionSummon	{J}
080324A0	ActionSummonDK	{J}
080326C0	BATTLE_GOTO1_IfNobodyIsDead	{J}
08032700	DidUnitDie	{J}
08032714	BATTLE_ProbablyMakesTheDeadUnitDissapear	{J}
080327AC	BATTLE_DeleteLinkedMOVEUNIT	{J}
0803281C	BATTLE_HandleItemDrop	{J}
08033168	GetPlayerLeaderUnitId	{J}
0803365C	CanCharacterBePrepMoved	{J}
08033780	InitPrepScreenUnitsAndCamera	{J}
08033B20	SALLYCURSOR6C_StartUnitSwap	{J}
08033DDC	CallCursorShop	{J}
0803411C	ShrinkPlayerUnits	{J}
0803421C	CanUnitUseVisit	{J}
080342B0	CanUnitUseSeize	{J}
08034330	CanUnitUseAttack	{J}
08034378	CanActiveUnitUseRescue	{J}
08034394	CanActiveUnitUseTrade	{J}
080343B0	GetUnitCommandUseFlags	{J}
0803458C	GetChapterMapChangesPointer	{J}
080345B8	GetChapterEventDataPointer	{J}
0803460C	GetSomethingRelatedToCurrentDifficulty	{J}
080346B0	NewUnitInfoWindow	{J}
080346DC	UnitInfoWindow_PositionUnitName	{J}
08034744	UnitInfoWindow_DrawBase	{J}
080348DC	GetUnitInfoWindowX	{J}
08034B20	NewUnitInfoWindow_WithAllLines	{J}
08034D64	DrawHammerneUnitInfoWindow	{J}
0803510C	SetupUnitRescueWindow	{J}
08035610	NewBottomHelpText	{J}
08035848	DeleteEach6CBB	{J}
08036694	BattleForecase_SetupLabelText	{J}
0803676C	AddWeaponStatsAfterRound	{J}
080367A0	BKSEL_SetupHitAndSuchStats	{J}
08036E9C	BKSEL_InitGfx	{J}
08036F1C	BKSEL_Destructor	{J}
080373E4	NewBattleForecast	{J}
080376A8	GetPickTrapType	{J}
08037720	ExecTrap	{J}
080378D8	LoadTrapData	{J}
080379A8	LoadChapterBallistae	{J}
080379C8	AddGorgonEggTrap	{J}
08037A24	GetBallistaItemAt	{J}
08037A6C	GetSomeBallistaItemAt	{J}
08037A9C	AddBallista	{J}
08037ACC	RideBallista	{J}
08037B04	TryRemoveUnitFromBallista	{J}
08037B40	IsBallista	{J}
08037BA8	GetBallistaItemUses	{J}
08037BDC	GetCurrentPromotedLevelBonus	{J}
08037BFC	CanUnitSeize	{J}
08038334	PushGlobalTimer	{J}
08038348	PopGlobalTimer	{J}
08039800	Loop6C_E_CPORDER	{J}
08039A28	GetCurrentPhaseUnitCount	{J}
08039B34	CPORDER_End	{J}
08039B78	Call6C_E_CPDECIDE	{J}
08039C78	ClearSomeAIRelatedStruct	{J}
0803A0F4	ApplyAICombat2	{J}
0803A380	ApplyAICombat	{J}
0803A3D0	ApplyAIDKSummonAction	{J}
0803A408	ApplyAIPickAction	{J}
0803A55C	PrepareAIAction	{J}
0803B560	FillMovementAndRangeMapForItem	{J}
0803BFF4	SetupUnitInventoryAIFlags	{J}
0803C0B0	SetupUnitStatusStaffAIFlags	{J}
0803C0F8	SetupUnitHealStaffAIFlags	{J}
0803C144	SaveNumberOfAlliedUnitsIn0To8Range	{J}
0803C1E8	CharStoreAI	{J}
0803E5D0	UpdateAllPhaseHealingAIStatus	{J}
0803E628	UpdateUnitHealingAIStatus	{J}
0803E808	GetEscapePointStructThingMaybe	{J}
0803EC28	StoreItemAndGetUnitAttack	{J}
0804504C	NameSelect_DrawName	{J}
08045BB4	New6C_SIOMAIN2	{J}
0804EDFC	LoadOldUIPal	{J}
0804EDFC	LoadNewUIPal	{J}
0804EE5C	LoadOldUIImage	{J}
0804EE5C	LoadNewUIImage	{J}
0804EF40	WriteUIWindowTileMap	{J}
0804F098	ClearTileMapRect	{J}
0804F0EC	MakeUIWindowTileMap_BG0BG1	{J}
0804F8E0	LoadOldUIGfx	{J}
0804F924	NewMenu_DefaultAdjusted	{J}
0804F954	NewMenu_DefaultChild	{J}
0804F970	NewMenu_Default	{J}
0804F9C0	NewMenu_804EC34	{J}
0804FA24	NewMenu_BG0BG1	{J}
0804FA3C	NewMenu	{J}
0804FC34	EndMenu	{J}
0804FCAC	EndAllMenus	{J}
0804FCC4	Menu_CallDefinedConstructors	{J}
0804FCFC	Menu_Draw	{J}
0804FE54	Menu_DrawHoverThing	{J}
0804FED8	Menu_Idle	{J}
08050008	Menu_HandleDirectionInputs	{J}
080500E8	Menu_HandleSelectInputs	{J}
08050174	Menu_GetCursorGfxCurrentPosition	{J}
080501BC	MenuCommand_UsabilityAlways	{J}
080501C0	UsabilityGrayed	{J}
080501C4	UsabilityNever	{J}
080502F4	Menu_CallTextBox	{J}
08050380	MarkSomethingInMenu	{J}
080503C0	NewMenu_AndDoSomethingCommands	{J}
08050418	Menu_UpdateMovingCursorGfxPosition	{J}
0805046C	ClearMenuRelatedList	{J}
08050618	InitTargets	{J}
08050630	AddTarget	{J}
08050684	LinkTargets	{J}
080506CC	TargetSelection_GetRealCursorPosition	{J}
080506E0	TargetSelection_Loop	{J}
080507B0	NewTargetSelection	{J}
08050818	NewTargetSelection_Specialized	{J}
0805082C	EndTargetSelection	{J}
08050860	TargetSelection_HandleMoveInput	{J}
080508D8	TargetSelection_HandleSelectInput	{J}
08050970	GetFarthestTargetIndex	{J}
080509D0	LinkTargetsOrdered	{J}
08050A74	GetLinkedTargetList	{J}
08050A84	GetFirstTargetPointer	{J}
08050AA8	GetTarget	{J}
08050AD4	NewEkrBattleDeamon	{J}
08050B00	EndEkrBattleDeamon	{J}
08050B14	IsBattleDeamonActive	{J}
08050B30	ekrBattleDeamon_Destructor	{J}
08050B48	NewEkrBattle	{J}
08050BB4	InBattleMainRoutine	{J}
08050C58	MainUpdate_804FEE4	{J}
08050CD8	ekrBattle_Init	{J}
08050D74	ekrBattle_8050000	{J}
08050DC8	ekrBattle_8050054	{J}
08050E64	ekrBattle_80500F0	{J}
08050EA8	ekrBattle_8050134	{J}
08050ECC	ekrBattle_8050158	{J}
08050EE8	ekrBattle_8050174	{J}
08050F98	ekrBattle_8050224	{J}
08050FB8	ekrBattle_8050244	{J}
08051004	ekrBattle_8050290	{J}
08051024	ekrBattle_80502B0	{J}
08051078	ekrBattle_8050304	{J}
080510AC	ekrBattle_8050338	{J}
080510D4	ekrBattle_8050360	{J}
08051160	ekrBattle_80503EC	{J}
08051174	ekrBattle_8050400	{J}
080511B4	ekrBattle_8050440	{J}
080511E0	ekrBattle_805046C	{J}
08051320	ekrBattle_80505EC	{J}
08051334	ekrBattle_8050600	{J}
080513B8	ekrBattle_8050684	{J}
080513FC	ekrBattle_80506C8	{J}
08051624	ekrBattle_80508F0	{J}
08051674	ekrBattle_8050940	{J}
080516DC	ekrBattle_80509A8	{J}
080517B8	ekrBattle_8050A84	{J}
080517EC	ekrBattle_8050AB8	{J}
0805183C	ekrBattle_8050B08	{J}
08051968	ekrBattle_CheckForLevelup_8050C34	{J}
080519A0	ekrBattle_WaitForLevelup_8050C6C	{J}
080519C4	ekrBattle_MakePopups	{J}
080519DC	ekrBattle_WaitForPopup	{J}
08051A00	ekrBattle_8050CCC	{J}
08051A2C	ekrBattle_8050CF8	{J}
08051ABC	ekrBattle_8050D88	{J}
08051ADC	ekrBattle_8050DA8	{J}
08051B18	NewEkrLvlupFan	{J}
08051C2C	NewEkrGauge	{J}
08051EA0	EndEkrGauge	{J}
08051EB4	EkrGauge_8051180	{J}
08051EC4	EkrGauge_8051190	{J}
08051ED4	EkrGauge_80511A0	{J}
08051EE4	EkrGauge_80511B0	{J}
08051EF4	EkrGauge_80511C0	{J}
08051F04	EkrGauge_80511D0	{J}
08051F18	EkrGauge_80511E4	{J}
08051F2C	EkrGauge_80511F8	{J}
08051F3C	EkrGauge_8051208	{J}
08051F4C	EkrGauge_8051218	{J}
08051F5C	EkrGauge_8051228	{J}
080527BC	NewEkrDispUP	{J}
08052840	EkrDispUP_8051B48	{J}
080528A8	ekrDispUP_Loop	{J}
08054BF8	StartSpellBG_FLASH	{J}
080538A8	NewEfxStatusUnit	{J}
0805582C	DeleteEach6C_efxStatusUnit	{J}
08055C78	NewEfxSpellCast	{J}
08056108	SetSomethingSpellFxToTrue	{J}
08056114	SetSomethingSpellFxToFalse	{J}
08056120	ClearBG1Setup	{J}
08056130	ClearBG1	{J}
08056220	ThisMakesTheHPInSpellAnimGoAway	{J}
08056774	SomeImageStoringRoutine_SpellAnim	{J}
0805679C	SomePaletteStoringRoutine_SpellAnim	{J}
080567B8	SomeImageStoringRoutine_SpellAnim2	{J}
080567E0	SomePaletteStoringRoutine_SpellAnim2	{J}
08056920	GetAnimationStartFrameMaybe	{J}
08056B5C	BeginAnimsOnBattleAnimations	{J}
08056BF0	MainUpdate_8055C68	{J}
08056C64	NewEkrBattleStarting	{J}
08056C78	ekrBattleStarting_8055CF0	{J}
08056D7C	ekrBattleStarting_8055DF4	{J}
08056E88	ekrBattleStarting_8055F00	{J}
08056F28	ekrBattleStarting_8055FA0	{J}
08056F70	ekrBattleStarting_8055FE8	{J}
08056FAC	ekrBattleStarting_8056024	{J}
08057000	ekrBattleStarting_8056078	{J}
08057078	ekrBattleEnding_80560F0	{J}
080570F8	ekrBattleEnding_8056170	{J}
08057150	ekrBattleEnding_80561C8	{J}
080571B0	ekrBattleEnding_8056228	{J}
08057210	ekrBattleEnding_8056288	{J}
08057298	ekrBattleEnding_8056310	{J}
08057318	ekrBattleEnding_8056390	{J}
0805740C	ekrBattleEnding_8056484	{J}
08057CAC	NewEkrWindowAppear	{J}
08057D98	NewEkrNamewinAppear	{J}
08057F7C	PrepareBattleGraphicsMaybe	{J}
08058E44	GetSpellAnimId	{J}
08059678	GetBattleAnimationId	{J}
08059790	SomethingFilterBattleAnimId	{J}
080597E4	GetAllegienceId	{J}
0805983C	GetSomeAISRelatedIndexMaybeByID	{J}
080598BC	IsItemDisplayedInBattle	{J}
080599F8	BattleAIS_ExecCommands	{J}
0805A6B0	NewEkrChienCHR	{J}
0805A6E0	RegisterAISSheetGraphics	{J}
0805AF10	GetAISSubjectId	{J}
0805AF28	GetSomeBoolean	{J}
0805B058	GetCoreAIStruct	{J}
0805B0B4	GetSomeAISRelatedIndexMaybe	{J}
0805B764	NewEfxAnimeDrvProc	{J}
0805B798	ExecAllAIS	{J}
0805BE4C	BeginAnimsOnBattle_Arena	{J}
0805BE94	NewEkrTogiInitPROC	{J}
0805C01C	NewEkrTogiEndPROC	{J}
0805C0F0	NewEkrTogiColor	{J}
0805C124	EndEkrTogiColor	{J}
0805C170	StartSpellAnimation	{J}
0805CA20	StartSpellThing_MagicQuake	{J}
0805CA64	Loop6C_efxMagicQUAKE	{J}
0805CC2C	StartSpellAnimDummy	{J}
0805CC50	Loop6C_efxDummymagic	{J}
0805CCA4	StartSpellAnimHandAxe	{J}
0805D000	StartSpellAnimArrow	{J}
0805D18C	StartSpellAnimJavelin	{J}
0805D6D0	StartSpellAnimSong	{J}
0805D978	StartSpellAnimDance	{J}
0805E164	StartSpellAnimFireBreath	{J}
0805E488	StartSpellAnimIceBreath	{J}
0805E5D0	StartSpellAnimDarkBreath	{J}
0805E608	Loop6C_efxDarkbreath	{J}
0805E8D8	StartSpellAnimThunder	{J}
0805E914	Loop6C_efxThunder	{J}
0805EBD4	StartSpellAnimFire	{J}
0805EC18	StartSpellAnimElfire	{J}
0805EC5C	Loop6C_efxFire	{J}
0805EDC4	Loop6C_efxFireBG	{J}
0805EEF0	StartSubSpell_efxFireHITBG	{J}
0805EFD8	StartSubSpell_efxElfireBG	{J}
0805F0A4	StartSubSpell_efxElfireBGCOL	{J}
0805F130	StartSubSpell_efxElfireOBJ	{J}
0805DFC8	StartSpellAnimFimbulvetr	{J}
0805DFC8	StartSpellAnimNosferatu	{J}
08060490	Loop6C_efxResire	{J}
08060BE0	StartSpellAnimPurge	{J}
08060F84	StartSpellAnimDivine	{J}
08060FC0	DivineSfxLoop	{J}
0806138C	StartSpellAnimFenrir	{J}
08062124	StartSpellAnimHeal	{J}
08062258	StartSpellAnimMend	{J}
08062258	StartSpellAnimRecover	{J}
080634E0	StartSpellAnimSilence	{J}
080634E0	StartSpellAnimSleep	{J}
080631EC	StartSpellAnimHammerne	{J}
08063D14	StartSpellAnimBerserk	{J}
0805E8D8	StartSpellAnimShine	{J}
08064A74	StartSpellAnimLuna	{J}
08066524	StartSpellAnimAura	{J}
08067B94	StartSpellAnimIvaldi	{J}
08067BD0	Loop6C_efxIvaldi	{J}
08066CC0	StartSpellBG_IvaldiBG1	{J}
0806309E	Loop6C_efxIvaldiBG1	{J}
08067E38	StartSpellBG_IvaldiBG2	{J}
080630A6	Loop6C_efxIvaldiBG2	{J}
08067F04	StartSpellBG_IvaldiBG3	{J}
0805EF74	Loop6C_efxIvaldiBG3	{J}
08067FE4	StartSpellBG_IvaldiBG4	{J}
0806812C	PrepareSomeIvaldiParticleGraphics	{J}
0806814C	StartSpellOBJ_IvaldiFall	{J}
0806814C	StartSpellOBJ_IvaldiSideWash	{J}
0806830C	Loop6C_efxIvaldiOBJSideWash	{J}
08069804	StartSpellAnimStone	{J}
08069AC8	StartSpellAnimEvilEye	{J}
08069EAC	StartSpellAnimNaglfar	{J}
08069EE8	Loop6C_efxNaglfar	{J}
08065D8C	Loop6C_efxNaglfarBG	{J}
0806A218	Loop6C_efxNaglfarBG2	{J}
0806BBA0	StartSpellAnimCrimsonEye	{J}
080732A0	FillBGRect	{J}
08073E74	SomePlaySound_8071990	{J}
08073ED4	Loop6C_efxSoundSE	{J}
08074EBC	EkrClasschgFinished	{J}
08074EDC	EndEkrClasschg	{J}
08074EF0	NewEkrClassChg	{J}
080752A4	EndEfxStatusUnit	{J}
080759D4	DoesEkrLevelUpSomething	{J}
080759F4	EndEkrLevelUp	{J}
08075E70	NewEkrLevelup	{J}
08077394	NewEkrTriangle	{J}
08077F54	DoesBattlePopupExist	{J}
08077F70	DeleteAnimsOnPopup	{J}
08077FAC	MakeBattlePopupTileMapFromTSA	{J}
080780DC	DrawBattlePopup	{J}
08078338	Battle_MakePopups	{J}
0807848C	BattlePopup_Wait16Frames	{J}
080784A8	ekrPopup_DrawWRankUp	{J}
080784D0	ekrPopup_WaitWRankUp	{J}
080784A8	ekrPopup_DrawWRankUp2	{J}
08078534	ekrPopup_WaitWRankUp2	{J}
08078570	ekrPopup_DrawWpnBroke	{J}
08078534	ekrPopup_WaitWpnBroke	{J}
080785D4	ekrPopup_DrawWpnBroke2	{J}
080785FC	ekrPopup_WaitWpnBroke2	{J}
0807863C	ekrPopup_MarkEnd	{J}
08078750	BeginAnimsOnBattle_Hensei	{J}
0807878C	NewEkrHenseiInitPROC	{J}
0807A638	GetSpellAssocStructPtr	{J}
0807A66C	GetSpellAssocCharCount	{J}
0807A68C	GetSpellAssocAlt6CPointer	{J}
0807A69C	GetSpellAssocReturnBool	{J}
0807A6AC	GetSpellAssocFacing	{J}
0807A6BC	GetSpellAssocFlashColor	{J}
0807A710	GenerateMonsterLevel	{J}
0807A748	GenerateMonsterClass	{J}
0807A774	GenerateMonsterItems	{J}
0807A830	ResetMoveunitStructs	{J}
0807A84C	Make6CMOVEUNITForUnit	{J}
0807A888	MakeMOVEUNITForMapUnit	{J}
0807A908	MOVEUNIT6C_SetCameraFollow	{J}
0807A910	MOVEUNIT6C_UnsetCameraFollow	{J}
0807A918	Make6CMOVEUNITForUI	{J}
0807A964	NewMOVEUNIT	{J}
0807AAB8	MOVEUNIT6C_SetSpriteDirection	{J}
0807AAE0	MOVEUNIT6C_SetDefaultSpriteDirection	{J}
0807AB0C	_MOVEUNIT6C_SetDefaultFacingDirection	{J}
0807AB24	_MOVEUNIT6C_ChangeFutureMovement	{J}
0807AB44	DoesMoveunitExist	{J}
0807AB5C	IsThereAMovingMoveunit	{J}
0807ABB4	MOVEUNIT6C_ChangeFutureMovement	{J}
0807AC20	Init6C_89A2938	{J}
0807AC34	Call89A2938_PlaySound1	{J}
0807AC48	Call89A2938_PlaySound2	{J}
0807AC60	NewSoundStepPlay6C	{J}
0807ACAC	__MOVEUNIT6C_PlaySoundStepByClass	{J}
0807ADEE	Moveunit_ExecMoveCommand	{J}
0807AE28	DisplayFogThingMaybe	{J}
0807AE78	Call6C_89A2968	{J}
0807AF1C	Loop6C_89A2968_1	{J}
0807AFE0	Loop6C_89A2968_2	{J}
0807B010	Does6C_89A2968Exist	{J}
0807B028	MOVU_Call5_WaitForSomething	{J}
0807B044	MOVU_Call4_SetState2	{J}
0807B04C	MOVU_Call3_Wait	{J}
0807B074	MOVU_Call2_Moving	{J}
0807B180	MOVEUNIT6C_PlaySoundStepByClass	{J}
0807B444	_6CMOVEUNIT_Loop	{J}
0807B4A4	_6CMOVEUNIT_Destructor	{J}
0807B4B8	ClearMOVEUNITs	{J}
0807B4C8	EndMoveunitMaybe	{J}
0807B4D4	Delete6C__	{J}
0807B4F4	BlockAll6CMarked4	{J}
0807B500	UnblockAll6CMarked4	{J}
0807B580	IsSomeMOVEUNITRelatedStructAvailable	{J}
0807B5A4	ResetAllMoveunitAnims	{J}
0807B5E0	GetNextMoveunitEntryStruct	{J}
0807B70C	UpdateMOVEUNITGfx_Idle	{J}
0807B7B8	UpdateMOVEUNITGfx_Movement	{J}
0807B890	MOVEUNIT6C_GetMovementSpeed	{J}
0807B96C	GetMOVEUNITGraphicsBuffer	{J}
0807B988	GetMovingMapSpriteGfxPtrFromMOVEUNIT	{J}
0807B99C	MMS_GetROMTCS	{J}
0807B9B0	MOVEUNIT6C_807959C	{J}
0807BA2C	BlendTimer6C_MainLoop	{J}
0807BBE8	SetMOVEUNITField40To1	{J}
0807BBF8	MOVEUNIT6C_SetDisplayPos	{J}
0807BCC4	SetupSomeMoveunitAnim	{J}
0807BCF4	TCS_HaltAnim2	{J}
0807BD58	MOVEUNIT_Begin20FramesFastAnim	{J}
0807BD7C	TCS_HaltAnim	{J}
0807BF0C	SetAllMOVEUNITField44To1	{J}
0807BF24	SetMOVEUNITField44To1	{J}
0807BF2C	ChangeMOVEUNITDataMaybe	{J}
0807BFA4	GetMoveunitByIndex	{J}
0807BFCC	GetExistingMoveunitForUnit	{J}
0807C0DC	CopyEventMoveToBuffer	{J}
0807C144	ClearEventMoveBuffer	{J}
0807C270	MuCtr_SetupWithEventMoveBuffer	{J}
0807C410	MoveUnit_	{J}
0807C8DA	GetAdjustedPositionForNewUnit	{J}
0807CAE4	DisplayWpnBrokePopup	{J}
0807CB28	BattleUnit_ShouldDisplayWpnBroke	{J}
0807CB4C	DisplayWRankUpPopup	{J}
0807CB90	BattleUnit_ShouldDisplayWRankUp	{J}
0807CBB8	_InitFontForUIDefault	{J}
0807CBC4	MapAnim_Cleanup	{J}
0807CBF0	MapAnim_AdvanceBattleRound	{J}
0807CC4C	MapAnim_PrepareNextBattleRound	{J}
0807CCA8	MapAnim_DisplayRoundAnim	{J}
0807CCBC	MapAnim_ShowPoisonEffectIfAny	{J}
0807CCF8	MapAnim_MoveCameraOntoSubject	{J}
0807CD14	MapAnim_MoveCameraOntoTarget	{J}
0807CF54	MapAnim_CallBattleQuoteEvents	{J}
0807D028	PlaySoundIdA0	{J}
0807D060	New6C_SummonGfx_FromActionPos	{J}
0807D704	SetBattleAnimFacing	{J}
0807D7AC	SetupBattleMOVEUNITs	{J}
0807DA2C	BeginMapAnimForSteal	{J}
0807DA88	BeginMapAnimForSummon	{J}
0807DA88	BeginMapAnimForSummonDK	{J}
0807DB9C	BeginBattleMapAnims	{J}
0807DC1C	SetupMapAnimSpellData	{J}
0807DC48	SetupMapBattleAnim	{J}
0807DD00	GetFacingDirection	{J}
0807DF00	DeleteBattleAnimInfoThing	{J}
0807DF10	NewMapBattleInfoThing	{J}
0807EE68	MapAnim_BeginMISSAnim	{J}
0807EE68	MapAnim_BeginNODAMAGEAnim	{J}
0807EF20	MapAnim_BeginWallBreakAnim	{J}
0807EF6C	WallBreakAnim_Init	{J}
0807EFBC	NewMapPoisonEffect	{J}
0807F004	MapAnim_BeginPoisonAnim	{J}
0807FB70	NewMapAnimEffectAnimator	{J}
0807FDEC	New6C_SomethingFlashy	{J}
08080F48	GetSomeStatUp	{J}
08081070	GetSomeStatBase	{J}
08081954	NewBG0Shaker	{J}
08081968	BG0Shaker_Init	{J}
08081970	BG0Shaker_Loop	{J}
08081A00	LoadSparkGfx	{J}
08081B38	StartStarRotationEffect	{J}
08081B78	StartStarExplosionEffect	{J}
08081B98	StartStarImplosionEffect	{J}
0808306C	New6C_SummonGfx	{J}
080835A0	GetItemAnim6CCode	{J}
080835B8	MapAnim_AnimateSubjectIdle	{J}
080835B8	MapAnim_SubjectResetAnim	{J}
080835B8	MapAnim_BeginSubjectFastAnim	{J}
08083814	MapAnim_MoveSubjectsTowardsTarget	{J}
08083874	MapAnim_MoveSubjectsAwayFromTarget	{J}
080838D4	MapAnim_MoveCameraOnSubject	{J}
08083900	MapAnim_MoveCameraOnTarget	{J}
0808395C	MapAnim_BeginRoundSpecificAnims	{J}
08083C54	MapAnim_WaitForHPToEndChangingMaybe	{J}
08083C70	MapAnim_PoisonEffectOnTarget	{J}
080851B8	CallEventsFromBuffer	{J}
080851FC	CheckForEvents	{J}
08085260	CheckForNextEvents	{J}
080854E4	IsThereClosedChestAt	{J}
08085528	IsThereClosedDoorAt	{J}
08085610	CheckEventId3	{J}
08085640	GetCurrentChapterBallistaePtr	{J}
08085658	GetCurrentChapterBallistae2Ptr	{J}
08085680	GetChapterAllyUnitDataPointer	{J}
080857E8	ShouldCallBattleQuote	{J}
0808583C	CallBattleQuoteEventsIfAny	{J}
08085B6C	CheckAFEV	{J}
08085B9C	CheckTURN	{J}
08085BE4	CheckCHAR	{J}
08085C34	CheckCHARASM	{J}
08085C70	CheckLOCA	{J}
08085CB0	CheckVILL	{J}
08085CC4	CheckCHES	{J}
08085D00	CheckDOOR	{J}
08085D90	CheckSHOP	{J}
08085DEA	CheckAREA	{J}
08085F00	SetLocalEventId	Flag	{J}
08085F34	UnsetLocalEventId	{J}
08085F70	ClearLocalEvents	{J}
08085F88	CheckLocalEventId	{J}
08085FC8	SetGlobalEventId	{J}
08086000	UnsetGlobalEventId	{J}
08086094	CheckGlobalEventId	{J}
080860E8	GetGlobalEventIdStorage	{J}
080860F0	GetGlobalEventIdStorageSize	{J}
080860F4	GetLocalEventIdStorage	{J}
080860FC	GetLocalEventIdStorageSize	{J}
0808618C	TryCallSelectEvents_u1C	{J}
08086350	GetAvailableLocaCommandAt	{J}
08086604	CheckForWaitEvents	{J}
08086694	RunWaitEvents	{J}
080861E0	TryCallSelectEvents	{J}
08086918	GetBattleQuoteEntry	{J}
08086ACC	IsCharacterForceDeployed_	{J}
08086B24	IsSethLArachelMyrrhInnes	{J}
080871B4	AreAnyEnemyUnitDead	{J}
080871E8	GetDeadEnemyAmount	{J}
08087238	IsCharDeadAsNonPlayerUnit	{J}
08087750	ResetAllPlayerUnitState	{J}
08087C3C	SetEventId_0x84	{J}
08087C48	UnsetEventId_0x84	{J}
080886E0	HandleCh5xUnits_Start	{J}
08088730	HandleCh5xUnits_End	{J}
08088798	CallRouteSplitMenu	{J}
080887E0	MenuCommand_DrawRouteSplit	{J}
08088830	Command_EirikaMode	{J}
0808884C	Command_EphraimMode	{J}
08089354	DrawStatScreenBar	{J}
08089910	DrawUnitScreenSupportList	{J}
08089A00	DrawUnitWeaponRank	{J}
0808B3F0	Create6CRText	{J}
0808B6FC	Loop6C_8A00B20_UpdateOAMData	{J}
0808BB14	LoadDialogueBoxGfx	{J}
0808DEDC	GetCameraMovementSpeedMaybe	{J}
0808DFF8	Loop6CUI1_DisplayTransition	{J}
0808E170	Loop6CUI1_HideTransition	{J}
0808E75E	DrawMinimugBoxMaybe	{J}
0808E8CC	InitMinimugBoxMaybe	{J}
0808EFC4	Loop6CUI1_Hidden	{J}
0808F070	Loop6CUI1_Displayed	{J}
0808F198	Init6CUI2	{J}
0808F1C4	Loop6CUI2	{J}
0808F2C0	InitPlayerPhaseInterfaceMaybe	{J}
0808F438	New6CPPInterfaceConstructor	{J}
0808F44C	DeletePlayerPhaseInterface6Cs	{J}
0808F584	Init6CPI	{J}
0808F764	Loop16CPI	{J}
0808F9BC	Loop26CPI	{J}
0808FA04	Loop46CPI	{J}
0808FA64	__malloc_unlock_0	{J}
0808FA6C	Loop36CPI	{J}
0808FDCC	MinimalVBlankHandler	{J}
08090A38	NewChapterStatusScreen	{J}
080975B0	__malloc_unlock_1	{J}
080976D0	IsCharacterForceDeployed	{J}
0809773C	SomeLeftoverFunctionThatReturns0	{J}
08097740	IsUnitInCurrentRoster	{J}
08097A28	SortPlayerUnitsForPrepScreen	{J}
08097D18	EndBG3Slider_	{J}
08098968	NewPrepScreenTraineePromotionManager	{J}
0809897C	PrepScreenTraineePromotionManagerExists	{J}
08099968	Delete6CMenuScroll	{J}
0809997C	Make6CMenuScroll	{J}
0809A4BC	SomethingPrepListRelated	{J}
0809A674	CanUnitPrepScreenUse	{J}
0809F560	StoreConvoyWeaponIconGraphics	{J}
080A29F8	__malloc_unlock_2	{J}
080A776C	LoadSomeUnitStatThingUnlockIdk	{J}
080A77EC	SaveSomeUnitStatThingUnlockIdk	{J}
080A7918	GetSaveDataOffsetPointer	{J}
080A7AA8	GetSaveDataLocation	{J}
080A7B74	SaveLocalEventIndexes	{J}
080A7B94	SaveGlobalEventIndexes	{J}
080A7BB4	LoadLocalEventIds	{J}
080A7BB4	LoadGlobalEventIds	{J}
080A7C28	SaveConvoyItems	{J}
080A7CB0	LoadConvoyItems	{J}
080A81EC	SetSomeUnitStatThingUnlockMaybeIdk	{J}
080A82B0	__malloc_unlock_3	{J}
080A8C60	LoadBWLEntries	{J}
080A8C8C	LoadSomeTable	{J}
080A8CA8	SaveBWLEntries	{J}
080A8CCC	SaveChapterWinData	{J}
080A8CE0	GetChapterWinDataEntry	{J}
080A8D00	GetNextChapterWinDataEntryIndex	{J}
080A8D30	GetWonChapterCount	{J}
080A8D94	RegisterChapterTimeAndTurnCount	{J}
080A8E1C	GetGameTotalTurnCount	{J}
080A8E48	DoesThisChapterCount	{J}
080A8E8C	GetGameTotalTime	{J}
080A8ECC	GetGameTotalTurnCount2	{J}
080A90C8	BWL_AddWinOrLossIdk	{J}
080A9190	BWL_IncrementMoveValue	{J}
080A91D0	BWL_IncrementStatScreenViews	{J}
080A9210	BWL_IncrementDeployCountMaybe	{J}
080A9260	BWL_AddTilesMoved	{J}
080A92C0	BWL_AddExpGained	{J}
080A9320	StoreSomeUnitSetFlags	{J}
080A9478	BWL_AddFavoritismValue	{J}
080A9740	BWL_GetEntry	{J}
080A9778	Set0203EDB4	{J}
080A9784	Save0203EDB4	{J}
080A97A0	Load0203EDB4	{J}
080A9A28	SaveGame	{J}
080A9B40	LoadGame	{J}
080A9D54	SaveUnit	{J}
080AA1AC	LoadSavedUnit	{J}
080AA3F8	SaveRNGState_Maybe	{J}
080AA460	SaveSuspendedGame	{J}
080AA62C	LoadSuspendedGame	{J}
080AA828	PackUnitStructForSuspend	{J}
080AAB30	UnpackUnitStructFromSuspend	{J}
080AAD88	SaveTrapStructs	{J}
080ADA3C	Loop6C_savemenu	{J}
080AEFA4	Make6C_savemenu	{J}
080AEFFC	Make6C_savemenu2	{J}
080AF010	savemenu_SetDifficultyChoice	{J}
080AFDD4	New6C_savedraw	{J}
080B0E88	NewNewGameDifficultySelect	{J}
080B1D88	_CallDifferedLoop	{J}
080B1D98	Get6CDifferedLoop6C	{J}
080B1DBC	DeleteEach6CDifferedLoop	{J}
080B1DD8	Find6CDifferedLoop	{J}
080B2C08	FadeInOut_Init	{J}
080B2C1C	FadeIn_Loop	{J}
080B2C7C	FadeOut_Loop	{J}
080B2CC4	FadeInOut_DisableGfx	{J}
080B2D1C	FadeInExists	{J}
080B2D34	FadeOutExists	{J}
080B2D4C	NewFadeIn	{J}
080B2D70	NewFadeOut	{J}
080B7610	Make6C_opinfo	{J}
080B8CDC	Shop6C_GetPortraitIndex	{J}
080B8D68	MakeShopArmory	{J}
080B8D88	MakeShopVendor	{J}
080B8DC8	MakeShop	{J}
080BD8E0	WorldMap_Destruct	{J}
080BDC24	SetupGraphicSystemsForWorldMap	{J}
080BDE6C	DeployEveryUnit	{J}
080BE9D4	WorldMap_InitChapterTransition	{J}
080BEB4C	WorldMap_WaitForChapterIntroEvents	{J}
080BED9C	DoNothing	{J}
080BEEB8	EndWM	{J}
080BF178	NewWorldMap	{J}
080BF1C8	WorldMap_SetupChapterStuff	{J}
080BF268	CallChapterWMIntroEvents	{J}
080BF5B4	NewMapScreenVSynce	{J}
080BF5F4	MapScreen_OnDelete	{J}
080BF600	MapScreen_Init	{J}
080BFA40	NewMapScreen	{J}
080BFA6C	MMS_GetGfx	{J}
080BFA80	MMS_GetROMTCS2	{J}
080BFA94	GetMapUnitMMSGfxBuffer	{J}
080BFAA8	GmapUnit_Destruct	{J}
080BFAB4	GmapUnit_Init	{J}
080BFAC8	GmapUnit_Loop	{J}
080BFC04	GetPaletteIdForAllegience	{J}
080BFC20	NewMapUnit	{J}
080BFD3C	MapUnitC_DeleteGmapUnit	{J}
080BFD64	MapUnitC_SetPosition	{J}
080BFDB4	MapUnitC_SetTCSAnim	{J}
080BFE48	MapUnitC_SetTCSOAMIndex	{J}
080BFE68	MapUnitC_SetAllegienceColorIndex	{J}
080BFED4	MapUnitC_MarkSomething	{J}
080BFFD0	GmapUnitContainer_Destruct	{J}
080BFFF8	GmapUnitContainer_Init	{J}
080C0018	NewGmapUnitContainer	{J}
080C003C	GmapUnitFade_Destruct	{J}
080C0094	GmapUnitFade_Init	{J}
080C0178	GmapUnitFade_Loop	{J}
080C03E0	WMLoc_GetChapterId	{J}
080C0414	WMLoc_GetNextLocId	{J}
080C0548	GmapScreen2_Destruct	{J}
080C0554	GmapScreen2_Init	{J}
080C08C8	GmapCursor_Init	{J}
080C0918	GmapCursor_Destruct	{J}
080C0A08	NewGmapCursor	{J}
080C0F00	MapRoute_StartTransition	{J}
080C0FC8	MapRoute_EnableBGSyncs	{J}
080C0FFC	MapRoute_TransitionLoop	{J}
080C106C	MapRoute_TransitionEnd	{J}
080C10E0	MapRoute_BeginRouteTransition	{J}
080C1120	MapRoute_80BC2DC	{J}
080C11E8	NewMapRoute	{J}
080C16FC	SetupNewWMRoute	{J}
080C172C	WM_RemovePath	{J}
080C1E74	GetChapterThing	{J}
080C20B8	GetCharacterClassId	{J}
080C20F8	MapMUPrim_MakeUnitForChar	{J}
080C2180	MapMUPrim_MakeUnitForClass	{J}
080C21F4	MapMUPrim_RemoveLinkedMapUnit	{J}
080C29EC	MapMU_FillPrim	{J}
080C2A10	NewMapMU	{J}
080C2A24	MapMU_SetUnit	{J}
080C2B14	MapMU_RemoveUnit	{J}
080C2ED0	MapMU_SetUnitTCSOAMIndex	{J}
080C2EF0	MapMU_80BE108	{J}
080C3320	MapMU_SetUnitClass	{J}
080C333C	MapMU_SetUnitChar	{J}
080C42B4	WM_PutClassSprite	{J}
080C42E8	WM_PutCharSprite	{J}
080C431C	WM_RemoveUnit	{J}
080C4370	WM_DrawPath	{J}
080C4FC0	NewMapMuEntry	{J}
080C5628	GetWMCenteredCameraPosition	{J}
080C71D8	Make6C_Gmap_RM	{J}
080C7264	GetWMDisplayPosition	{J}
080CB684	AddSomeChild6C	{J}
080CB698	DeleteSome6C	{J}
080CB6AC	StorePaletteToBufferMaybe	{J}
080CB960	Initialize6CIntroSequence	{J}
080CBD9C	Until6C2AIs8Callback	{J}
080D1184	MakePromotionScreen	{J}
080D11B4	Make6C_PromotionMain	{J}
080D1620	PromotionInit_SetNullState	{J}
080D162C	PromotionInit_Loop	{J}
080D1A3C	Make6C_PromotionSub	{J}
080D2824	PromotionCommand_OnSelect	{J}
080D29C0	PromotionCommand_OnTextDraw	{J}
080D29FC	PromotionCommand_OnChange	{J}
080D2A34	Usability_ThirdPromotionOption	{J}
080D2AD8	Make6C_PromotionMenuSelect	{J}
080D6380	DivArm	{J}
080D63E0	SRAMLoader	{J}
080D6420	SRAMTransfer	{J}
080D6460	SaveChecker	{J}
080D64AC	StoreLoadRoutinesToRAM	{J}
080D6548	SRAMTransfer_WithCheck	{J}
080D8C5C	_cleanup_r	{J}
080D8C6C	_cleanup	{J}
080D920C	setlocale	{J}
080D9224	localeconv	{J}
080DA1A8	_ratio	{J}
080DA1F8	_mprec_log10	{J}
080DA35C	__sclose	{J}
080DA3E8	remap_handle	{J}
080DA4A4	get_errno	{J}
080DA4B8	error	{J}
080DA4CC	wrap	{J}
080DA938	isatty	{J}
080DA828	alarm	{J}
080DAAE8	__unpack_d	{J}
080DABC0	_fpadd_parts	{J}
080DB870	_fpadd_parts_0	{J}
08012EDC	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{U}
080131BC	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{J}
08013104	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{U}
08012FF4	changeTiles	void	void *src, void *dst, int width, int height	{U}
0805D0F4	loadArrowOBJ	void	void *AIS	{J}
0805C358	loadArrowOBJ	void	void *AIS	{U}
08054FA8	loadSpellCast	void	{U}
080563C0	suckBloodAnimation	void	int a1, int ifMiss	{J}
08055424	suckBloodAnimation	void	int a1, int ifMiss	{U}
0805AF2C	checkIfCritical	int	void *AIS	{J}
0805A188	checkIfCritical	int	void *AIS	{U}
0806ED0C	criticalAttackEffect	void	int a1	{J}
0806C9E8	criticalAttackEffect	void	int a1	{U}
0800FF68	eventCodeFunc_DF	int	struct context *parent	{U}
080AA518	loadIceCrystal	void	int a1	{U}
0806063C	loadResireBG2	void	int a1	{J}
0805D8B4	loadResireBG2	void	int a1	{U}
080605B0	loadResireBG	void	int a1, u8 ifMiss	{J}
0805F4B0	loadResireBG	void	int a1, u8 ifMiss	{U}
0805C1A4	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{J}
0805B400	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{U}
08060938	loadResireRST3	void	int a1, struct context *a2, u16 a3	{J}
0805F838	loadResireRST3	void	int a1, struct context *a2, u16 a3	{U}
0805C5D8	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{J}
0805B828	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{U}
0805C6EC	loadRestWINH1	void	int a1, int a2, u32 a3	{J}
0805B93C	loadRestWINH1	void	int a1, int a2, u32 a3	{U}
08061540	loadHazymoonBG1	void	void *AIS	{J}
08060440	loadHazymoonBG1	void	void *AIS	{U}
08060D90	loadHazymoonOBJ3	void	void *AIS	{J}
0805FC90	loadHazymoonOBJ3	void	void *AIS	{U}
080615b0	loadHazymoonBG2	void	void *AIS	{J}
080604B0	loadHazymoonBG2	void	void *AIS	{U}
08061614	loadHazymoonBG3	void	void *AIS	{J}
08060514	loadHazymoonBG3	void	void *AIS	{U}
080616E8	loadHazymoonOBJ2	void	void *AIS	{J}
080605E8	loadHazymoonOBJ2	void	void *AIS	{U}
0805A2B4	getTargetAIS	void	int a1	{U}
08053F10	loadFlashBG	{U}
0804f954	Show menu	void	MENUDEF	mazo	{J}
080864CD	Scenario Branch Selector Display	void	{U}
08037B64	Hero determination function	bool	{U}
08037bfc	Hero determination function	bool	{J}
0804ECB0	NewMenu Constructs Menu	6C	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=background BG index	r3=tile related thing? (stored to field 0x66)	{U}
0804EBE4	NewMenu_Default Constructs Menu	6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	E_Menu 6C pointer	r0=pointer to Menu Definition	{U}
0804EB98	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left
0804EBC8	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{U}
0804EC98	NewMenu_BG0BG1 Constructs Menu 6C, BG1 is background, BG0 is foreground	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=parent 6C	{U}
0804EF20	EndAllMenus Kills *all* the E_Menus	void	{U}
08025854	RunSkillLockPickPerform skill key unpacking	{J}
080258A4	RunSkillLockPickPerform skill key unpacking	{U}
080dc0dc	CallARM_FillTileRect	{J}
080dc0e4	TileMap_FillRect	{J}
080dc0f4	TileMap_CopyRect	{J}
085B9DD4	:085B9E13	&EVENT	Event"Support level has gone up"	{J}
085B9E14	:085B9E3B	&EVENT	Event"Fade in, fade out and talk"	{J}
085B9E3C	:085B9E9B	&EVENT	Event"Do you want to retreat?	{J}
085B9E9C	:085B9EE7	&EVENT	Event"Do you want to interrupt?	{J}
08037DF0	Start retreat processing called from event	{J}
08087640	Start interrupt process called from event	{J}
08591FF0	:0859202F	&EVENT	Event"Support level has gone up"	{U}
08592030	:08592057	&EVENT	Event"Fade in, fade out and talk"	{U}
08592058	:085920B7	&EVENT	Event"Do you want to retreat?	{U}
085920B8	:08592103	&EVENT	Event"Do you want to interrupt?	{U}
08037D58	Start retreat processing called from event	{U}
080B5D5C	Start interrupt process called from event	{U}
08088B08	StatusRMenu_StrengthGetter	{U}
08088BD4	StatusRMenu_02BlankGetter	{U}
08088C00	StatusRMenu_ClassGetter	{U}
08088A2C	StatusRMenu_10BlankGetter	{U}
08088B40	StatusRMenu_Item0Loop	{U}
08088A00	StatusRMenu_Item0Getter	{U}
08088BD4	StatusRMenu_Item3Getter	{U}
08088B94	StatusRMenu_Weapon0Getter	{U}
08022FDC	SeizeCommandUsability	{U}
08023020	SeizeCommandEffect	{U}
08022B30	AttackCommandEffect	{U}
08023B3C	DisplayUnitStandingStaff	{U}
08023B84	HideMoveRangeGraphicsWrapperByStaff	{U}
0802494C	ExitCommandUsability	{U}
08024980	ExitCommandEffect	{U}
08023158	PlayCommandUsability	{U}
080231D0	PlayOrDanceCommandEffect	{U}
08023194	DanceCommandEffect	{U}
080243D8	SummonCommandUsability	{U}
080244B8	SummonCommandEffect	{U}
080244FC	SummonsDemonKingCommandUsability	{U}
08024548	SummonsDemonKingCommandEffect	{U}
08023EB4	PickCommandEffect	{U}
08023C80	TalkCommandUsability	{U}
08023CC4	TalkCommandEffect	{U}
08023D14	SupportCommandUsability	{U}
08023D64	SupportCommandEffect	{U}
08023040	VisitCommandUsability	{U}
080230C0	VisitCommandEffect	{U}
08023E1C	ChestCommandUsability	{U}
08023E58	ChestCommandEffect	{U}
08023DB4	DoorCommandUsability	{U}
08023DF4	DoorCommandEffect	{U}
08023FD8	ArmoryCommandUsability	{U}
08024014	ArmoryCommandEffect	{U}
08024034	VendorCommandUsability	{U}
08024070	VendorCommandEffect	{U}
08024090	SecretCommandUsability	{U}
080240CC	SecretCommandEffect	{U}
080240EC	ArenaCommandUsability	{U}
08024144	ArenaCommandEffect	{U}
080232B8	ItemCommandUsability	{U}
08022F34	TradeCommandUsability	{U}
08022F88	TradeCommandEffect	{U}
08023FB8	SupplyCommandEffect	{U}
0802260C	UnitCommandEffect	{U}
08022650	CommandEffect	{U}
08022660	GuideCommandUsability	{U}
08022678	GuideCommandPaint	{U}
08024C40	RecordCommandEffect	{U}
08024CBC	RecordCommandUsability	{U}
08022628	OptionCommandEffect	{U}
08024CCC	RetreatCommandUsability	{U}
08024CE0	RetreatCommandEffect	{U}
080225B0	SuspendCommandUsability	{U}
080225D0	SuspendCommandEffect	{U}
0801C030	DebugFileEraseCommandEffect	{U}
0801C4B4	DebugReleaseEntryCommandEffect	{U}
0801C39C	DebugContinueChpCommandUsability	{U}
0801C3B4	DebugContinueChpCommandEffect	{U}
0801C328	DebugManualContCommandUsability	{U}
0801C340	DebugManualContCommandEffect	{U}
0801C370	DebugInitializeFileCommandEffect	{U}
0801C308	DebugManualSaveCommandUsability	{U}
0801C30C	DebugManualSaveCommandEffect	{U}
080238E0	YesCommandEffect	{U}
080234FC	NoCommandEffect	{U}
0802367C	UseCommandUsability	{U}
08023770	UseCommandEffect	{U}
080236F4	EquipCommandUsability	{U}
080237F8	EquipCommandEffect	{U}
08022F34	TradeCommandUsability	{U}
08023838	TradeCommandEffect	{U}
0802373C	DiscardCommandUsability	{U}
0802386C	DiscardCommandEffect	{U}
08023498	ItemSelectMenuOnHover	{U}
080234A8	ItemSelectMenuHide	{U}
08023C68	StaffItemSelectHide	{U}
08023498	SendToConvoyMenuOnHover	{U}
080234A8	SendToConvoyMenuHide	{U}
0801E1FC	SendToConvoyMenuEffect	{U}
0801E294	SendToConvoyMenuIdel	{U}
0808AD94	StatusRMenu_StrengthGetter	{J}
0808AE60	StatusRMenu_02BlankGetter	{J}
0808AE8C	StatusRMenu_ClassGetter	{J}
0808ACB8	StatusRMenu_10BlankGetter	{J}
0808ADCC	StatusRMenu_Item0Loop	{J}
0808AC8C	StatusRMenu_Item0Getter	{J}
0808AE60	StatusRMenu_Item3Getter	{J}
0808AE20	StatusRMenu_Weapon0Getter	{J}
08022FA4	SeizeCommandUsability	{J}
08022FE8	SeizeCommandEffect	{J}
08022AF8	AttackCommandEffect	{J}
08023B00	DisplayUnitStandingStaff	{J}
08023B48	HideMoveRangeGraphicsWrapperByStaff	{J}
080248FC	ExitCommandUsability	{J}
08024930	ExitCommandEffect	{J}
08023120	PlayCommandUsability	{J}
08023198	PlayOrDanceCommandEffect	{J}
0802315C	DanceCommandEffect	{J}
08024390	SummonCommandUsability	{J}
080244AC	SummonsDemonKingCommandUsability	{J}
080244F8	SummonsDemonKingCommandEffect	{J}
08023E70	PickCommandEffect	{J}
08023C44	TalkCommandUsability	{J}
08023C88	TalkCommandEffect	{J}
08023CD4	SupportCommandUsability	{J}
08023C88	SupportCommandEffect	{J}
08023008	VisitCommandUsability	{J}
08023088	VisitCommandEffect	{J}
08023DD8	ChestCommandUsability	{J}
08023E14	ChestCommandEffect	{J}
08023D70	DoorCommandUsability	{J}
08023DB0	DoorCommandEffect	{J}
08023F94	ArmoryCommandUsability	{J}
08023FD0	ArmoryCommandEffect	{J}
08023FF0	VendorCommandUsability	{J}
0802402C	VendorCommandEffect	{J}
0802404C	SecretCommandUsability	{J}
08024088	SecretCommandEffect	{J}
080240A8	ArenaCommandUsability	{J}
08024100	ArenaCommandEffect	{J}
08023280	ItemCommandUsability	{J}
08022EFC	TradeCommandUsability	{J}
080228A0	TradeCommandEffect	{J}
08023F74	SupplyCommandEffect	{J}
080225D8	UnitCommandEffect	{J}
0802261C	CommandEffect	{J}
0802262C	GuideCommandUsability	{J}
08022644	GuideCommandPaint	{J}
08024BF0	RecordCommandEffect	{J}
08024C6C	RecordCommandUsability	{J}
080225F4	OptionCommandEffect	{J}
08024C7C	RetreatCommandUsability	{J}
08024C90	RetreatCommandEffect	{J}
0802257C	SuspendCommandUsability	{J}
0802259C	SuspendCommandEffect	{J}
0801BCC0	DebugFileEraseCommandEffect	{J}
0801C130	DebugReleaseEntryCommandEffect	{J}
0801C02C	DebugContinueChpCommandUsability	{J}
0801C044	DebugContinueChpCommandEffect	{J}
0801BFB8	DebugManualContCommandUsability	{J}
0801BFD0	DebugManualContCommandEffect	{J}
0801C000	DebugInitializeFileCommandEffect	{J}
0801BF98	DebugManualSaveCommandUsability	{J}
0801BF9C	DebugManualSaveCommandEffect	{J}
080238A4	YesCommandEffect	{J}
080234C0	NoCommandEffect	{J}
08023640	UseCommandUsability	{J}
08023734	UseCommandEffect	{J}
080236B8	EquipCommandUsability	{J}
080237BC	EquipCommandEffect	{J}
08022EFC	TradeCommandUsability	{J}
080237FC	TradeCommandEffect	{J}
08023700	DiscardCommandUsability	{J}
08023830	DiscardCommandEffect	{J}
0802345C	ItemSelectMenuOnHover	{J}
0802346C	ItemSelectMenuHide	{J}
08023C2C	StaffItemSelectHide	{J}
0802345C	SendToConvoyMenuOnHover	{J}
0802346C	SendToConvoyMenuHide	{J}
0801DE58	SendToConvoyMenuEffect	{J}
0801DEF0	SendToConvoyMenuIdel	{J}
08074050	Command85	{J}
08071B6C	Command85	{U}
089F7D20	:08A0BD1E	It seems to be the deformed tile animation data	{J}
089875AC	:0899B5AA	It seems to be the deformed tile animation data	{U}
08C258A4	&LZ77	unreleased works Empty Battle Sheet	{J}
08CBFAD8	&LZ77	unreleased works Empty Battle Sheet	{J}
08CBFEA8	&LZ77	unreleased works Empty Battle Sheet	{J}
08D2B5F0	&LZ77	unreleased works Empty Battle Sheet	{J}
08D2D080	&LZ77	unreleased works Empty Battle Sheet	{J}
08D7E080	&LZ77	unreleased works Empty Battle Sheet	{J}
08D7E450	&LZ77	unreleased works Empty Battle Sheet	{J}
08D914A0	&LZ77	unreleased works Empty Battle Sheet	{J}
08DCB4B0	&LZ77	unreleased works Empty Battle Sheet	{J}
08DD2CA8	&LZ77	unreleased works Skeleton Spear	{J}
08DD8604	&LZ77	unreleased works Standby motion of skeleton bow	{J}
08DFB6D8	&LZ77	unreleased works Empty Battle Sheet	{J}
08AA5344	&LZ77	Something's bar	{J}
08AA5380	&LZ77	menu	{J}
08AD1540	&LZ77	Something like a fireball	{J}
08B1D11C	&LZ77	triangle	{J}
08B1D954	&LZ77	A number	{J}
08B30274	&LZ77	Something using TSA	{J}
08B35820	&LZ77	Something using TSA	{J}
08B3B014	&LZ77	Something round	{J}
08BBB340	&LZ77	Guide letters	{J}
08BBB3E4	&LZ77	Status of the lower left of the screen etc.	{J}
08BBD3F8	&LZ77	Relief at the start of chapter	{J}
08A588C0	&LZ77	To Be Continued	{J}
08780574	&LZ77	Something's effect	{J}
087819D0	&LZ77	TSA of some effect	{J}
08C258A4	&LZ77	unreleased works Empty Battle Sheet	{U}
08CBFAD8	&LZ77	unreleased works Empty Battle Sheet	{U}
08CBFEA8	&LZ77	unreleased works Empty Battle Sheet	{U}
08D2B5F0	&LZ77	unreleased works Empty Battle Sheet	{U}
08D2D080	&LZ77	unreleased works Empty Battle Sheet	{U}
08D7E080	&LZ77	unreleased works Empty Battle Sheet	{U}
08D7E450	&LZ77	unreleased works Empty Battle Sheet	{U}
08D914A0	&LZ77	unreleased works Empty Battle Sheet	{U}
08DCB4B0	&LZ77	unreleased works Empty Battle Sheet	{U}
08DD2CA8	&LZ77	unreleased works Skeleton Spear	{U}
08DD8604	&LZ77	unreleased works Standby motion of skeleton bow	{U}
08DFB6D8	&LZ77	unreleased works Empty Battle Sheet	{U}
08A97E88	&LZ77	triangle	{U}
08A84B00	&LZ77	unreleased works Empty data of chapter title	{J}
08A10FE0	&LZ77	unreleased works Empty data of chapter title	{U}
085776F0	:08577EEF	Font image for debugging	{J}
08587A40	:0858823F	Font image for debugging	{U}
080DC43C	:080DC52B	Portrait TSA(FE8Only)	{J}
080D77FC	:080D78EB	Portrait TSA(FE8Only)	{U}
08FFF006	:08FFF7FF	NAZO C00009FF	{U}
0801964C	LoadChapterMapPaletteOnly	{J}
08030B90	LoadTitleAnimations2Only	{J}
08019974	LoadChapterMapPaletteOnly	{U}
08030C40	LoadTitleAnimations2Only	{U}
0804E98C	Draws the little highlight thing for menus	r0=BG Index to draw on	 r1=Unknown	r2=(Tile)x	r3=(Tile)y	[sp:0]=Width	{U}
0804EA08	Removes the little highlight thing for menus	r0=BG Index to draw on	r1=Unknown	r2=(Tile)x	r3=(Tile)y	[sp:0]=Width	{U}
0804F718	Draws the little highlight thing for menus	r0=BG Index to draw on	 r1=Unknown	r2=(Tile)x	r3=(Tile)y	[sp:0]=Width	{J}
0804F794	Removes the little highlight thing for menus	r0=BG Index to draw on	r1=Unknown	r2=(Tile)x	r3=(Tile)y	[sp:0]=Width	{J}
0815BDDC	:0815D48B	mask_point HUFFMAN TREE	{U}
0814B194	:0814D08B	mask_point HUFFMAN TREE	{J}
080816DC	StartLevelUpGrowthStatusAnimation	{J}
0807F39C	StartLevelUpGrowthStatusAnimation	{U}
08076654	EndLevelUpGrowthStatusAnimation	{J}
080741CC	EndLevelUpGrowthStatusAnimation	{U}
085B9EE8	&EVENT	EreignisGameOver	{J}
08592104	&EVENT	EreignisGameOver	{U}
