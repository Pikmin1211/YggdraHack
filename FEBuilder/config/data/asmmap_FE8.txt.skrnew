080B9DEC	売り値を求める関数	RET=売値	r0=個数 << 8 + アイテムID	{J}
080B5268	売り値を求める関数	RET=売値	r0=個数 << 8 + アイテムID	{U}
0800D340	イベント命令を動作させる関数	r0=イベント命令ポインタ:POINTER_EVENT	r1=引数?1-3	{J}
0800D07C	イベント命令を動作させる関数	r0=イベント命令ポインタ:POINTER_EVENT	r1=引数?1-3	{U}
080860A8	フラグを立てる関数	r0=立てるフラグ:FLAG	{J}
08083D80	フラグを立てる関数	r0=立てるフラグ:FLAG	{U}
080860bc	フラグを下す関数	r0=下すフラグ:FLAG	{J}
08083D94	フラグを下す関数	r0=下すフラグ:FLAG	{U}
080860D0	フラグ状態確認関数	RET=結果BOOL	r0=確認するフラグ:FLAG	{J}
08083DA8	フラグ状態確認関数	RET=結果BOOL	r0=確認するフラグ:FLAG	{U}
0800D548	文字列番号の会話を表示する関数	r0=文字列番号:TEXT	{J}
0800D284	文字列番号の会話を表示する関数	r0=文字列番号:TEXT	{U}
080d4ef4	効果音を鳴らす関数	r0=鳴らしたい音番号:SOUND	{J}
080D01FC	効果音を鳴らす関数	r0=鳴らしたい音番号:SOUND	{U}
0802cb70	経験値+10する関数	r0=経験値を付与するユニット:UNIT	{J}
0802CC38	経験値+10する関数	r0=経験値を付与するユニット:UNIT	{U}
08034520	マップ番号から、マップ設定のアドレスを返す関数	RET=マップ設定のアドレス	r0=調べたいマップID:MAPCHAPTER	{J}
08034618	マップ番号から、マップ設定のアドレスを返す関数	RET=マップ設定のアドレス	r0=調べたいマップID:MAPCHAPTER	{U}
080a8d94	クリアターンを書き込む関数	r0=202bcec固定?	{J}
080A4350	クリアターンを書き込む関数	{U}
08002c30	6C Structスクリプトロード	r0=6C Structアドレス:6CSTRUCT	r1=不明	{J}
08002CE0	6C Structスクリプトロード	r0=6C Structアドレス:6CSTRUCT	r1=不明	{U}
08080D68	パレット読込	r0=パレットアドレス:PAL	r1=転送先	r2=サイズ(0x20で全部)	{J}
08080DB8	パレット読込	r0=パレットアドレス:PAL	r1=転送先	r2=サイズ(0x20で全部)	{U}
08013008	LZ77圧縮されているデータの解凍AutoCopyOrDecompressImageToVRAM	r0=圧縮データ	r1=解凍場所	{J}
08012f50	LZ77圧縮されているデータの解凍AutoCopyOrDecompressImageToVRAM	r0=圧縮データ	r1=解凍場所	{U}
080dc0dc	無圧縮TSA読込	r0=不明	r1=無圧縮TSA	r2=不明	r3=不明	{J}
080D7498	無圧縮TSA読込	r0=不明	r1=無圧縮TSA	r2=不明	r3=不明	{U}
08008914	会話@0080@0005で参照できるところに数字を書く	r0=表示したい数字	{J}
08008A18	会話@0080@0005で参照できるところに数字を書く	r0=表示したい数字	{U}
08002424	BGMを切り替える(最上位)	r0=BGM番号:MUSIC	r1=不明	{J}
080024D4	BGMを切り替える(最上位)	r0=BGM番号:MUSIC	r1=不明	{U}
080023C8	BGMを切り替える(現在のBGMを加味する)	r0=BGM番号:MUSIC	r1=不明	r2=不明	{J}
08002478	BGMを切り替える(現在のBGMを加味する)	r0=BGM番号:MUSIC	r1=不明	r2=不明	{U}
08002398	BGMを切り替える(低レイヤ)	r0=BGM番号:MUSIC	{J}
08002448	BGMを切り替える(低レイヤ)	r0=BGM番号:MUSIC	{U}
08002434 	BGMを切り替える(別命令 その1)	r0=BGM番号:MUSIC	{J}
080024E4	BGMを切り替える(別命令 その1)	r0=BGM番号:MUSIC	{U}
08073f38	BGMを切り替える(別命令 その2)	r0=BGM番号:MUSIC	{J}
08071A54	BGMを切り替える(別命令 その2)	r0=BGM番号:MUSIC	{U}
08002938	BGMを切り替える(別命令 その3)	r0=BGM番号:MUSIC	r1=謎	r2=謎	{J}
080029E8	BGMを切り替える(別命令 その3)	r0=BGM番号:MUSIC	r1=謎	r2=謎	{U}
0800290c	BGMを切り替える(別命令 その4)	r0=BGM番号:MUSIC	r1=謎	{J}
080029BC	BGMを切り替える(別命令 その4)	r0=BGM番号:MUSIC	r1=謎	{U}
08002af4	文字列処理 (anti-huffmanターゲット1)	{J}
08002BA4	文字列処理 (anti-huffmanターゲット1)	{U}
08003054	6CStructの実行に関係する処理	{J}
08003104	6CStructの実行に関係する処理	{U}
080040fa	不明文字のハート文字	{J}
08003f76	不明文字のハート文字	{J}
0800e9e0	画像をロードする		r0=NAZO	r1=CG	r2=NAZO	{J}
0800E7D0	画像をロードする		r0=NAZO	r1=CG	r2=NAZO	{U}
080bb17c	10分割されたCGをロード	{J}
080B65F8	10分割されたCGをロード	{U}
080bdcdc	ワールドマップ　塔と城のアイコン取得	{J}
080B8E14	ワールドマップ　塔と城のアイコン取得	{U}
08016dfc	盗むアイテム判定	{J}
08017054	盗むアイテム判定	{U}
080197f0	マップチップの読込	{J}
08019B18	マップチップの読込	{U}
08034548	ステージマップのアドレスを調べる	mapdata	{J}
08034640	ステージマップのアドレスを調べる	mapdata	{U}
0808b9c0	章タイトル画像の読込	{J}
08025b44	盗むメニューを出すかどうかの判定	{J}
08025BA0	盗むメニューを出すかどうかの判定	{U}
080c9630	イベント スタッフロール	{J}
080C4878	イベント スタッフロール	{U}
080c9398	ED挿絵のロード 1枚目	{J}
080C45E0	ED挿絵のロード 1枚目	{U}
080c9a18	OPの字幕 その1	{J}
080C4C60	OPの字幕 その1	{U}
080c9b0c	OPの字幕 その2	{J}
080C4D54	OPの字幕 その2	{U}
080ca4c4	タイトル画面の画像読込	{J}
080C56F4	タイトル画面の画像読込	{U}
080ca69c	タイトル画面の演出	{J}
080C58CC	タイトル画面の演出	{U}
080d24ec	見習いCCのセリフを取得	{J}
080CD7FC	見習いCCのセリフを取得	{U}
0801729c	アイテムの情報をロード   NAZO	ITEMPACK r0=耐久回数<<8|アイテムID 例:鉄の剣 耐久:46 == 2e01	{J}
080174F4	アイテムの情報をロード   NAZO	ITEMPACK r0=耐久回数<<8|アイテムID 例:鉄の剣 耐久:46 == 2e01	{U}
080162e8	アイテムIDから耐久度を取得する	ITEMPACK 耐久回数<<8|アイテムID 例:鉄の剣 耐久:46 == 2e01	r0=アイテムID	{J}
08016540	アイテムIDから耐久度を取得する	ITEMPACK 耐久回数<<8|アイテムID 例:鉄の剣 耐久:46 == 2e01	r0=アイテムID	{U}
080319D0	闘技場の対戦相手の情報を読み込む	{J}
08031abc	闘技場の武器決定ルーチン	{J}
08031B70	闘技場の武器決定ルーチン	{U}
08031800	闘技場の武器補正?	{J}
080318B4	闘技場の武器補正?	{U}
08031B0C	闘技場の武器のランクアップ	{J}
08031BC0	闘技場の武器のランクアップ	{U}
0203A8F9	闘技場の一時データ	{J}
0203A8F0	闘技場の一時データ	{U}
03007d7c	闘技場の相手の武器(決定されたデータ)	{J}
0807ee68	戦闘時のMISSという文字を取得する	{J}
0807eec4	戦闘時のNO DAMAGEという文字を取得する	{J}
0807CB24	戦闘時のMISSという文字を取得する	{J}
0807CB24	戦闘時のNO DAMAGEという文字を取得する	{J}

080d6A4C	vsprintf	{J}
080D2F7C	vsprintf	{U}
08088830	エイリーク編(ヴェルニ出現後)に切り替え	{J}
0808884c	エフラム編に切り替え	{J}
02024CC2	キーが押さ続けているかどうか。押されていない=0x0C 押され続けている間 0x02からカウントアップする？	{J}
02024CC4	キーを押している間、キーコード(ビット)を格納 A:0x0100 B:0x0200 セレクト:0x0400 スタート:0x0800 右:0x10 00 左:0x2000 上:0x4000 下:0x8000 L:0x0001 R:0x0002	{J}
02024CC6	02024CC4と同一だが更新周期が短い	{J}
02024CCA	キーを押している間、キーコードを格納 02024CC4と同一	{J}
02024CCC	最後に押されたキーコードを永続的に格納	{J}
02029D8C	カーソルx座標 画面上でのx座標	{J}
02029D8E	カーソルy座標 画面上でのy座標	{J}
02024E5C	BGM関係の領域	{J}
02024E60	BGM番号	{J}
02024E62	BGM再生状態フラグ	{J}
02024E63	BGMフラグ?	{J}
0202BCEC	ステージの領域	{J}
0202BCF0	ステージの領域	{U}
0202BCF4	所持金	{J}
0202BCF8	所持金	{U}
0202BCF9	霧の濃さ	{J}
0202BD01	霧の濃さ	{U}
0202BCFA	マップID	{J}
0202BD02	マップID	{U}
0202BCFB	フェイズ 0=自軍,0x40=友軍,0x80=敵軍	{J}
0202BD02	フェイズ 0=自軍,0x40=友軍,0x80=敵軍	{U}
0202BCFC	ターン数	{J}
0202BD03	ターン数	{U}
0202BD00	設定フラグ	{J}
0202BD02	マップカーソルX軸	{U}
0202BD03	マップカーソルY軸	{U}
0202BD04	章の状態	0x10=進撃準備 0x40=ハードモード	{U}
0202BD05	天気	{U}

0202BD07	編指定 序盤=0x1,A編=0x2,F編=0x3	{J}
0202BD0B	編指定 序盤=0x1,A編=0x2,F編=0x3	{U}
0202BD2C	CONFIGの設定 カーソル等	{J}
0202BD2D	CONFIGの設定 効果音	{J}
0202BD2E	CONFIGの設定 アニメ設定 難易度	{J}
08031450	輸送隊の中身へのポインタ	{J}
08031524	輸送隊の中身へのポインタ	{U}

0203A8EC	味方の1人目のデータがどこにあるか示すポインタ	{J}
0203ABEC	操作キャラのデータへのポインタ	{J}
0300007C	価格などの数字 文章中の @0080@0005 で取得できる数字	{J}
030004B0	データ イベント命令40050000XXXXXXXXで詰まれる数字	{J}
030004B8	データ イベント命令40050000XXXXXXXXで詰まれる数字	{U}
030004B4	データ イベント命令40050100XXXXXXXXで詰まれる数字	{J}
030004BC	データ イベント命令40050100XXXXXXXXで詰まれる数字	{U}
030004B8	データ イベント命令40050200XXXXXXXXで詰まれる数字	{J}
030004C0	データ イベント命令40050200XXXXXXXXで詰まれる数字	{U}
03001C78	実行中のイベントアドレス?(開始イベントを除く)	{J}
03001C80	実行中のイベントアドレス?(開始イベントを除く)	{U}
0202B6A8	最後に表示した文字列ID	{J}
0202B6AC	最後に表示した文字列ID	{U}
03004df0	操作キャラのワークメモリへのポインタ	{J}
03004E50	操作キャラのワークメモリへのポインタ	{U}
0808941c	ステータス1パラメータ	{J}
08087184	ステータス1パラメータ	{U}
080896ec	ステータス2所持アイテム	{J}
08087484	ステータス2所持アイテム	{U}
08089ac4	ステータス3武器レベル	{J}
0808784C	ステータス3武器レベル	{U}
0808ac2c	Rメニューの設定	{J}
080889A0	Rメニューの設定	{U}
080890bc	ステータス画面文字描画	{J}
08086E00	ステータス画面文字描画	{U}


//thank you Tiki
//BIOS ARM(not thumb)
080D6364	ArcTan2	{J}
080D166C	ArcTan2	{U}
080D6368	BgAffineSet	{J}
080D1670	BgAffineSet	{U}
080D636C	CPUFastSet	{J}
080D1674	CPUFastSet	{U}
080D6370	CPUSet	{J}
080D1678	CPUSet	{U}
080D6374	Div	{J}
080D167C	Div	{U}
080D637C	Mod	{J}
080D1684	Mod	{U}
080D638C	HuffUnComp	{J}
080D168C	HuffUnComp	{U}
080D6390	LZ77UnCompVram	{J}
080D1690	LZ77UnCompVram	{U}
080D6394	LZ77UnCompWram	{J}
080D1694	LZ77UnCompWram	{U}
080D6398	MultiBoot	{J}
080D1698	MultiBoot	{U}
080D63A0	ObjAffineSet	{J}
080D16A0	ObjAffineSet	{U}
080D63A4	RLUnCompVram	{J}
080D16A4	RLUnCompVram	{U}
080D16A8	RLUnCompWram	{U}
080D63C4	SoundBiasReset	{J}
080D16C8	SoundBiasReset	{U}
080D63CC	SoundBiasSet	{J}
080D16D0	SoundBiasSet	{U}
080D63D4	Sqrt	{J}
080D16D8	Sqrt	{U}
080D63D8	VBlankIntrWait	{J}
080D16DC	VBlankIntrWait	{U}

// Spell Anmations
//thumb
//08056BC9	NoneSpellAnimation	void	int a1	{J}
//08056C41	ThrowingAxeSpellAnimation	void	int a1	{J}
//	08056F98	ArrowSpellAnimation	void	int a1	{J}
//	08057120	Javelin1SpellAnimation	void	int a1	{J}
//0805717C	Javelin2SpellAnimation	void	int a1	{J}
//080571D8	Javelin3SpellAnimation	void	int a1	{J}
//08057234	Javelin4SpellAnimation	void	int a1	{J}
//08057290	Javelin5SpellAnimation	void	int a1	{J}
//080572EC	Javelin6SpellAnimation	void	int a1	{J}
//08057348	Javelin7SpellAnimation	void	int a1	{J}
//080573A4	Javelin8SpellAnimation	void	int a1	{J}
//08057400	Javelin9SpellAnimation	void	int a1	{J}
//0805745C	Javelin10SpellAnimation	void	int a1	{J}
//080574B8	Javelin11SpellAnimation	void	int a1	{J}
//08057664	DancePlay1SpellAnimation	void	int a1	{J}
//08057924	DancePlay2SpellAnimation	void	int a1	{J}
//08057A6C	BalistaArrowSpellAnimation	void	int a1	{J}
//08057C24	ExaccusWaveSpellAnimation	void	int a1	{J}
//08057F84	SoSFireSpellAnimation	void	int a1	{J}
//08058120	FlametongueSpellAnimation	void	int a1	{J}
//0805843C	FaHolyDragonStoneSpellAnimation	void	int a1	{J}
//08058584	IdunDarkDragonStoneSpellAnimation	void	int a1	{J}
//08058B28	FireSpellAnimation	void	int a1	{J}
//08058B6C	ElfireSpellAnimation	void	int a1	{J}
//0805ABD8	ForblazeSpellAnimation	void	int a1	{J}
//0805882C	ThunderSpellAnimation	void	int a1	{J}
//0805979C	BoltingSpellAnimation	void	int a1	{J}
//08059138	FimbulvetrSpellAnimation	void	int a1	{J}
//08059BF0	AircaliburSpellAnimation	void	int a1	{J}
//08059BF4	FluxSpellAnimation	void	int a1	{J}
//0805A090	NosferatuSpellAnimation	void	int a1	{J}
//0805A60C	LightningSpellAnimation	void	int a1	{J}
//0805A838	PurgeSpellAnimation	void	int a1	{J}
//0805BA78	AureolaSpellAnimation	void	int a1	{J}
//0805B678	DivineSpellAnimation	void	int a1	{J}
//0805C3D4	ApocalypseSpellAnimation	void	int a1	{J}
//0805C3D8	EclipseSpellAnimation	void	int a1	{J}
//0805CA38	FenrirSpellAnimation	void	int a1	{J}
//0805D1D8	HealSpellAnimation	void	int a1	{J}
//0805D328	MendSpellAnimation	void	int a1	{J}
//0805D4CC	RecoverSpellAnimation	void	int a1	{J}
//0805D670	PhysicSpellAnimation	void	int a1	{J}
//0805DEC0	FortifySpellAnimation	void	int a1	{J}
//0805DEF0	FortifyGreenSpellAnimation	void	int a1	{J}
//0805E3B0	RestoreSpellAnimation	void	int a1	{J}
//0805E650	SilenceSpellAnimation	void	int a1	{J}
//0805E8E8	SleepSpellAnimation	void	int a1	{J}
//0805EC08	HammerneSpellAnimation	void	int a1	{J}
//0805EE84	BerserkSpellAnimation	void	int a1	{J}
//0805F48C	BarrierSpellAnimation	void	int a1	{J}
//0805F6F8	ShineSpellAnimation	void	int a1	{J}
//0805FBE8	LunaSpellAnimation	void	int a1	{J}
//080605A4	ExcaliburSpellAnimation	void	int a1	{J}
//08060E70	GespenstSpellAnimation	void	int a1	{J}
//080615C4	AuraSpellAnimation	void	int a1	{J}
//08061BE0	LuceSpellAnimation	void	int a1	{J}
//08062350	ErishkigalAnimation	void	int a1	{J}
//08062AAC	FillaMight1SpellAnimation	void	int a1	{J}
//08062AE8	NinisGraceSpellAnimation	void	int a1	{J}
//08062B24	ThorIreSpellAnimation	void	int a1	{J}
//08062B60	SetLitanySpellAnimation	void	int a1	{J}

// Spell Animation Engine
//arm
//8002BCC	SpellCallBack	void *funcSequence, signed int callNum	{J}
//804EC74	ScrollScreen	int a1, unsigned __int16 a2	{J}
//80689D0	PlaySFX		int SFXID, int a2, int a3, int a4	{J}
//80017E8	memClear2K	void	void *mem, int num	{J}
//8001188	LCDIOMapSync	{J}
//8001320	GetBGnCNTBufferAddr	u16*	u16 *result	{J}
//80016C4	BGMapBGPaletteSync	void	{J}
//8000FD4	SetBGMapSyncFlag	void	u8 flag	{J}
//8000FF0	EnableBGMapSync	void	u8 n	{J}
//8001034	EnableBGPaletteSync	void	{J}
//8001048	DisablePaletteSync	void	{J}
//800105C	OutputToBGPaletteBuffer	void	void *src, signed int paletteOffset, signed int len	{J}
//80010CC	OutputToBGPaletteBufferWithAlpha	void	_WORD *src, signed int paletteOffset, int len, int alpha	{J}
//	8003054	TileTransferInfoSync	void	{J}
//	8002EB8	TileTransferInfoClear	void	{J}
//	8002F54	TileTransferInfoAdd	void	void *src, void *dst, int len	{J}
//	8002FD8	TileIntializeInfoAdd	void	void *src, void *dst, int len	{J}
//	8003214	OAM1BufferSync	void	{J}
//	80031BC	OAM2BufferSync void	{J}
//	8003108	OAMBufferSyncInfoInitialize	void	int SpriteNum1	{J}
//	80031A4	GetSpriteNum1	int	{J}
//	8003264	SetOBJAttribute	void	int OBJIndex, __int16 Attribute0, __int16 Attribute1, __int16 Attribute2, __int16 RSParameter	{J}
8012F94	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{J}
8012EDC	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{U}
80131BC	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{J}
8013104	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{U}
80130AC	changeTiles	void	void *src, void *dst, int width, int height	{J}
8012FF4	changeTiles	void	void *src, void *dst, int width, int height	{U}
//	80C0C28	writeTemplateTSA	_WORD	_WORD *TSABufferInWRAM, _WORD *TSATemplate, __int16 TSABaseValue	{J}
8005330	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{J}
8005428	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{U}
//	8001D64	setBGnPosition	void	unsigned __int16 n, __int16 x, __int16 y	{J}

805D0F4	loadArrowOBJ	void	void *AIS	{J}
805C358	loadArrowOBJ	void	void *AIS	{U}
8055C78	loadSpellCast	void	{J}
8054FA8	loadSpellCast	void	{U}
8056220	reduceHPBar	void	void *targetAIS, bool ifMiss	{J}
8055278	reduceHPBar	void	void *targetAIS, bool ifMiss	{U}
80563C0	suckBloodAnimation	void	int a1, int ifMiss	{J}
8055424	suckBloodAnimation	void	int a1, int ifMiss	{U}
805AF2C	checkIfCritical	int	void *AIS	{J}
805A188	checkIfCritical	int	void *AIS	{U}
806ED0C	criticalAttackEffect	void	int a1	{J}
806C9E8	criticalAttackEffect	void	int a1	{U}
//	8062E9C	normalAttackEffect	void	int a1	{J}
//	8068500	playHitSound	int	void *AIS	{J}
80100CC	eventCodeFunc_DF	int	struct context *parent	{J}
800FF68	eventCodeFunc_DF	int	struct context *parent	{U}
80AEFFC	loadIceCrystal	void	int a1	{J}
80AA518	loadIceCrystal	void	int a1	{U}
//	8C11370	efxResire	{J}
//	8C11388	efxResireBG	{J}
//	8C113B8	efxResireBG2	{J}
//	8C11568	efxResireRST	{J}
806063C	loadResireBG2	void	int a1	{J}
805D8B4	loadResireBG2	void	int a1	{U}
80605B0	loadResireBG	void	int a1, u8 ifMiss	{J}
805F4B0	loadResireBG	void	int a1, u8 ifMiss	{U}
805C1A4	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{J}
805B400	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{U}
8060938	loadResireRST3	void	int a1, struct context *a2, u16 a3	{J}
805F838	loadResireRST3	void	int a1, struct context *a2, u16 a3	{U}
//	8C108A0	efxRestWINH	{J}
805C5D8	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{J}
805B828	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{U}
805C6EC	loadRestWINH1	void	int a1, int a2, u32 a3	{J}
805B93C	loadRestWINH1	void	int a1, int a2, u32 a3	{U}
//	8C11FA4	efxHazymoon	{J}
//	8C11FBC	efxHazymoonBG	{J}
//	8C120AC	efxHazymoonOBJ2	{J}
//	8C120F4	efxHazymoonOBJ3	{J}
//	8C12124	efxHazymoonOBJ3RND	{J}
8061540	loadHazymoonBG1	void	void *AIS	{J}
8060440	loadHazymoonBG1	void	void *AIS	{U}
8060D90	loadHazymoonOBJ3	void	void *AIS	{J}
805FC90	loadHazymoonOBJ3	void	void *AIS	{U}
80615b0	loadHazymoonBG2	void	void *AIS	{J}
80604B0	loadHazymoonBG2	void	void *AIS	{U}
8061614	loadHazymoonBG3	void	void *AIS	{J}
8060514	loadHazymoonBG3	void	void *AIS	{U}
80616E8	loadHazymoonOBJ2	void	void *AIS	{J}
80605E8	loadHazymoonOBJ2	void	void *AIS	{U}
//	8000BB8	geneateRN65536	int	{J}
//	8080DDC	geneateRN100	int	{J}
//	8000E08	geneateRNRange	int	int range	{J}
805B058	getTargetAIS	void	int a1	{J}
805A2B4	getTargetAIS	void	int a1	{U}
8054BF8	loadFlashBG	{J}
8053F10	loadFlashBG	{U}
804f954	メニューを表示	void	MENUDEF	mazo	{J}
8088798	シナリオ分岐選択子表示	void	{J}
804ebc8	メニューを表示	void	MENUDEF	mazo	{U}
80864CD	シナリオ分岐選択子表示	void	{U}
8037B64	主人公判定関数	bool	{U}
8037bfc	主人公判定関数	bool	{J}

//https://doc.feuniverse.us/stan より
804FA3C	NewMenu Constructs Menu	6C	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=background BG index	r3=tile related thing? (stored to field 0x66)	{J}
804ECB0	NewMenu Constructs Menu	6C	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=background BG index	r3=tile related thing? (stored to field 0x66)	{U}
804F970	NewMenu_Default Constructs Menu	6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	E_Menu 6C pointer	r0=pointer to Menu Definition	{J}
804EBE4	NewMenu_Default Constructs Menu	6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	E_Menu 6C pointer	r0=pointer to Menu Definition	{U}
804F924	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left
	r3=X tile position of menu of the right	{J}
804EB98	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left
	r3=X tile position of menu of the right	{U}
804F954	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{J}
804EBC8	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{U}
804FA24	NewMenu_BG0BG1 Constructs Menu 6C, BG1 is background, BG0 is foreground	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=parent 6C	{J}
804EC98	NewMenu_BG0BG1 Constructs Menu 6C, BG1 is background, BG0 is foreground	E_Menu 6C pointer	r0=pointer to Menu Definition	r1=geometry	r2=parent 6C	{U}
804FCAC	EndAllMenus Kills *all* the E_Menus	void	{J}
804EF20	EndAllMenus Kills *all* the E_Menus	void	{U}

//from https://doc.feuniverse.us/static/stan/EventEngineCalls.txt
080851FC	CheckForEvents Event Check Buffer Pointer for first callable event (0 if none)	r0=Initial Event Check Buffer	{J}
08082EC4	CheckForEvents Event Check Buffer Pointer for first callable event (0 if none)	r0=Initial Event Check Buffer	{U}
080851B8	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{J}
08082E80	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{U}
089E84F4	Event Check Table	{U}

//from https://doc.feuniverse.us/static/stan/RealSaveData.txt
080A7AA8	GetSaveDataLocation	{J}
080A3064	GetSaveDataLocation	{U}
080A7B74	SaveLocalEventIndexes	{J}
080A3130	SaveLocalEventIndexes	{U}
080A7B74	SaveGlobalEventIndexes	{J}
080A3150	SaveGlobalEventIndexes	{U}
080A7BB4	LoadLocalEventIds	{J}
080A3170	LoadLocalEventIds	{U}
080A7BDC	LoadGlobalEventIds	{J}
080A3198	LoadGlobalEventIds	{U}
080A7C28	SaveConvoyItems	{J}
080A31E4	SaveConvoyItems	{U}
080A7CB0	LoadConvoyItems	{J}
080A326C	LoadConvoyItems	{U}
080A9A28	SaveGame	{J}
080A5010	SaveGame	{U}
080A9B40	LoadGame	{J}
080A5128	LoadGame	{U}
080A9D54	SaveUnit     	void	r0=Unit	r1=Target SRAM	{J}
080A533C	SaveUnit     	void	r0=Unit	r1=Target SRAM	{U}
080AA1AC	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{J}
080A5794	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{U}

//from https://doc.feuniverse.us/static/stan/SuspendSaveData.txt
080A5A48	SAVE_MOTHEFUCKING_GAME	{U}

//from https://doc.feuniverse.us/static/stan/TrigoTables.txt
080DC1DC	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{J}
080D759C	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{U}
080DC15C	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{J}
080D751C	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{U}

//from https://doc.feuniverse.us/static/stan/TCSNotes.txt
0800916C	TCS_New Creates a new TCS	TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{J}
0800927C	TCS_New Creates a new TCS	TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{U}
08009194	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{J}
080092A4	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{U}
080091AC	TCS_Update Updates TCS Logic and Graphics	bool	r0=TCS	r1=display x	r2=display y	{J}
080092BC	TCS_Update Updates TCS Logic and Graphics	bool	r0=TCS	r1=display x	r2=display y	{U}
08009408	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{J}
08009518	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{U}
08009438	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{J}
08009548	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{U}
08009150	TCS_ClearAll	{J}
08009260	TCS_ClearAll	{U}
080091D4	TCS_RegisterGraphics	{J}
080092E4	TCS_RegisterGraphics	{U}
08009230	TCS_Exec	{J}
08009340	TCS_Exec	{U}
08009320	TCS_QueueRotScaleData	{J}
08009430	TCS_QueueRotScaleData	{U}
08009458	TCS_QueueTileGfx	{J}
08009568	TCS_QueueTileGfx	{U}
08009564	TCS_Load	{J}
08009674	TCS_Load	{U}
08009588	TCS_ExecOneFrame	{J}
08009698	TCS_ExecOneFrame	{U}
080095A8	TCS_Init	{J}
080096B8	TCS_Init	{U}
080095E0	TCS_Alloc	{J}
080096F0	TCS_Alloc	{U}

//from https://doc.feuniverse.us/static/stan/RangeMoveDisplayNotes.txt
0801D6FC	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{J}
0801DA98	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{U}
0801D730	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{J}
0801DACC	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{U}

//from https://doc.feuniverse.us/static/stan/TrapNotes%20(With%20Map%20Changes!).txt
//0203A614	is the start of the trap data array size: 0x200 bytes (0x40 entries max)	{U}
@TrapEntry@00	byte	x pos
@TrapEntry@01	byte	y pos
@TrapEntry@02	byte	trap type id	0=Nothing (unused entry) 1=Ballista 2=Wall/Snag 3=Map Change (yes those are actually traps) 4=Fire Trap 5=Gas Trap 6=Map Change too? game supports them but idk where it might be used 7=Arrow Trap 8=? (used?) 9=? (used?) A=Light from Torch Staff B=Mine C=Gorgon Egg? (needs investigating as to in which circumstances) D=Light Rune
@TrapEntry@03	byte	ext1
@TrapEntry@04	byte	ext2
@TrapEntry@05	byte	ext3
@TrapEntry@06	byte	ext4
@TrapEntry@07	byte	ext5

0203A614	@TrapEntry	Trap0	{U}
0203A61C	@TrapEntry	Trap1	{U}
0203A624	@TrapEntry	Trap2	{U}
0203A62C	@TrapEntry	Trap3	{U}
0203A634	@TrapEntry	Trap4	{U}
0203A63C	@TrapEntry	Trap5	{U}
0203A644	@TrapEntry	Trap6	{U}
0203A64C	@TrapEntry	Trap7	{U}
0203A654	@TrapEntry	Trap8	{U}
0203A65C	@TrapEntry	Trap9	{U}
0203A664	@TrapEntry	Trap10	{U}
0203A66C	@TrapEntry	Trap11	{U}
0203A674	@TrapEntry	Trap12	{U}
0203A67C	@TrapEntry	Trap13	{U}
0203A684	@TrapEntry	Trap14	{U}
0203A68C	@TrapEntry	Trap15	{U}
0203A694	@TrapEntry	Trap16	{U}
0203A69C	@TrapEntry	Trap17	{U}
0203A6A4	@TrapEntry	Trap18	{U}
0203A6AC	@TrapEntry	Trap19	{U}
0203A6B4	@TrapEntry	Trap20	{U}
0203A6BC	@TrapEntry	Trap21	{U}
0203A6C4	@TrapEntry	Trap22	{U}
0203A6CC	@TrapEntry	Trap23	{U}
0203A6D4	@TrapEntry	Trap24	{U}
0203A6DC	@TrapEntry	Trap25	{U}
0203A6E4	@TrapEntry	Trap26	{U}
0203A6EC	@TrapEntry	Trap27	{U}
0203A6F4	@TrapEntry	Trap28	{U}
0203A6FC	@TrapEntry	Trap29	{U}
0203A704	@TrapEntry	Trap30	{U}
0203A70C	@TrapEntry	Trap31	{U}
0203A714	@TrapEntry	Trap32	{U}
0203A71C	@TrapEntry	Trap33	{U}
0203A724	@TrapEntry	Trap34	{U}
0203A72C	@TrapEntry	Trap35	{U}
0203A734	@TrapEntry	Trap36	{U}
0203A73C	@TrapEntry	Trap37	{U}
0203A744	@TrapEntry	Trap38	{U}
0203A74C	@TrapEntry	Trap39	{U}
0203A754	@TrapEntry	Trap40	{U}
0203A75C	@TrapEntry	Trap41	{U}
0203A764	@TrapEntry	Trap42	{U}
0203A76C	@TrapEntry	Trap43	{U}
0203A774	@TrapEntry	Trap44	{U}
0203A77C	@TrapEntry	Trap45	{U}
0203A784	@TrapEntry	Trap46	{U}
0203A78C	@TrapEntry	Trap47	{U}
0203A794	@TrapEntry	Trap48	{U}
0203A79C	@TrapEntry	Trap49	{U}
0203A7A4	@TrapEntry	Trap50	{U}
0203A7AC	@TrapEntry	Trap51	{U}
0203A7B4	@TrapEntry	Trap52	{U}
0203A7BC	@TrapEntry	Trap53	{U}
0203A7C4	@TrapEntry	Trap54	{U}
0203A7CC	@TrapEntry	Trap55	{U}
0203A7D4	@TrapEntry	Trap56	{U}
0203A7DC	@TrapEntry	Trap57	{U}
0203A7E4	@TrapEntry	Trap58	{U}
0203A7EC	@TrapEntry	Trap59	{U}
0203A7F4	@TrapEntry	Trap60	{U}
0203A7FC	@TrapEntry	Trap61	{U}
0203A804	@TrapEntry	Trap62	{U}
0203A80C	@TrapEntry	Trap63	{U}

0203A610	@TrapEntry	Trap0	{J}
0203A618	@TrapEntry	Trap1	{J}
0203A620	@TrapEntry	Trap2	{J}
0203A628	@TrapEntry	Trap3	{J}
0203A630	@TrapEntry	Trap4	{J}
0203A638	@TrapEntry	Trap5	{J}
0203A640	@TrapEntry	Trap6	{J}
0203A648	@TrapEntry	Trap7	{J}
0203A650	@TrapEntry	Trap8	{J}
0203A658	@TrapEntry	Trap9	{J}
0203A660	@TrapEntry	Trap10	{J}
0203A668	@TrapEntry	Trap11	{J}
0203A670	@TrapEntry	Trap12	{J}
0203A678	@TrapEntry	Trap13	{J}
0203A680	@TrapEntry	Trap14	{J}
0203A688	@TrapEntry	Trap15	{J}
0203A690	@TrapEntry	Trap16	{J}
0203A698	@TrapEntry	Trap17	{J}
0203A6A0	@TrapEntry	Trap18	{J}
0203A6A8	@TrapEntry	Trap19	{J}
0203A6B0	@TrapEntry	Trap20	{J}
0203A6B8	@TrapEntry	Trap21	{J}
0203A6C0	@TrapEntry	Trap22	{J}
0203A6C8	@TrapEntry	Trap23	{J}
0203A6D0	@TrapEntry	Trap24	{J}
0203A6D8	@TrapEntry	Trap25	{J}
0203A6E0	@TrapEntry	Trap26	{J}
0203A6E8	@TrapEntry	Trap27	{J}
0203A6F0	@TrapEntry	Trap28	{J}
0203A6F8	@TrapEntry	Trap29	{J}
0203A700	@TrapEntry	Trap30	{J}
0203A708	@TrapEntry	Trap31	{J}
0203A710	@TrapEntry	Trap32	{J}
0203A718	@TrapEntry	Trap33	{J}
0203A720	@TrapEntry	Trap34	{J}
0203A728	@TrapEntry	Trap35	{J}
0203A730	@TrapEntry	Trap36	{J}
0203A738	@TrapEntry	Trap37	{J}
0203A740	@TrapEntry	Trap38	{J}
0203A748	@TrapEntry	Trap39	{J}
0203A750	@TrapEntry	Trap40	{J}
0203A758	@TrapEntry	Trap41	{J}
0203A760	@TrapEntry	Trap42	{J}
0203A768	@TrapEntry	Trap43	{J}
0203A770	@TrapEntry	Trap44	{J}
0203A778	@TrapEntry	Trap45	{J}
0203A780	@TrapEntry	Trap46	{J}
0203A788	@TrapEntry	Trap47	{J}
0203A790	@TrapEntry	Trap48	{J}
0203A798	@TrapEntry	Trap49	{J}
0203A7A0	@TrapEntry	Trap50	{J}
0203A7A8	@TrapEntry	Trap51	{J}
0203A7B0	@TrapEntry	Trap52	{J}
0203A7B8	@TrapEntry	Trap53	{J}
0203A7C0	@TrapEntry	Trap54	{J}
0203A7C8	@TrapEntry	Trap55	{J}
0203A7D0	@TrapEntry	Trap56	{J}
0203A7D8	@TrapEntry	Trap57	{J}
0203A7E0	@TrapEntry	Trap58	{J}
0203A7E8	@TrapEntry	Trap59	{J}
0203A7F0	@TrapEntry	Trap60	{J}
0203A7F8	@TrapEntry	Trap61	{J}
0203A800	@TrapEntry	Trap62	{J}
0203A808	@TrapEntry	Trap63	{J}

0802E1F0	AddTrap	Adds/Creates new trap	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{J}
0802E2B8	AddTrap	Adds/Creates new trap	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{U}
0802E218	AddTrapExt	Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{J}
0802E2E0	AddTrapExt	Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	RET=Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{U}
0802E128	GetTrapAt	Looks for a trap at given position	RET=Pointer to Trap Entry Struct (0 if no trap at given pos)	r0=x, r1=y	{J}
0802E1F0	GetTrapAt	Looks for a trap at given position	RET=Pointer to Trap Entry Struct (0 if no trap at given pos)	r0=x, r1=y	{U}
0802E184	GetSpecificTrapAt	Looks for a trap at given position with given type	RET=Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{J}
0802E24C	GetSpecificTrapAt	Looks for a trap at given position with given type	RET=Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{U}
0802E100	ResetTraps	Resets Trap Array (Sets all trap ids to 0)	{J}
0802E1C8	ResetTraps	Resets Trap Array (Sets all trap ids to 0)	{U}
0802EAC4	GetTrap	Gets Trap Struct by Index	RET=Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{J}
0802EB8C	GetTrap	Gets Trap Struct by Index	RET=Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{U}
0802E234	RemoveTrap	Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{J}
0802E2FC	RemoveTrap	Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{U}
08037A9C	AddBallista	Adds/Creates Ballista	RET=Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{J}
08037A04	AddBallista	Adds/Creates Ballista	RET=Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{U}
0802E990	AddLightRune	Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	RET=Trap Struct Entry Pointer	r0=x	r1=y	{J}
0802EA58	AddLightRune	Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	RET=Trap Struct Entry Pointer	r0=x	r1=y	{U}
0802E9C8	RemoveLightRune	Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{J}
0802EA90	RemoveLightRune	Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{U}
0802E3A8	UpdateAllLightRunes	Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{J}
0802E470	UpdateAllLightRunes	Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{U}
0802E2E0	AddSnagsAndWalls	Goes through the terrain map and adds all the snag & wall traps where relevant	{J}
0802E3A8	AddSnagsAndWalls	Goes through the terrain map and adds all the snag & wall traps where relevant	{U}
0802E9F8	HandleTrapDecay	Handle Turn count down for Light Runes & Torch Lights	{J}
0802EAC0	HandleTrapDecay	Handle Turn count down for Light Runes & Torch Lights	{U}
0802E530	TriggerMapChange	Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{J}
0802E5F8	TriggerMapChange	Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{U}
0802E544	UntriggerMapChange	Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{J}
0802E60C	UntriggerMapChange	Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{U}
0802E368	ApplyTrapMapChanges	Applies all triggered map changes (used on suspend load maybe?)	{J}
0802E430	ApplyTrapMapChanges	Applies all triggered map changes (used on suspend load maybe?)	{U}
0802E288	AddArrowTrap Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{J}
0802E350	AddArrowTrap	Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{U}
0802E268	AddGasTrap	Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{J}
0802E330	AddGasTrap	Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{U}
0802E24C	AddFireTrap	Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{J}
0802E314	AddFireTrap	Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{U}
0802E4C4	ApplyMapChangesById	void	r0=Map Change Id	{J}
0802E58C	ApplyMapChangesById	void	r0=Map Change Id	{U}
08019FBC	RevertMapChangesById	r0=Map Change Id	{J}
0801A2EC	RevertMapChangesById	r0=Map Change Id	{U}
0801973C	FlushTerrainData	(You need to call that in order to have the map changes properly applied?)	{J}
08019A64	FlushTerrainData	(You need to call that in order to have the map changes properly applied?)	{U}

//from https://doc.feuniverse.us/static/stan/TargetSelectionNotes.txt
08050630	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{J}
0804F8BC	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{U}
08050AC8	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{J}
0804FD28	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{U}
08050AA8	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{J}
0804FD34	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{U}
08050618	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{J}
0804F8A4	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{U}
08024F20	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{J}
08024F70	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{U}
08024DF0	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{J}
08024EAC	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{U}
080507B0	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{J}
0804FA3C	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{U}
08050818	NewTargetSelection_Specialized	Same as above, but the A Press routine from the list gets overwritten by the one given as arg	Target Selection 6C	r0=pointer to routine list	r1=routine to call on A Press	{J}
0804FAA4	NewTargetSelection_Specialized	Same as above, but the A Press routine from the list gets overwritten by the one given as arg	Target Selection 6C	r0=pointer to routine list	r1=routine to call on A Press	{U}

//from https://doc.feuniverse.us/static/stan/BWLEntry.txt
080A9260	BWL_AddTilesMoved Arguments	void	 r0=Char Id	r1=Tiles moved	{J}
080A4A34	BWL_AddFavoritismValue Arguments	void	r0=Char Id	r1=Value	{U}


//from https://doc.feuniverse.us/static/stan/GraphicsBuffersEtc.txt
08000E4C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{J}
08000E9C	FlushLCDControl DON'T CALL THIS YOURSELF (called on VBlank); Does the magic	{U}
08000EF4	GetBackgroundControlBufferPtr	{J}
08000F44	GetBackgroundControlBufferPtr	{U}
08000F3C	GetBackgroundTileDataOffset	{J}
08000F8C	GetBackgroundTileDataOffset	{U}
08000F8C	SetBackgroundTileDataOffset	{J}
08000FDC	SetBackgroundTileDataOffset	{U}
08000FB4	SetBackgroundMapDataOffset	{J}
08001004	SetBackgroundMapDataOffset	{U}
08000FFC	SetBackgroundScreenSize	{J}
0800104C	SetBackgroundScreenSize	{U}
08001448	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{J}
0800148C	SetupBackgroundPosition	void	r0=BG Index	r1=x	r2=y	{U}
080011D0	FillBGMap Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{J}
08001220	FillBGMap Fills BG Map with given value	void	r0=BG Map (Buffer) Pointer	r1=value (word)	{U}

08001BC0	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{J}
08001C4C	GetBGMapBuffer Gets BG Map Buffer for given BG	BG Map Buffer pointer	r0=BG Index	{U}
08001EFC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{J}
08001FAC	EnableBackgroundByMask Sets BGs to be updated (Will not unset others)	void	r0=BG Mask (see 0300080D)	{U}
08001F0C	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{J}
08001FBC	EnableBackgroundById Sets BG to be updated	void	r0=BG Index	{U}
080010FC	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{J}
0800114C	FlushBackgrounds DON'T CALL THIS YOURSELF (called on VBlank); Sends the BG Maps to VRAM, and the palettes to palette RAM	{U}
08001F30	ClearTileRigistry Clears array	{J}
08001FE0	ClearTileRigistry Clears array	{U}
08001F64	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{J}
08002014	RegisterTileGraphics Adds an entry to the array	void	r0=Source gfx (uncompressed!)	r1=Destination pointer	r2=size (bytes)	{U}
08001FA4	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{J}
08002054	RegisterFillTile Adds an entry to the array (fill mode); Used mostly to clear tiles	void	r0=*word* to fill with	r1=Destination pointer	r2=size (bytes)	{U}
080011F0	RegisterBlankTile	void	r0=Tile index	{J}
08001240	RegisterBlankTile	void	r0=Tile index	{U}
08001FD8	FlushTiles DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{J}
08002088	FlushTiles DON'T CALL THIS YOURSELF (called on VBlank); Sends the tile data to VRAM/wherever you told it to	{U}

//from https://doc.feuniverse.us/static/stan/TorchStaffNotes.txt
08029E64	NewTorchStaffSelection	{J}
08029ED8	NewTorchStaffSelection	{U}
08029D24	TorchTargetPosSelect_Init	{J}
08029D98	TorchTargetPosSelect_Init	{U}
08029D7C	TorchTargetSelection_Loop	{J}
08029DF0	TorchTargetSelection_Loop	{U}
08029E64	NewTorchStaffSelection	{J}
08029ED8	NewTorchStaffSelection	{U}

//テキスト関係
080040b8	draw_serif_text	{J}
08004504	draw_serif_text	{U}
08003e6c	strlen_serif_width	{J}
08004538	strlen_serif_width	{U}
08003f28	draw_item_text	{J}
080044C8	draw_item_text	{U}
08003e0c	strlen_item_width	{J}
08004568	strlen_item_width	{U}
08003f10	draw_text_nextline	{J}
//	draw_text_nextline	{U}

080195e4	マップパレットロード	{J}
0801990C	マップパレットロード	{U}
0801965c	マップパレットロード2	{J}
08019984	マップパレットロード2	{U}

080D41B0	umul3232H32	{J}
080D41C0	SoundMain	{J}
080D4244	SoundMainRAM	{J}
080D45E8	SoundMainBTM	{J}
080D4600	RealClearChain	{J}
080D4620	ply_fine	{J}
080D4650	MPlayJumpTableCopy	{J}
080D4684	ld_r3_tp_adr_i	{J}
080D4690	ply_goto	{J}
080D46B0	ply_patt	{J}
080D46CC	ply_pend	{J}
080D46E0	ply_rept	{J}
080D4710	ply_prio	{J}
080D471C	ply_tempo	{J}
080D4730	ply_keysh	{J}
080D4744	ply_voice	{J}
080D4774	ply_vol	{J}
080D4788	ply_pan	{J}
080D479C	ply_bend	{J}
080D47B0	ply_bendr	{J}
080D47C4	ply_lfodl	{J}
080D47D0	ply_modt	{J}
080D47E8	ply_tune	{J}
080D47FC	ply_port	{J}
080D4814	m4aSoundVSync	{J}
080D4860	MPlayMain	{J}
080D4AC8	TrackStop	{J}
080D4B0C	ChnVolSetAsm	{J}
080D4B3C	ply_note	{J}
080D4D3C	ply_endtie	{J}
080D4D7C	clear_modM	{J}
080D4DA4	ply_lfos	{J}
080D4DB8	ply_mod	{J}
080D4DCC	MidiKeyToFreq	{J}
080D4E30	UnusedDummyFunc	{J}
080D4E34	MPlayContinue	{J}
080D4E50	MPlayFadeOut	{J}
080D4E70	m4aSoundInit	{J}
080D4EE8	m4aSoundMain	{J}
080D4EF4	m4aSongNumStart	r0=music id	{J}
080D4F20	m4aSongNumStartOrChange	{J}
080D4F20	m4aSongNumStartOrContinue	{J}
080D4FC0	m4aSongNumStop	{J}
080D4FC0	m4aSongNumContinue	{J}
080D5028	m4aMPlayAllStop	{J}
080D5054	m4aMPlayContinue	{J}
080D5028	m4aMPlayAllContinue	{J}
080D508C	m4aMPlayFadeOut	{J}
080D509C	m4aMPlayFadeOutTemporarily	{J}
080D50BC	m4aMPlayFadeIn	{J}
080D50E4	m4aMPlayImmInit	{J}
080D512C	MPlayExtender	{J}
080D5244	MusicPlayerJumpTableCopy	{J}
080D5248	ClearChain	{J}
080D5248	Clear64byte	{J}
080D5270	SoundInit	{J}
080D5368	SampleFreqSet	{J}
080D540C	m4aSoundMode	{J}
080D54A4	SoundClear	{J}
080D54F8	m4aSoundVSyncOff	{J}
080D5574	m4aSoundVSyncOn	{J}
080D55B0	MPlayOpen	{J}
080D5628	MPlayStart	{J}
080D570C	m4aMPlayStop	{J}
080D574C	FadeOutBody	{J}
080D5814	TrkVolPitSet	{J}
080D58C8	MidiKeyToCgbFreq	{J}
080D5970	CgbOscOff	{J}
080D5A28	CgbSound	{J}
080D5E74	m4aMPlayTempoControl	{J}
080D5E9C	m4aMPlayVolumeControl	{J}
080D5F04	m4aMPlayPitchControl	{J}
080D5F78	m4aMPlayPanpotControl	{J}
080D5FE0	ClearModM	{J}
080D6000	m4aMPlayModDepthSet	{J}
080D6074	m4aMPlayLFOSpeedSet	{J}
080D60E8	ply_memacc	{J}
080D6240	ply_xcmd	{J}
08002AF4	ply_xxx	{J}
080D6274	ply_xwave	{J}
080D62BC	ply_xtype	{J}
080D62D0	ply_xatta	{J}
080D62E4	ply_xdeca	{J}
080D62F8	ply_xsust	{J}
080D630C	ply_xrele	{J}
080D6320	ply_xiecv	{J}
080D632C	ply_xiecl	{J}
080D6338	ply_xleng	{J}
080D634C	ply_xswee	{J}
080D6274	ply_xcmd_0D	{J}
080D63AC	SoftReset	{J}
080D63D4	Sqrt	{J}
080D65BC	_call_via_r0	{J}
080D65C0	_call_via_r1	{J}
080D65C4	_call_via_r2	{J}
080D65C8	_call_via_r3	{J}
080D65CC	_call_via_r4	{J}
080D65D0	_call_via_r5	{J}
080D65D4	_call_via_r6	{J}
080D65D8	_call_via_r7	{J}
080D65DC	_call_via_r8	{J}
080D65E0	_call_via_r9	{J}
080D65E4	_call_via_sl	{J}
080D65E8	_call_via_fp	{J}
080D65EC	_call_via_ip	{J}
080D65F0	_call_via_sp	{J}
080D65F4	_call_via_lr	{J}
080D65F8	__divsi3	{J}
0805601C	__fixunssfsi	{J}
080D6690	__modsi3	{J}
080D6760	__muldi3	{J}
0800A874	__udivdi3	{J}
080D67D0	__udivsi3	{J}
080D6848	__umodsi3	{J}
080DA9A0	__pack_d	{J}
080DAAE8	__unpack_d	{J}
080DAE2C	__adddf3	{J}
080DAE5C	__subdf3	{J}
080DAE94	__muldf3	{J}
080DB13C	__divdf3	{J}
080DB2C4	__fpcmp_parts_d	{J}
080DB3C4	__cmpdf2	{J}
080DB3F0	__eqdf2	{J}
080DB43C	__nedf2	{J}
080DB488	__gtdf2	{J}
080DB4D4	__gedf2	{J}
080DB520	__ltdf2	{J}
080DB56C	__ledf2	{J}
080DB5B8	__floatsidf	{J}
080DB634	__fixdfsi	{J}
080DB6A8	__negdf2	{J}
080DB6D0	__make_dp	{J}
080DB6F8	__truncdfsf2	{J}
080DB73C	__pack_f	{J}
080DB7F4	__unpack_f	{J}
080DB9EC	__addsf3	{J}
080DBA18	__subsf3	{J}
080DBA4C	__mulsf3	{J}
080DBBB0	__divsf3	{J}
080DBC9C	__fpcmp_parts_f	{J}
080DBD80	__cmpsf2	{J}
080DBDA8	__eqsf2	{J}
080DBDF0	__nesf2	{J}
080DBE38	__gtsf2	{J}
080DBE80	__gesf2	{J}
080DBEC8	__ltsf2	{J}
080DBF10	__lesf2	{J}
080DBF58	__floatsisf	{J}
080DBFB8	__fixsfsi	{J}
080DC020	__negsf2	{J}
080DC044	__make_fp	{J}
080DC05C	__extendsfdf2	{J}
080DC088	__lshrdi3	{J}
080DC0BC	__negdi2	{J}
080D6908	memcpy	{J}
080D6968	memset	{J}
080D6A08	strlen	{J}
080D6B14	vfprintf	{J}
080D6B28	_vfprintf_r	{J}
080D7BEC	__srefill	{J}
080D7BEC	__swsetup	{J}
080D7DF4	_dtoa_r	{J}
080D8BB8	__sfmoreglue	{J}
080D8BE8	__sfp	{J}
080D8C7C	__sinit	{J}
080D8CDC	_free_r	{J}
080D8E9C	_malloc_trim_r	{J}
080D8F5C	__sfvwrite	{J}
080D9188	_fwalk	{J}
080D91C8	_setlocale_r	{J}
080D9234	__smakebuf	{J}
080D946C	_malloc_r	{J}
080D982C	_mbtowc_r	{J}
080D9858	memchr	{J}
080D98D8	memmove	{J}
080D9968	_Balloc	{J}
080D99C0	_Bfree	{J}
080D99D8	_multadd	{J}
080D9A70	_s2b	{J}
080D9AF4	_hi0bits	{J}
080D9B4C	_lo0bits	{J}
080D9BD0	_i2b	{J}
080D9BE4	_multiply	{J}
080D9D50	_pow5mult	{J}
080D9DE8	_lshift	{J}
080D9E88	__mcmp	{J}
080D9EC8	__mdiff	{J}
080D9FB8	_ulp	{J}
080DA004	_b2d	{J}
080DA0C0	_d2b	{J}
080DA1A8	_ratio	{J}
080DA1F8	_mprec_log10	{J}
080DA238	isinf	{J}
080DA25C	isnan	{J}
080DA27C	_close_r	{J}
080DA27C	_sbrk_r	{J}
080DA2A8	__sread	{J}
080DA2DC	__swrite	{J}
080DA31C	__sseek	{J}
080DA36C	strcmp	{J}
080DA434	initialise_monitor_handles	{J}
080DA4E4	_swiread	{J}
080DA508	_read	{J}
080DA550	_swilseek	{J}
080DA5D4	_lseek	{J}
080DA5E0	_swiwrite	{J}
080DA604	_write	{J}
080DA650	_swiopen	{J}
080DA6F0	_open	{J}
080DA704	_swiclose	{J}
080DA738	_close	{J}
080DA744	_exit	{J}
080DA764	_kill	{J}
080DA784	_getpid	{J}
080DA788	_sbrk	{J}
080DA7C4	_fstat	{J}
080DA7D0	_unlink	{J}
080DA7D8	_raise	{J}
080DA7DC	_gettimeofday	{J}
080DA808	_times	{J}
080DA82C	_lseek_r	{J}
080DA82C	_open_r	{J}
080DA85C	_calloc_r	{J}
080DA8EC	_fstat_r	{J}
080DA8EC	_gettimeofday_r	{J}
080DA918	abort	{J}
080DA940	_read_r	{J}
080DA940	_write_r	{J}


080CF4B8	umul3232H32	{U}
080CF4C8	SoundMain	{U}
080CF54C	SoundMainRAM	{U}
080CF8F0	SoundMainBTM	{U}
080CF908	RealClearChain	{U}
080CF928	ply_fine	{U}
080CF958	MPlayJumpTableCopy	{U}
080CF98C	ld_r3_tp_adr_i	{U}
080CF998	ply_goto	{U}
080CF9B8	ply_patt	{U}
080CF9D4	ply_pend	{U}
080CF9E8	ply_rept	{U}
080CFA18	ply_prio	{U}
080CFA24	ply_tempo	{U}
080CFA38	ply_keysh	{U}
080CFA4C	ply_voice	{U}
080CFA7C	ply_vol	{U}
080CFA90	ply_pan	{U}
080CFAA4	ply_bend	{U}
080CFAB8	ply_bendr	{U}
080CFACC	ply_lfodl	{U}
080CFAD8	ply_modt	{U}
080CFAF0	ply_tune	{U}
080CFB04	ply_port	{U}
080CFB1C	m4aSoundVSync	{U}
080CFB68	MPlayMain	{U}
080CFDD0	TrackStop	{U}
080CFE14	ChnVolSetAsm	{U}
080CFE44	ply_note	{U}
080D0044	ply_endtie	{U}
080D0084	clear_modM	{U}
080D00AC	ply_lfos	{U}
080D00C0	ply_mod	{U}
080D00D4	MidiKeyToFreq	{U}
080D0138	UnusedDummyFunc	{U}
080D013C	MPlayContinue	{U}
080D0158	MPlayFadeOut	{U}
080D0178	m4aSoundInit	{U}
080D01F0	m4aSoundMain	{U}
080D01FC	m4aSongNumStart	r0=music id	{U}
080D0228	m4aSongNumStartOrChange	{U}
080D0228	m4aSongNumStartOrContinue	{U}
080D02C8	m4aSongNumStop	{U}
080D02C8	m4aSongNumContinue	{U}
080D0330	m4aMPlayAllStop	{U}
080D035C	m4aMPlayContinue	{U}
080D0330	m4aMPlayAllContinue	{U}
080D0394	m4aMPlayFadeOut	{U}
080D03A4	m4aMPlayFadeOutTemporarily	{U}
080D03C4	m4aMPlayFadeIn	{U}
080D03EC	m4aMPlayImmInit	{U}
080D0434	MPlayExtender	{U}
080D054C	MusicPlayerJumpTableCopy	{U}
080D0550	ClearChain	{U}
080D0550	Clear64byte	{U}
080D0578	SoundInit	{U}
080D0670	SampleFreqSet	{U}
080D0714	m4aSoundMode	{U}
080D07AC	SoundClear	{U}
080D0800	m4aSoundVSyncOff	{U}
080D087C	m4aSoundVSyncOn	{U}
080D08B8	MPlayOpen	{U}
080D0930	MPlayStart	{U}
080D0A14	m4aMPlayStop	{U}
080D0A54	FadeOutBody	{U}
080D0B1C	TrkVolPitSet	{U}
080D0BD0	MidiKeyToCgbFreq	{U}
080D0C78	CgbOscOff	{U}
080D0D30	CgbSound	{U}
080D117C	m4aMPlayTempoControl	{U}
080D11A4	m4aMPlayVolumeControl	{U}
080D120C	m4aMPlayPitchControl	{U}
080D1280	m4aMPlayPanpotControl	{U}
080D12E8	ClearModM	{U}
080D1308	m4aMPlayModDepthSet	{U}
080D137C	m4aMPlayLFOSpeedSet	{U}
080D13F0	ply_memacc	{U}
080D1548	ply_xcmd	{U}
08002BA4	ply_xxx	{U}
080D157C	ply_xwave	{U}
080D15C4	ply_xtype	{U}
080D15D8	ply_xatta	{U}
080D15EC	ply_xdeca	{U}
080D1600	ply_xsust	{U}
080D1614	ply_xrele	{U}
080D1628	ply_xiecv	{U}
080D1634	ply_xiecl	{U}
080D1640	ply_xleng	{U}
080D1654	ply_xswee	{U}
080D157C	ply_xcmd_0D	{U}
080D16AC	RegisterRamReset	{U}
080D16B0	SoftReset	{U}
080D16D8	Sqrt	{U}
080D18C0	_call_via_r0	{U}
080D18C4	_call_via_r1	{U}
080D18C8	_call_via_r2	{U}
080D18CC	_call_via_r3	{U}
080D18D0	_call_via_r4	{U}
080D18D4	_call_via_r5	{U}
080D18D8	_call_via_r6	{U}
080D18DC	_call_via_r7	{U}
080D18E0	_call_via_r8	{U}
080D18E4	_call_via_r9	{U}
080D18E8	_call_via_sl	{U}
080D18EC	_call_via_fp	{U}
080D18F0	_call_via_ip	{U}
080D18F4	_call_via_sp	{U}
080D18F8	_call_via_lr	{U}
080D18FC	__divsi3	{U}
080D1994	__modsi3	{U}
080D1A64	__muldi3	{U}
0800A518	__udivdi3	{U}
080D1AD4	__udivsi3	{U}
080D1B4C	__umodsi3	{U}
080D5D64	__pack_d	{U}
080D5EAC	__unpack_d	{U}
080D61F0	__adddf3	{U}
080D6220	__subdf3	{U}
080D6258	__muldf3	{U}
080D6500	__divdf3	{U}
080D6688	__fpcmp_parts_d	{U}
080D6788	__cmpdf2	{U}
080D67B4	__eqdf2	{U}
080D6800	__nedf2	{U}
080D684C	__gtdf2	{U}
080D6898	__gedf2	{U}
080D68E4	__ltdf2	{U}
080D6930	__ledf2	{U}
080D697C	__floatsidf	{U}
080D69F8	__fixdfsi	{U}
080D6A6C	__negdf2	{U}
080D6A94	__make_dp	{U}
080D6ABC	__truncdfsf2	{U}
080D6B00	__pack_f	{U}
080D6BB8	__unpack_f	{U}
080D6DB0	__addsf3	{U}
080D6DDC	__subsf3	{U}
080D6E10	__mulsf3	{U}
080D6F74	__divsf3	{U}
080D7060	__fpcmp_parts_f	{U}
080D7144	__cmpsf2	{U}
080D716C	__eqsf2	{U}
080D71B4	__nesf2	{U}
080D71FC	__gtsf2	{U}
080D7244	__gesf2	{U}
080D728C	__ltsf2	{U}
080D72D4	__lesf2	{U}
080D731C	__floatsisf	{U}
080D737C	__fixsfsi	{U}
080D73E4	__negsf2	{U}
080D7408	__make_fp	{U}
080D7420	__extendsfdf2	{U}
080D744C	__lshrdi3	{U}
080D7480	__negdi2	{U}
080D1C0C	memcpy	{U}
080D1C6C	memset	{U}
080D1D88	strlen	{U}
080D1EA4	vfprintf	{U}
080D1EB8	_vfprintf_r	{U}
080D2FB0	__srefill	{U}
080D2FB0	__swsetup	{U}
080D31B8	_dtoa_r	{U}
080D3F7C	__sfmoreglue	{U}
080D3FAC	__sfp	{U}
080D4040	__sinit	{U}
080D40A0	_free_r	{U}
080D4260	_malloc_trim_r	{U}
080D4320	__sfvwrite	{U}
080D454C	_fwalk	{U}
080D458C	_setlocale_r	{U}
080D45F8	__smakebuf	{U}
080D4830	_malloc_r	{U}
080D4BF0	_mbtowc_r	{U}
080D4C1C	memchr	{U}
080D4C9C	memmove	{U}
080D4D2C	_Balloc	{U}
080D4D84	_Bfree	{U}
080D4D9C	_multadd	{U}
080D4E34	_s2b	{U}
080D4EB8	_hi0bits	{U}
080D4F10	_lo0bits	{U}
080D4F94	_i2b	{U}
080D4FA8	_multiply	{U}
080D5114	_pow5mult	{U}
080D51AC	_lshift	{U}
080D524C	__mcmp	{U}
080D528C	__mdiff	{U}
080D537C	_ulp	{U}
080D53C8	_b2d	{U}
080D5484	_d2b	{U}
080D556C	_ratio	{U}
080D55BC	_mprec_log10	{U}
080D55FC	isinf	{U}
080D5620	isnan	{U}
080D5640	_close_r	{U}
080D5640	_sbrk_r	{U}
080D566C	__sread	{U}
080D56A0	__swrite	{U}
080D56E0	__sseek	{U}
080D5730	strcmp	{U}
080D57F8	initialise_monitor_handles	{U}
080D58A8	_swiread	{U}
080D58CC	_read	{U}
080D5914	_swilseek	{U}
080D5998	_lseek	{U}
080D59A4	_swiwrite	{U}
080D59C8	_write	{U}
080D5A14	_swiopen	{U}
080D5AB4	_open	{U}
080D5AC8	_swiclose	{U}
080D5AFC	_close	{U}
080D5B08	_exit	{U}
080D5B28	_kill	{U}
080D5B48	_getpid	{U}
080D5B4C	_sbrk	{U}
080D5B88	_fstat	{U}
080D5B94	_unlink	{U}
080D5B9C	_raise	{U}
080D5BA0	_gettimeofday	{U}
080D5BCC	_times	{U}
080D5BF0	_lseek_r	{U}
080D5BF0	_open_r	{U}
080D5C20	_calloc_r	{U}
080D5CB0	_fstat_r	{U}
080D5CB0	_gettimeofday_r	{U}
080D5CDC	abort	{U}
080D5D04	_read_r	{U}
080D5D04	_write_r	{U}
08017294	耐久<<8|武器 & 0xFFで武器IDを取得	{J}
080174EC	耐久<<8|武器 & 0xFFで武器IDを取得	{U}
080730E4	マムクートが変身してクラスを変える処理	{J}
08070B3C	マムクートが変身してクラスを変える処理	{U}
0807308C	マムクートの変身を解除するアニメーション	{J}
08070AE4	マムクートの変身を解除するアニメーション	{U}
08072FBC	マムクートの変身アニメーションを実行する処理	{J}
08070A16	マムクートの変身アニメーションを実行する処理	{U}
08072F14	マムクートの変身で開始と終了の音を鳴らす処理	{J}
0807096C	マムクートの変身で開始と終了の音を鳴らす処理	{U}
08072EA4	マムクートが変身して"攻撃"する処理	{J}
080708FC	マムクートが変身して"攻撃"する処理	{U}
0807D634	呼魔するデータを決定する	{J}
0807B2B4	呼魔するデータを決定する	{U}
08017A5C	敵ユニットの追加	void	r1=POINTER 追加する敵ユニット用ワークメモリ	r0=敵データ UNITID CLASSID .. .. .. {J}
08017D3C	敵ユニットの追加	void	r1=POINTER 追加する敵ユニット用ワークメモリ	r0=敵データ UNITID CLASSID .. .. .. {U}

@Unit@00	pointer	ユニットポインタ
@Unit@04	pointer	クラスポインタ
@Unit@08	byte	レベル
@Unit@09	byte	経験値
@Unit@0A	byte	回復モード
@Unit@0B	byte	部隊表ID
@Unit@0C	byte	状態	(+1=??,+2=行動済,+4=死亡,+8=非出撃,+10=救出中,+20=被救出中,+40=??,+80=??)
@Unit@0D	byte	状態2	(+$20 成長アップ +$40 ?? +$80 ??)
@Unit@0E	byte	離脱状態	+1=離脱状態
@Unit@0F	byte	出撃不可	+2=出撃不可
@Unit@10	byte	X	座標
@Unit@11	byte	Y	座標
@Unit@12	byte	最大HP
@Unit@13	byte	現在HP
@Unit@14	byte	力と魔力
@Unit@15	byte	技
@Unit@16	byte	速さ
@Unit@17	byte	守備
@Unit@18	byte	魔防
@Unit@19	byte	運
@Unit@1A	byte	体格＋	(5bit)
@Unit@1B	byte	同行者ID
@Unit@1C	byte	nazo1	(tmp?)
@Unit@1D	byte	移動＋	(5bit)
@Unit@1E	byte	アイテムID1
@Unit@1F	byte	アイテム数1
@Unit@20	byte	アイテムID2
@Unit@21	byte	アイテム数2
@Unit@22	byte	アイテムID3
@Unit@23	byte	アイテム数3
@Unit@24	byte	アイテムID4
@Unit@25	byte	アイテム数4
@Unit@26	byte	アイテムID5
@Unit@27	byte	アイテム数5
@Unit@28	byte	剣 EXP
@Unit@29	byte	槍 EXP
@Unit@2A	byte	斧 EXP
@Unit@2B	byte	弓 EXP
@Unit@2C	byte	杖 EXP
@Unit@2D	byte	理 EXP
@Unit@2E	byte	光 EXP
@Unit@2F	byte	闇 EXP
@Unit@30	byte	状態とターン
@Unit@31	byte	聖水松明
@Unit@32	byte	支援1
@Unit@33	byte	支援2
@Unit@34	byte	支援3
@Unit@35	byte	支援4
@Unit@36	byte	支援5
@Unit@37	byte	支援6
@Unit@38	byte	支援7
@Unit@39	byte	支援フラグ
@Unit@3A	byte	nazo2	maybe blank
@Unit@3B	byte	nazo3	maybe blank
@Unit@3C	byte	nazo4
@Unit@3D	byte	nazo5
@Unit@3E	byte	nazo6
@Unit@3F	byte	nazo7
@Unit@40	byte	AI 3
@Unit@41	byte	AI 4
@Unit@42	byte	AI 1
@Unit@43	byte	AI 1 Counter
@Unit@44	byte	AI 2
@Unit@45	byte	AI 2 Counter
@Unit@46	byte	nazo8	(tmp)
@Unit@47	byte	nazo9	(blank)

0202BE48	@Unit	Player1	{J}
0202BE90	@Unit	Player2	{J}
0202BED8	@Unit	Player3	{J}
0202BF20	@Unit	Player4	{J}
0202BF68	@Unit	Player5	{J}
0202BFB0	@Unit	Player6	{J}
0202BFF8	@Unit	Player7	{J}
0202C040	@Unit	Player8	{J}
0202C088	@Unit	Player9	{J}
0202C0D0	@Unit	Player10	{J}
0202C118	@Unit	Player11	{J}
0202C160	@Unit	Player12	{J}
0202C1A8	@Unit	Player13	{J}
0202C1F0	@Unit	Player14	{J}
0202C238	@Unit	Player15	{J}
0202C280	@Unit	Player16	{J}
0202C2C8	@Unit	Player17	{J}
0202C310	@Unit	Player18	{J}
0202C358	@Unit	Player19	{J}
0202C3A0	@Unit	Player20	{J}
0202C3E8	@Unit	Player21	{J}
0202C430	@Unit	Player22	{J}
0202C478	@Unit	Player23	{J}
0202C4C0	@Unit	Player24	{J}
0202C508	@Unit	Player25	{J}
0202C550	@Unit	Player26	{J}
0202C598	@Unit	Player27	{J}
0202C5E0	@Unit	Player28	{J}
0202C628	@Unit	Player29	{J}
0202C670	@Unit	Player30	{J}
0202C6B8	@Unit	Player31	{J}
0202C700	@Unit	Player32	{J}
0202C748	@Unit	Player33	{J}
0202C790	@Unit	Player34	{J}
0202C7D8	@Unit	Player35	{J}
0202C820	@Unit	Player36	{J}
0202C868	@Unit	Player37	{J}
0202C8B0	@Unit	Player38	{J}
0202C8F8	@Unit	Player39	{J}
0202C940	@Unit	Player40	{J}
0202C988	@Unit	Player41	{J}
0202C9D0	@Unit	Player42	{J}
0202CA18	@Unit	Player43	{J}
0202CA60	@Unit	Player44	{J}
0202CAA8	@Unit	Player45	{J}
0202CAF0	@Unit	Player46	{J}
0202CB38	@Unit	Player47	{J}
0202CB80	@Unit	Player48	{J}
0202CBC8	@Unit	Player49	{J}
0202CC10	@Unit	Player50	{J}
0202CC58	@Unit	Player51	{J}
0202CCA0	@Unit	Player52	{J}
0202CCE8	@Unit	Player53	{J}
0202CD30	@Unit	Player54	{J}
0202CD78	@Unit	Player55	{J}
0202CDC0	@Unit	Player56	{J}
0202CE08	@Unit	Player57	{J}
0202CE50	@Unit	Player58	{J}
0202CE98	@Unit	Player59	{J}
0202CEE0	@Unit	Player60	{J}
0202CF28	@Unit	Player61	{J}
0202CF70	@Unit	Player62	{J}
0202CFB8	@Unit	Enemy1	{J}
0202D000	@Unit	Enemy2	{J}
0202D048	@Unit	Enemy3	{J}
0202D090	@Unit	Enemy4	{J}
0202D0D8	@Unit	Enemy5	{J}
0202D120	@Unit	Enemy6	{J}
0202D168	@Unit	Enemy7	{J}
0202D1B0	@Unit	Enemy8	{J}
0202D1F8	@Unit	Enemy9	{J}
0202D240	@Unit	Enemy10	{J}
0202D288	@Unit	Enemy11	{J}
0202D2D0	@Unit	Enemy12	{J}
0202D318	@Unit	Enemy13	{J}
0202D360	@Unit	Enemy14	{J}
0202D3A8	@Unit	Enemy15	{J}
0202D3F0	@Unit	Enemy16	{J}
0202D438	@Unit	Enemy17	{J}
0202D480	@Unit	Enemy18	{J}
0202D4C8	@Unit	Enemy19	{J}
0202D510	@Unit	Enemy20	{J}
0202D558	@Unit	Enemy21	{J}
0202D5A0	@Unit	Enemy22	{J}
0202D5E8	@Unit	Enemy23	{J}
0202D630	@Unit	Enemy24	{J}
0202D678	@Unit	Enemy25	{J}
0202D6C0	@Unit	Enemy26	{J}
0202D708	@Unit	Enemy27	{J}
0202D750	@Unit	Enemy28	{J}
0202D798	@Unit	Enemy29	{J}
0202D7E0	@Unit	Enemy30	{J}
0202D828	@Unit	Enemy31	{J}
0202D870	@Unit	Enemy32	{J}
0202D8B8	@Unit	Enemy33	{J}
0202D900	@Unit	Enemy34	{J}
0202D948	@Unit	Enemy35	{J}
0202D990	@Unit	Enemy36	{J}
0202D9D8	@Unit	Enemy37	{J}
0202DA20	@Unit	Enemy38	{J}
0202DA68	@Unit	Enemy39	{J}
0202DAB0	@Unit	Enemy40	{J}
0202DAF8	@Unit	Enemy41	{J}
0202DB40	@Unit	Enemy42	{J}
0202DB88	@Unit	Enemy43	{J}
0202DBD0	@Unit	Enemy44	{J}
0202DC18	@Unit	Enemy45	{J}
0202DC60	@Unit	Enemy46	{J}
0202DCA8	@Unit	Enemy47	{J}
0202DCF0	@Unit	Enemy48	{J}
0202DD38	@Unit	Enemy49	{J}
0202DD80	@Unit	Enemy50	{J}
0202DDC8	@Unit	Ally1	{J}
0202DE10	@Unit	Ally2	{J}
0202DE58	@Unit	Ally3	{J}
0202DEA0	@Unit	Ally4	{J}
0202DEE8	@Unit	Ally5	{J}
0202DF30	@Unit	Ally6	{J}
0202DF78	@Unit	Ally7	{J}
0202DFC0	@Unit	Ally8	{J}
0202E008	@Unit	Ally9	{J}
0202E050	@Unit	Ally10	{J}
0202E098	@Unit	Ally11	{J}
0202E0E0	@Unit	Ally12	{J}
0202E128	@Unit	Ally13	{J}
0202E170	@Unit	Ally14	{J}
0202E1B8	@Unit	Ally15	{J}
0202E200	@Unit	Ally16	{J}
0202E248	@Unit	Ally17	{J}
0202E290	@Unit	Ally18	{J}
0202E2D8	@Unit	Ally19	{J}
0202E320	@Unit	Ally20	{J}

0202BE4C	@Unit	Player1	{U}
0202BE94	@Unit	Player2	{U}
0202BEDC	@Unit	Player3	{U}
0202BF24	@Unit	Player4	{U}
0202BF6C	@Unit	Player5	{U}
0202BFB4	@Unit	Player6	{U}
0202BFFC	@Unit	Player7	{U}
0202C044	@Unit	Player8	{U}
0202C08C	@Unit	Player9	{U}
0202C0D4	@Unit	Player10	{U}
0202C11C	@Unit	Player11	{U}
0202C164	@Unit	Player12	{U}
0202C1AC	@Unit	Player13	{U}
0202C1F4	@Unit	Player14	{U}
0202C23C	@Unit	Player15	{U}
0202C284	@Unit	Player16	{U}
0202C2CC	@Unit	Player17	{U}
0202C314	@Unit	Player18	{U}
0202C35C	@Unit	Player19	{U}
0202C3A4	@Unit	Player20	{U}
0202C3EC	@Unit	Player21	{U}
0202C434	@Unit	Player22	{U}
0202C47C	@Unit	Player23	{U}
0202C4C4	@Unit	Player24	{U}
0202C50C	@Unit	Player25	{U}
0202C554	@Unit	Player26	{U}
0202C59C	@Unit	Player27	{U}
0202C5E4	@Unit	Player28	{U}
0202C62C	@Unit	Player29	{U}
0202C674	@Unit	Player30	{U}
0202C6BC	@Unit	Player31	{U}
0202C704	@Unit	Player32	{U}
0202C74C	@Unit	Player33	{U}
0202C794	@Unit	Player34	{U}
0202C7DC	@Unit	Player35	{U}
0202C824	@Unit	Player36	{U}
0202C86C	@Unit	Player37	{U}
0202C8B4	@Unit	Player38	{U}
0202C8FC	@Unit	Player39	{U}
0202C944	@Unit	Player40	{U}
0202C98C	@Unit	Player41	{U}
0202C9D4	@Unit	Player42	{U}
0202CA1C	@Unit	Player43	{U}
0202CA64	@Unit	Player44	{U}
0202CAAC	@Unit	Player45	{U}
0202CAF4	@Unit	Player46	{U}
0202CB3C	@Unit	Player47	{U}
0202CB84	@Unit	Player48	{U}
0202CBCC	@Unit	Player49	{U}
0202CC14	@Unit	Player50	{U}
0202CC5C	@Unit	Player51	{U}
0202CCA4	@Unit	Player52	{U}
0202CCEC	@Unit	Player53	{U}
0202CD34	@Unit	Player54	{U}
0202CD7C	@Unit	Player55	{U}
0202CDC4	@Unit	Player56	{U}
0202CE0C	@Unit	Player57	{U}
0202CE54	@Unit	Player58	{U}
0202CE9C	@Unit	Player59	{U}
0202CEE4	@Unit	Player60	{U}
0202CF2C	@Unit	Player61	{U}
0202CF74	@Unit	Player62	{U}
0202CFBC	@Unit	Enemy1	{U}
0202D004	@Unit	Enemy2	{U}
0202D04C	@Unit	Enemy3	{U}
0202D094	@Unit	Enemy4	{U}
0202D0DC	@Unit	Enemy5	{U}
0202D124	@Unit	Enemy6	{U}
0202D16C	@Unit	Enemy7	{U}
0202D1B4	@Unit	Enemy8	{U}
0202D1FC	@Unit	Enemy9	{U}
0202D244	@Unit	Enemy10	{U}
0202D28C	@Unit	Enemy11	{U}
0202D2D4	@Unit	Enemy12	{U}
0202D31C	@Unit	Enemy13	{U}
0202D364	@Unit	Enemy14	{U}
0202D3AC	@Unit	Enemy15	{U}
0202D3F4	@Unit	Enemy16	{U}
0202D43C	@Unit	Enemy17	{U}
0202D484	@Unit	Enemy18	{U}
0202D4CC	@Unit	Enemy19	{U}
0202D514	@Unit	Enemy20	{U}
0202D55C	@Unit	Enemy21	{U}
0202D5A4	@Unit	Enemy22	{U}
0202D5EC	@Unit	Enemy23	{U}
0202D634	@Unit	Enemy24	{U}
0202D67C	@Unit	Enemy25	{U}
0202D6C4	@Unit	Enemy26	{U}
0202D70C	@Unit	Enemy27	{U}
0202D754	@Unit	Enemy28	{U}
0202D79C	@Unit	Enemy29	{U}
0202D7E4	@Unit	Enemy30	{U}
0202D82C	@Unit	Enemy31	{U}
0202D874	@Unit	Enemy32	{U}
0202D8BC	@Unit	Enemy33	{U}
0202D904	@Unit	Enemy34	{U}
0202D94C	@Unit	Enemy35	{U}
0202D994	@Unit	Enemy36	{U}
0202D9DC	@Unit	Enemy37	{U}
0202DA24	@Unit	Enemy38	{U}
0202DA6C	@Unit	Enemy39	{U}
0202DAB4	@Unit	Enemy40	{U}
0202DAFC	@Unit	Enemy41	{U}
0202DB44	@Unit	Enemy42	{U}
0202DB8C	@Unit	Enemy43	{U}
0202DBD4	@Unit	Enemy44	{U}
0202DC1C	@Unit	Enemy45	{U}
0202DC64	@Unit	Enemy46	{U}
0202DCAC	@Unit	Enemy47	{U}
0202DCF4	@Unit	Enemy48	{U}
0202DD3C	@Unit	Enemy49	{U}
0202DD84	@Unit	Enemy50	{U}
0202DDCC	@Unit	Ally1	{U}
0202DE14	@Unit	Ally2	{U}
0202DE5C	@Unit	Ally3	{U}
0202DEA4	@Unit	Ally4	{U}
0202DEEC	@Unit	Ally5	{U}
0202DF34	@Unit	Ally6	{U}
0202DF7C	@Unit	Ally7	{U}
0202DFC4	@Unit	Ally8	{U}
0202E00C	@Unit	Ally9	{U}
0202E054	@Unit	Ally10	{U}
0202E09C	@Unit	Ally11	{U}
0202E0E4	@Unit	Ally12	{U}
0202E12C	@Unit	Ally13	{U}
0202E174	@Unit	Ally14	{U}
0202E1BC	@Unit	Ally15	{U}
0202E204	@Unit	Ally16	{U}
0202E24C	@Unit	Ally17	{U}
0202E294	@Unit	Ally18	{U}
0202E2DC	@Unit	Ally19	{U}
0202E324	@Unit	Ally20	{U}

@StatusMenuText@00	short	start tile index	(relative to Font root)
@StatusMenuText@02	byte	current local x cursor	(in pixels)
@StatusMenuText@03	byte	current text color id
@StatusMenuText@04	byte	Text tile width	(usually only half the actual used tile amount!)
@StatusMenuText@05	bool	Uses Double Buffer
@StatusMenuText@06	byte	current buffer id	(0 or 1)
@StatusMenuText@07	byte	idk	(maybe unused? initialized to 0)
02003C34	@StatusMenuText	Skill	{J}
02003C3C	@StatusMenuText	Speed	{J}
02003C44	@StatusMenuText	Luck	{J}
02003C4C	@StatusMenuText	Def	{J}
02003C54	@StatusMenuText	Ref	{J}
02003C5C	@StatusMenuText	Mov	{J}
02003C64	@StatusMenuText	Con	{J}
02003C6C	@StatusMenuText	Aid	{J}
02003C74	@StatusMenuText	Trv	{J}
02003C7C	@StatusMenuText	Affin	{J}
02003C84	@StatusMenuText	Cond	{J}
02003CBC	@StatusMenuText	Atk	{J}
02003CC4	@StatusMenuText	Hit	{J}
02003CB4	@StatusMenuText	Rng	{J}
02003CCC	@StatusMenuText	Crit	{J}
02003CD4	@StatusMenuText	Avoid	{J}
02003CDC	@StatusMenuText	Weapon1	{J}
02003CE4	@StatusMenuText	Weapon2	{J}
02003CEC	@StatusMenuText	Weapon3	{J}
02003CF4	@StatusMenuText	Weapon4	{J}

02003C34	@StatusMenuText	Skill	{U}
02003C3C	@StatusMenuText	Speed	{U}
02003C44	@StatusMenuText	Luck	{U}
02003C4C	@StatusMenuText	Def	{U}
02003C54	@StatusMenuText	Ref	{U}
02003C5C	@StatusMenuText	Mov	{U}
02003C64	@StatusMenuText	Con	{U}
02003C6C	@StatusMenuText	Aid	{U}
02003C74	@StatusMenuText	Trv	{U}
02003C7C	@StatusMenuText	Affin	{U}
02003C84	@StatusMenuText	Cond	{U}
02003CBC	@StatusMenuText	Atk	{U}
02003CC4	@StatusMenuText	Hit	{U}
02003CB4	@StatusMenuText	Rng	{U}
02003CCC	@StatusMenuText	Crit	{U}
02003CD4	@StatusMenuText	Avoid	{U}

//https://www.dropbox.com/sh/zymc1h221nnxpm9/AAA1sHR4hvxFxZYqOF3zqkG6a/Stan/_Notes?dl=0&preview=Drawing+Text+Notes.txt
@DrawFont@00	pointer	root output VRAM pointer
@DrawFont@04	pointer	pointer to glyphs
@DrawFont@08	pointer	pointer to glyph drawing routine (ex: 08004218+1, 08004268+1)
@DrawFont@0C	pointer	pointer to current VRAM tile offset getter (ex: 080041E8+1)
@DrawFont@10	short	base value for text tiles (containing base tile index & palette mask)
@DrawFont@12	short	current tile index (local/relative to root)
@DrawFont@14	short	palette index
@DrawFont@16	byte	idk	 (set from byte at 02028E74, which is initialized at 1 at the start of the game and never changed again. My guess is that it denotes whenever to use Japanses (Shift-JS, 0) or English (ascii, 1) string format, since it is checked in various routines related to strings and glyphs)
@DrawFont@17	byte	idk

02028E58	@DrawFont	Default font struct	{U}
02028E58	@DrawFont	Default font struct	{J}

08003D38	SetFont	Sets which font to use for the subsequent Text compuations & drawings	r0=Font Struct pointer (0 for default)	{U}
08003CF4	SetFontGlyphSet	Sets Glyph set for current font	r0=0 for UI Font, 1 for Dialogue font	{U}
080043A8	Font_LoadForUI	Loads Palette & sets glyph set for UI Font	{U}
080043E8	Font_LoadForDialogue	Loads Palette & sets glyph set for Dialogue Font	{U}
08003CB8	Font_InitForUI	Inits font for UI drawing, and sets the font as current	r0=Font Struct (0 for default), r1=VRAM Root pointer	r2=VRAM Root Index	r3=Palette Index	{U}
08003C94	Font_InitDefault	Inits default font with default parameters (UI, VRAM Root 0x6001000, palette id 0)	{U}
08003D5C	Text_Init	Inits Text for current font (and clears it)	r0=Text Struct	r1=Text Tile Width	{U}
08003D84	Text_Allocate	Same as Text_Init, but doesn't clear (faster, but beware of leftover garbage graphics)	r0=Text Struct	r1=Text Tile Width	{U}

08003DAC	InitTextBatch	calls Text_Init for a bunch of text structs	r0=pointer to batch definition (see below)	{U}
08003DC8	Text_Clear	clears text (clears previously drawn tile graphics & resets x cursor & color)	r0=Text Struct	{U}
08003E50	Text_GetXCursor	{U}
08003E54	Text_SetXCursor	{U}
08003E58	Text_Advance	Advances x cursor/appends space/whatever	{U}
08003E60	Text_SetColorId	{U}
08003E64	Text_GetColorId	{U}
08003E68	Text_SetParameters	r0=Text Struct	r1=cursor	r2=color id	{U}
08003E70	Text_Draw	Draws text on backgroud tile data, switches buffers when applicable	r0=Text Struct	r1=Output Tile Root	{U}
08003EBC	Text_DrawBlank	Draws a blank rect on background tile data, where the given text would have been drawn	r0=Text Struct	r1=Output Tile Root	{U}
08004004	Text_AppendString	Appends String to Text graphics	r0=Text Struct, r1=String pointer	{U}
08004074	Text_AppendDecNumber	Appends Number as decimal to Text graphics	r0=Text Struct	r1=Number	{U}
08004144	Text_AppendNumberOr2Dashes	Same as above, except 0xFF will display "--"	r0=Text Struct	r1=Number (or 0xFF for "--")	{U}
08004480	Text_InsertString	Inserts String on Text	r0=Text Struct	r1=Cursor Start to insert to	r2=Color Id	r3=String pointer	{U}
080044A4	Text_InsertNumberOr2Dashes	Inserts Dec Number or 2 dashes on Text	r0=Text Struct, r1=Cursor Start to insert to	r2=Color Id	r3=Number (or 0xFF for "--")	{U}
08003EDC	GetStringTextWidth	Returns length of given string as drawn text given current font	r0=String pointer (null terminated ofc)	{U}
08003F90	GetStringTextCenteredPos	Returns pos of Text for the given string to be center given arg length	r0=tile width	r1=String pointer	{U}
0800443C	DrawTextInline	Draws text on screen without *needing* a text struct	r0=Text Struct (0 for temporary), r1=Output tile pointer root	r2=color id	r3=local x start	[sp]=tile width	[sp+4]=String pointer	{U}


08003C68	SetFont	Sets which font to use for the subsequent Text compuations & drawings	r0=Font Struct pointer (0 for default)	{J}
080042E0	Font_LoadForUI	Loads Palette & sets glyph set for UI Font	{J}
08004320	Font_LoadForDialogue	Loads Palette & sets glyph set for Dialogue Font	{J}
08003BE8	Font_InitForUI	Inits font for UI drawing, and sets the font as current	r0=Font Struct (0 for default), r1=VRAM Root pointer	r2=VRAM Root Index	r3=Palette Index	{J}
08003BC4	Font_InitDefault	Inits default font with default parameters (UI, VRAM Root 0x6001000, palette id 0)	{J}
08003C8C	Text_Init	Inits Text for current font (and clears it)	r0=Text Struct	r1=Text Tile Width	{J}
08003CB4	Text_Allocate	Same as Text_Init, but doesn't clear (faster, but beware of leftover garbage graphics)	r0=Text Struct	r1=Text Tile Width	{J}

08003CDC	InitTextBatch	calls Text_Init for a bunch of text structs	r0=pointer to batch definition (see below)	{J}
08003CF8	Text_Clear	clears text (clears previously drawn tile graphics & resets x cursor & color)	r0=Text Struct	{J}
08003D80	Text_GetXCursor	{J}
08003D84	Text_SetXCursor	{J}
08003D88	Text_Advance	Advances x cursor/appends space/whatever	{J}
08003D90	Text_SetColorId	{J}
08003D94	Text_GetColorId	{J}
08003D98	Text_SetParameters	r0=Text Struct	r1=cursor	r2=color id	{J}
08003DA0	Text_Draw	Draws text on backgroud tile data, switches buffers when applicable	r0=Text Struct	r1=Output Tile Root	{J}
08003DEC	Text_DrawBlank	Draws a blank rect on background tile data, where the given text would have been drawn	r0=Text Struct	r1=Output Tile Root	{J}
08003F28	Text_AppendString	Appends String to Text graphics	r0=Text Struct, r1=String pointer	{J}
0800407C	Text_AppendNumberOr2Dashes	Same as above, except 0xFF will display "--"	r0=Text Struct	r1=Number (or 0xFF for "--")	{J}
080043B8	Text_InsertString	Inserts String on Text	r0=Text Struct	r1=Cursor Start to insert to	r2=Color Id	r3=String pointer	{J}
080043DC	Text_InsertNumberOr2Dashes	Inserts Dec Number or 2 dashes on Text	r0=Text Struct, r1=Cursor Start to insert to	r2=Color Id	r3=Number (or 0xFF for "--")	{J}
08003E0C	GetStringTextWidth	Returns length of given string as drawn text given current font	r0=String pointer (null terminated ofc)	{J}
08003EAC	GetStringTextCenteredPos	Returns pos of Text for the given string to be center given arg length	r0=tile width	r1=String pointer	{J}
08004374	DrawTextInline	Draws text on screen without *needing* a text struct	r0=Text Struct (0 for temporary), r1=Output tile pointer root	r2=color id	r3=local x start	[sp]=tile width	[sp+4]=String pointer	{J}


//https://www.dropbox.com/sh/zymc1h221nnxpm9/AAA1sHR4hvxFxZYqOF3zqkG6a/Stan/_Notes?dl=0&preview=GameDataStruct.txt
@GameData@00	byte	nazo1
@GameData@01	byte	6C Main 2 Skip Counted	(Main 2 6C Exec will be skipped if this is non 0)
@GameData@02	byte	nazo2
@GameData@03	byte	GameData State bitfield	&0x01:? &0x02:? &0x04:? &0x08:? &0x10:? &0x20:? &0x40:When set, prevents things like gaining wexp, leveling up or recieving support bonuses (Link Arena Flag Maybe?) &0x80:?
@GameData@04	short	VerticalCounter	(IOReg:04000006) state at the end of the last main loop iteration
@GameData@0C	word	Current Real Camera Pos?
@GameData@10	word	nazo3
@GameData@14	word	Target Map Camera Pos?
@GameData@18	word	nazo4
@GameData@1C	word	Another Real Camera Pos?
@GameData@20	word	ANOTHER Real Camera Pos.
@GameData@24	word	Some Real Camera *Offset* (Used When Setting Up Backgrounds)

0202BCB0	@GameData	GameData	{U}
0202BCAC	@GameData	GameData	{J}


//https://www.dropbox.com/sh/zymc1h221nnxpm9/AAA1sHR4hvxFxZYqOF3zqkG6a/Stan/_Notes?dl=0&preview=KeyStatus.txt
@KeyStatusBuffer@00	byte	FirstTickDelay
@KeyStatusBuffer@01	byte	NextTickDelay
@KeyStatusBuffer@02	byte	TickDownCounter	(decreased by one each frame, reset to FirstTickDelay when Presses change and NextTickDelay when reaches 0)
@KeyStatusBuffer@03	byte	unused 
@KeyStatusBuffer@04	short	Current
@KeyStatusBuffer@06	short	TickPresses	 1 For Press|Tick&Pressed, 0 Otherwise
@KeyStatusBuffer@08	short	NewPresses:  1 For Press, 0 Otherwise
@KeyStatusBuffer@0A	short	Previous
@KeyStatusBuffer@0C	short	LastPressState: Current, but set only if NewPresses is not null
@KeyStatusBuffer@0E	short	Release	1 for Release (A B L R Only), 0 Otherwise
@KeyStatusBuffer@10	short	Another NewPresses?
@KeyStatusBuffer@12	short	Time since last	Non-Start Non-Select Button was pressed

02024CC0	@KeyStatusBuffer	KeyStatusBuffer	{U}
02024CC0	@KeyStatusBuffer	KeyStatusBuffer	{J}
0858791C	KeyStatusBuffer Pointer	{U}
085775CC	KeyStatusBuffer Pointer	{J}


//https://www.dropbox.com/sh/zymc1h221nnxpm9/AAA1sHR4hvxFxZYqOF3zqkG6a/Stan/_Notes?dl=0&preview=World+Map+Notes.txt
@GmapMUsData@00	byte	some bitfield (&1=set when linked Gmap MU prim is used?, &2=Use class (char otherwise))
@GmapMUsData@01	byte	Current WM Location Index?
@GmapMUsData@02	short	Char/Class ID
03005290	@GmapMUsData	GmapMUsData	{U}

//http://ngmansion.xyz/wiki/hackfe/index.php?%E8%A7%A3%E8%AA%AC/%E7%B5%82%E7%AB%A0%E3%81%B8%E3%81%AE%E9%81%93%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E7%8F%BE%E8%B1%A1%E3%81%AE%E8%80%83%E5%AF%9F
03005314	Worldmap Show RoadID 0	{J}
03005315	Worldmap Show RoadID 1	{J}
03005316	Worldmap Show RoadID 2	{J}
03005317	Worldmap Show RoadID 3	{J}
03005318	Worldmap Show RoadID 4	{J}
03005319	Worldmap Show RoadID 5	{J}
0300531A	Worldmap Show RoadID 6	{J}
0300531B	Worldmap Show RoadID 7	{J}
0300531C	Worldmap Show RoadID 8	{J}
0300531D	Worldmap Show RoadID 9	{J}
0300531F	Worldmap Show RoadID 10	{J}
03005320	Worldmap Show RoadID 11	{J}
03005321	Worldmap Show RoadID 12	{J}
03005322	Worldmap Show RoadID 13	{J}
03005323	Worldmap Show RoadID 14	{J}
03005324	Worldmap Show RoadID 15	{J}
03005325	Worldmap Show RoadID 16	{J}
03005326	Worldmap Show RoadID 17	{J}
03005327	Worldmap Show RoadID 18	{J}
03005328	Worldmap Show RoadID 19	{J}
03005329	Worldmap Show RoadID 20	{J}
0300532A	Worldmap Show RoadID 21	{J}
0300532B	Worldmap Show RoadID 22	{J}
0300532C	Worldmap Show RoadID 23	{J}
0300532D	Worldmap Show RoadID 24	{J}
0300532E	Worldmap Show RoadID 25	{J}
0300532F	Worldmap Show RoadID 26	{J}
03005330	Worldmap Show RoadID 27	{J}
03005331	Worldmap Show RoadID 28	{J}
03005332	Worldmap Show RoadID 29	{J}
03005333	Worldmap Show RoadID 30	{J}

03005324	Worldmap Show RoadID 0	{U}
03005325	Worldmap Show RoadID 1	{U}
03005326	Worldmap Show RoadID 2	{U}
03005327	Worldmap Show RoadID 3	{U}
03005328	Worldmap Show RoadID 4	{U}
03005329	Worldmap Show RoadID 5	{U}
0300532A	Worldmap Show RoadID 6	{U}
0300532B	Worldmap Show RoadID 7	{U}
0300532C	Worldmap Show RoadID 8	{U}
0300532D	Worldmap Show RoadID 9	{U}
0300532F	Worldmap Show RoadID 10	{U}
03005330	Worldmap Show RoadID 11	{U}
03005331	Worldmap Show RoadID 12	{U}
03005332	Worldmap Show RoadID 13	{U}
03005333	Worldmap Show RoadID 14	{U}
03005334	Worldmap Show RoadID 15	{U}
03005335	Worldmap Show RoadID 16	{U}
03005336	Worldmap Show RoadID 17	{U}
03005337	Worldmap Show RoadID 18	{U}
03005338	Worldmap Show RoadID 19	{U}
03005339	Worldmap Show RoadID 20	{U}
0300533A	Worldmap Show RoadID 21	{U}
0300533B	Worldmap Show RoadID 22	{U}
0300533C	Worldmap Show RoadID 23	{U}
0300533D	Worldmap Show RoadID 24	{U}
0300533E	Worldmap Show RoadID 25	{U}
0300533F	Worldmap Show RoadID 26	{U}
03005340	Worldmap Show RoadID 27	{U}
03005341	Worldmap Show RoadID 28	{U}
03005342	Worldmap Show RoadID 29	{U}
03005343	Worldmap Show RoadID 30	{U}

//https://www.dropbox.com/sh/zymc1h221nnxpm9/AACrgal3LFRvbDKL-5qDxF3-a/Tequila/Teq%20Doq?dl=0&preview=Better+Notes.txt
@MapSize@0	short	Width
@MapSize@2	short	Height
0202E4D4	@MapSize	MapSize	{U}
0202E4D0	@MapSize	MapSize	{J}


@AttackerBattleStruct@00	short	Seems to be a bitfield	(0x2 seems to be 'battle hasn't started yet') (0x20 is arena)
@AttackerBattleStruct@02	short	Type of animation?	No idea, really. -Appears to be range
@AttackerBattleStruct@04	short	Damage (Attack - defense)
@AttackerBattleStruct@06	short	Attack
@AttackerBattleStruct@08	short	Defense
@AttackerBattleStruct@0A	short	Battle hit
@AttackerBattleStruct@0C	short	Battle crit
@AttackerBattleStruct@0E	short	Lethality chance

0203A4D4	@AttackerBattleStruct	AttackerBattleStruct	{U}
0203A4D0	@AttackerBattleStruct	AttackerBattleStruct	{J}

@DefenderBattleStruct@00	byte	Option1	0x01=Critical 0x02=Miss 0x04=? 0x08=? 0x10=Brave 0x20=? 0x40=Poison 0x80=Devil
@DefenderBattleStruct@01	byte	Option2	0x01=Steal HP 0x02=? 0x04=Triangle attack 0x08=Lethality 0x10=? 0x20=Petrified 0x40=Sure Shot 0x80=Great Shield
@DefenderBattleStruct@02	byte	Option3	0x01=Pierce 0x02=? 0x04=? 0x08=End Battle 0x10=?
@DefenderBattleStruct@03	byte	Damage

0203A5EC	@DefenderBattleStruct	DefenderBattleStruct	{U}
0203A5E8	@DefenderBattleStruct	DefenderBattleStruct	{J}

@ActionBattleStruct@06	byte	Apparently sometimes has the item id
@ActionBattleStruct@0C	byte	Current character's allegiance
@ActionBattleStruct@0D	byte	Target's allegiance	Target's allegiance byte (once selected)
@ActionBattleStruct@0E	byte	moved-to X	Current character's moved-to x coordinate
@ActionBattleStruct@0F	byte	moved-to Y	Current character's moved-to y coordinate
@ActionBattleStruct@10	byte	Squares moved this turn
@ActionBattleStruct@11	byte	Action taken this turn	0x01=Wait 0x02=Combat (Attack) 0x03=Staff 0x04=Dance/Play 0x05=Unused? 0x06=Steal 0x07=Summon 0x08=DK Summoning (I think) 0x09=Rescue 0x0A=Drop 0x0B=Take 0x0C=Give 0x0D=Unused? (I use this for auto-promotions) 0x0E=Talk 0x0F=Support 0x10=Visit 0x11=Seize 0x12=Door 0x13=Unused? 0x14=Chest 0x15=Pick 0x16=Unused? 0x17=Bought something from shop/armory/(presumably) secret shop 0x18=Unused? 0x19=Arena 0x1A=Use item 0x1B=Unused? (stored at 2D774) 0x1C=Unused? (stored at 9E3BA/9E8F2) 0x1D=Trade/Supply 0x1E=Wait due to finding an enemy in fog 0x1F=Backing out of an action, under certain circumstances 0x20=? 0x21=Ride (ballista) 0x22=Exit (ballista)
@ActionBattleStruct@12	Inventory slot number (0-4)

0203A958	@ActionBattleStruct	ActionBattleStruct	{U}
0203A954	@ActionBattleStruct	ActionBattleStruct	{J}

@ChapterData@08	word	Money
@ChapterData@0D	byte	Vision Range	(0 if there's no fog)
@ChapterData@0E	byte	Chapter ID
@ChapterData@0F	byte	Phase (0x0=player, 0x40=allied, 0x80=enemy)
@ChapterData@10	short	Turn number
@ChapterData@12	byte	Cursor x position (only when displaying a menu?)
@ChapterData@13	byte	Cursor y position (only when displaying a menu?)
@ChapterData@14	byte	Chapter Stuff	&01=Stat screen page 1 (Inventory) (0=stats) (these are set after backing out of the stat menu)	&02=Stat screen page 2 (Difficulty)	&10=Set when on prep screen	&40=Set for hard mode	&80=Don't gain weapon exp (not sure what this is for)
@ChapterData@15	byte	Weather (0=clear, 1=snow, 2=snowstorm, 4=rain) (funnily enough, if non-zero, arena battles take support bonuses into account)
@ChapterData@16	short	Number of support points gained this chapter?
@ChapterData@1B	byte	Mode (1=prologue-8, 2=Eirika 3=Ephraim)
@ChapterData@40	byte	Option1	 &02=Terrain window (set=off, not set=on)  &04=Unit window (set=burst, not set=panel) &08=Unit window (set=off, not set=panel)  &10=Autocursor (set=off, not set=on)
 &20=Text speed (set=normal, not set=slow)  &40=Text speed (set=fast, not set=slow, set + 0x20 also set=max)  &80=Game speed (set=fast, not set=normal)
@ChapterData@41	byte	Option2	&01=Music (set=off, not set=on) &02=Sound effects (set=off, not set=on) &04=Window color (set=orange, not set=blue) &08=Window color (set=green, not set=blue, set + 0x08 also set=black) &10=Something about displaying B/W/L on the stat screen &40=Autoend turns (set=off, not set=on) &80=Subtitle help (set=off, not set=on)
@ChapterData@42	byte	Option3	&01=Show objective (set=off, not set=on) &02=Combat animations off (if both 2 and 4 are set, combat animations are on with backgrounds on) &04=Combat animations solo (if both 2 and 4 are not set, combat animations are on with backgrounds off) &08=Combat info window (set=detail, not set=strat) &10=Combat info window (set=off, not set=strat)

0202BCF0	@ChapterData	ChapterData	{U}
0202BCEC	@ChapterData	ChapterData	{J}


@CharacterBattleStatistic@00	byte	Losses
@CharacterBattleStatistic@01	short	Number of times a unit performs an action (seems to increase by 2) (non-aligned halfword)
@CharacterBattleStatistic@03	byte	Number of times selected (caps at 199)
@CharacterBattleStatistic@04	byte	Number of times viewed in stat screen (caps at 199)
@CharacterBattleStatistic@05	short	Lower 4 bits are the (most recent) chapter number they died on, upper 4 bits (along with byte 0x6) are the turn number they died on
@CharacterBattleStatistic@09	short	Top 4 bits, along with 0xA, is exp gained this chapter
@CharacterBattleStatistic@0B	byte	Along with bottom 2 bits of 0xC, wins
@CharacterBattleStatistic@0C	short	Bottom 2 bits are wins, top 6 bits, along with the bottom 6 bits of 0xD, are battles
@CharacterBattleStatistic@0E	byte	Character number of the most recent killer

0203E884	@CharacterBattleStatistic	Unit1	{U}
0203E894	@CharacterBattleStatistic	Unit2	{U}
0203E8A4	@CharacterBattleStatistic	Unit3	{U}
0203E8B4	@CharacterBattleStatistic	Unit4	{U}
0203E8C4	@CharacterBattleStatistic	Unit5	{U}
0203E8D4	@CharacterBattleStatistic	Unit6	{U}
0203E8E4	@CharacterBattleStatistic	Unit7	{U}
0203E8F4	@CharacterBattleStatistic	Unit8	{U}
0203E904	@CharacterBattleStatistic	Unit9	{U}
0203E914	@CharacterBattleStatistic	Unit10	{U}
0203E924	@CharacterBattleStatistic	Unit11	{U}
0203E934	@CharacterBattleStatistic	Unit12	{U}
0203E944	@CharacterBattleStatistic	Unit13	{U}
0203E954	@CharacterBattleStatistic	Unit14	{U}
0203E964	@CharacterBattleStatistic	Unit15	{U}
0203E974	@CharacterBattleStatistic	Unit16	{U}
0203E984	@CharacterBattleStatistic	Unit17	{U}
0203E994	@CharacterBattleStatistic	Unit18	{U}
0203E9A4	@CharacterBattleStatistic	Unit19	{U}
0203E9B4	@CharacterBattleStatistic	Unit20	{U}
0203E9C4	@CharacterBattleStatistic	Unit21	{U}
0203E9D4	@CharacterBattleStatistic	Unit22	{U}
0203E9E4	@CharacterBattleStatistic	Unit23	{U}
0203E9F4	@CharacterBattleStatistic	Unit24	{U}
0203EA04	@CharacterBattleStatistic	Unit25	{U}
0203EA14	@CharacterBattleStatistic	Unit26	{U}
0203EA24	@CharacterBattleStatistic	Unit27	{U}
0203EA34	@CharacterBattleStatistic	Unit28	{U}
0203EA44	@CharacterBattleStatistic	Unit29	{U}
0203EA54	@CharacterBattleStatistic	Unit30	{U}
0203EA64	@CharacterBattleStatistic	Unit31	{U}
0203EA74	@CharacterBattleStatistic	Unit32	{U}
0203EA84	@CharacterBattleStatistic	Unit33	{U}
0203EA94	@CharacterBattleStatistic	Unit34	{U}
0203EAA4	@CharacterBattleStatistic	Unit35	{U}
0203EAB4	@CharacterBattleStatistic	Unit36	{U}
0203EAC4	@CharacterBattleStatistic	Unit37	{U}
0203EAD4	@CharacterBattleStatistic	Unit38	{U}
0203EAE4	@CharacterBattleStatistic	Unit39	{U}
0203EAF4	@CharacterBattleStatistic	Unit40	{U}
0203EB04	@CharacterBattleStatistic	Unit41	{U}
0203EB14	@CharacterBattleStatistic	Unit42	{U}
0203EB24	@CharacterBattleStatistic	Unit43	{U}
0203EB34	@CharacterBattleStatistic	Unit44	{U}
0203EB44	@CharacterBattleStatistic	Unit45	{U}
0203EB54	@CharacterBattleStatistic	Unit46	{U}
0203EB64	@CharacterBattleStatistic	Unit47	{U}
0203EB74	@CharacterBattleStatistic	Unit48	{U}
0203EB84	@CharacterBattleStatistic	Unit49	{U}
0203EB94	@CharacterBattleStatistic	Unit50	{U}
0203EBA4	@CharacterBattleStatistic	Unit51	{U}
0203EBB4	@CharacterBattleStatistic	Unit52	{U}
0203EBC4	@CharacterBattleStatistic	Unit53	{U}
0203EBD4	@CharacterBattleStatistic	Unit54	{U}
0203EBE4	@CharacterBattleStatistic	Unit55	{U}
0203EBF4	@CharacterBattleStatistic	Unit56	{U}
0203EC04	@CharacterBattleStatistic	Unit57	{U}
0203EC14	@CharacterBattleStatistic	Unit58	{U}
0203EC24	@CharacterBattleStatistic	Unit59	{U}
0203EC34	@CharacterBattleStatistic	Unit60	{U}
0203EC44	@CharacterBattleStatistic	Unit61	{U}
0203EC54	@CharacterBattleStatistic	Unit62	{U}
0203EC64	@CharacterBattleStatistic	Unit63	{U}
0203EC74	@CharacterBattleStatistic	Unit64	{U}
0203EC84	@CharacterBattleStatistic	Unit65	{U}
0203EC94	@CharacterBattleStatistic	Unit66	{U}
0203ECA4	@CharacterBattleStatistic	Unit67	{U}
0203ECB4	@CharacterBattleStatistic	Unit68	{U}
0203ECC4	@CharacterBattleStatistic	Unit69	{U}

0203E890	@CharacterBattleStatistic	Unit1	{J}
0203E8A0	@CharacterBattleStatistic	Unit2	{J}
0203E8B0	@CharacterBattleStatistic	Unit3	{J}
0203E8C0	@CharacterBattleStatistic	Unit4	{J}
0203E8D0	@CharacterBattleStatistic	Unit5	{J}
0203E8E0	@CharacterBattleStatistic	Unit6	{J}
0203E8F0	@CharacterBattleStatistic	Unit7	{J}
0203E900	@CharacterBattleStatistic	Unit8	{J}
0203E910	@CharacterBattleStatistic	Unit9	{J}
0203E920	@CharacterBattleStatistic	Unit10	{J}
0203E930	@CharacterBattleStatistic	Unit11	{J}
0203E940	@CharacterBattleStatistic	Unit12	{J}
0203E950	@CharacterBattleStatistic	Unit13	{J}
0203E960	@CharacterBattleStatistic	Unit14	{J}
0203E970	@CharacterBattleStatistic	Unit15	{J}
0203E980	@CharacterBattleStatistic	Unit16	{J}
0203E990	@CharacterBattleStatistic	Unit17	{J}
0203E9A0	@CharacterBattleStatistic	Unit18	{J}
0203E9B0	@CharacterBattleStatistic	Unit19	{J}
0203E9C0	@CharacterBattleStatistic	Unit20	{J}
0203E9D0	@CharacterBattleStatistic	Unit21	{J}
0203E9E0	@CharacterBattleStatistic	Unit22	{J}
0203E9F0	@CharacterBattleStatistic	Unit23	{J}
0203EA00	@CharacterBattleStatistic	Unit24	{J}
0203EA10	@CharacterBattleStatistic	Unit25	{J}
0203EA20	@CharacterBattleStatistic	Unit26	{J}
0203EA30	@CharacterBattleStatistic	Unit27	{J}
0203EA40	@CharacterBattleStatistic	Unit28	{J}
0203EA50	@CharacterBattleStatistic	Unit29	{J}
0203EA60	@CharacterBattleStatistic	Unit30	{J}
0203EA70	@CharacterBattleStatistic	Unit31	{J}
0203EA80	@CharacterBattleStatistic	Unit32	{J}
0203EA90	@CharacterBattleStatistic	Unit33	{J}
0203EAA0	@CharacterBattleStatistic	Unit34	{J}
0203EAB0	@CharacterBattleStatistic	Unit35	{J}
0203EAC0	@CharacterBattleStatistic	Unit36	{J}
0203EAD0	@CharacterBattleStatistic	Unit37	{J}
0203EAE0	@CharacterBattleStatistic	Unit38	{J}
0203EAF0	@CharacterBattleStatistic	Unit39	{J}
0203EB00	@CharacterBattleStatistic	Unit40	{J}
0203EB10	@CharacterBattleStatistic	Unit41	{J}
0203EB20	@CharacterBattleStatistic	Unit42	{J}
0203EB30	@CharacterBattleStatistic	Unit43	{J}
0203EB40	@CharacterBattleStatistic	Unit44	{J}
0203EB50	@CharacterBattleStatistic	Unit45	{J}
0203EB60	@CharacterBattleStatistic	Unit46	{J}
0203EB70	@CharacterBattleStatistic	Unit47	{J}
0203EB80	@CharacterBattleStatistic	Unit48	{J}
0203EB90	@CharacterBattleStatistic	Unit49	{J}
0203EBA0	@CharacterBattleStatistic	Unit50	{J}
0203EBB0	@CharacterBattleStatistic	Unit51	{J}
0203EBC0	@CharacterBattleStatistic	Unit52	{J}
0203EBD0	@CharacterBattleStatistic	Unit53	{J}
0203EBE0	@CharacterBattleStatistic	Unit54	{J}
0203EBF0	@CharacterBattleStatistic	Unit55	{J}
0203EC00	@CharacterBattleStatistic	Unit56	{J}
0203EC10	@CharacterBattleStatistic	Unit57	{J}
0203EC20	@CharacterBattleStatistic	Unit58	{J}
0203EC30	@CharacterBattleStatistic	Unit59	{J}
0203EC40	@CharacterBattleStatistic	Unit60	{J}
0203EC50	@CharacterBattleStatistic	Unit61	{J}
0203EC60	@CharacterBattleStatistic	Unit62	{J}
0203EC70	@CharacterBattleStatistic	Unit63	{J}
0203EC80	@CharacterBattleStatistic	Unit64	{J}
0203EC90	@CharacterBattleStatistic	Unit65	{J}
0203ECA0	@CharacterBattleStatistic	Unit66	{J}
0203ECB0	@CharacterBattleStatistic	Unit67	{J}
0203ECC0	@CharacterBattleStatistic	Unit68	{J}
0203ECD0	@CharacterBattleStatistic	Unit69	{J}

@ClearTurn@00	short	章IDとターン数	ターン数 << 7 + 章ID
@ClearTurn@02	short	クリアタイム秒数

0203ECF0	@ClearTurn	章クリアターン0	{J}
0203ECF4	@ClearTurn	章クリアターン1	{J}
0203ECF8	@ClearTurn	章クリアターン2	{J}
0203ECFC	@ClearTurn	章クリアターン3	{J}
0203ED00	@ClearTurn	章クリアターン4	{J}
0203ED04	@ClearTurn	章クリアターン5	{J}
0203ED08	@ClearTurn	章クリアターン6	{J}
0203ED0C	@ClearTurn	章クリアターン7	{J}
0203ED10	@ClearTurn	章クリアターン8	{J}
0203ED14	@ClearTurn	章クリアターン9	{J}
0203ED18	@ClearTurn	章クリアターン10	{J}
0203ED1C	@ClearTurn	章クリアターン11	{J}
0203ED20	@ClearTurn	章クリアターン12	{J}
0203ED24	@ClearTurn	章クリアターン13	{J}
0203ED28	@ClearTurn	章クリアターン14	{J}
0203ED2C	@ClearTurn	章クリアターン15	{J}
0203ED30	@ClearTurn	章クリアターン16	{J}
0203ED34	@ClearTurn	章クリアターン17	{J}
0203ED38	@ClearTurn	章クリアターン18	{J}
0203ED3C	@ClearTurn	章クリアターン19	{J}
0203ED40	@ClearTurn	章クリアターン20	{J}
0203ED44	@ClearTurn	章クリアターン21	{J}
0203ED48	@ClearTurn	章クリアターン22	{J}
0203ED4C	@ClearTurn	章クリアターン23	{J}
0203ED50	@ClearTurn	章クリアターン24	{J}
0203ED54	@ClearTurn	章クリアターン25	{J}
0203ED58	@ClearTurn	章クリアターン26	{J}
0203ED5C	@ClearTurn	章クリアターン27	{J}
0203ED60	@ClearTurn	章クリアターン28	{J}
0203ED64	@ClearTurn	章クリアターン29	{J}
0203ED68	@ClearTurn	章クリアターン30	{J}
0203ED6C	@ClearTurn	章クリアターン31	{J}
0203ED70	@ClearTurn	章クリアターン32	{J}
0203ED74	@ClearTurn	章クリアターン33	{J}
0203ED78	@ClearTurn	章クリアターン34	{J}
0203ED7C	@ClearTurn	章クリアターン35	{J}

0203ECF4	@ClearTurn	章クリアターン0	{U}
0203ECF8	@ClearTurn	章クリアターン1	{U}
0203ECFC	@ClearTurn	章クリアターン2	{U}
0203ED00	@ClearTurn	章クリアターン3	{U}
0203ED04	@ClearTurn	章クリアターン4	{U}
0203ED08	@ClearTurn	章クリアターン5	{U}
0203ED0C	@ClearTurn	章クリアターン6	{U}
0203ED10	@ClearTurn	章クリアターン7	{U}
0203ED14	@ClearTurn	章クリアターン8	{U}
0203ED18	@ClearTurn	章クリアターン9	{U}
0203ED1C	@ClearTurn	章クリアターン10	{U}
0203ED20	@ClearTurn	章クリアターン11	{U}
0203ED24	@ClearTurn	章クリアターン12	{U}
0203ED28	@ClearTurn	章クリアターン13	{U}
0203ED2C	@ClearTurn	章クリアターン14	{U}
0203ED30	@ClearTurn	章クリアターン15	{U}
0203ED34	@ClearTurn	章クリアターン16	{U}
0203ED38	@ClearTurn	章クリアターン17	{U}
0203ED3C	@ClearTurn	章クリアターン18	{U}
0203ED40	@ClearTurn	章クリアターン19	{U}
0203ED44	@ClearTurn	章クリアターン20	{U}
0203ED48	@ClearTurn	章クリアターン21	{U}
0203ED4C	@ClearTurn	章クリアターン22	{U}
0203ED50	@ClearTurn	章クリアターン23	{U}
0203ED54	@ClearTurn	章クリアターン24	{U}
0203ED58	@ClearTurn	章クリアターン25	{U}
0203ED5C	@ClearTurn	章クリアターン26	{U}
0203ED60	@ClearTurn	章クリアターン27	{U}
0203ED64	@ClearTurn	章クリアターン28	{U}
0203ED68	@ClearTurn	章クリアターン29	{U}
0203ED6C	@ClearTurn	章クリアターン30	{U}
0203ED70	@ClearTurn	章クリアターン31	{U}
0203ED74	@ClearTurn	章クリアターン32	{U}
0203ED78	@ClearTurn	章クリアターン33	{U}
0203ED7C	@ClearTurn	章クリアターン34	{U}
0203ED80	@ClearTurn	章クリアターン35	{U}


@ITEMSTOCK@00	byte	アイテムID
@ITEMSTOCK@01	byte	アイテム個数
0203A818	@ITEMSTOCK	輸送隊在庫1	{J}
0203A81A	@ITEMSTOCK	輸送隊在庫2	{J}
0203A81C	@ITEMSTOCK	輸送隊在庫3	{J}
0203A81E	@ITEMSTOCK	輸送隊在庫4	{J}
0203A820	@ITEMSTOCK	輸送隊在庫5	{J}
0203A822	@ITEMSTOCK	輸送隊在庫6	{J}
0203A824	@ITEMSTOCK	輸送隊在庫7	{J}
0203A826	@ITEMSTOCK	輸送隊在庫8	{J}
0203A828	@ITEMSTOCK	輸送隊在庫9	{J}
0203A82A	@ITEMSTOCK	輸送隊在庫10	{J}
0203A82C	@ITEMSTOCK	輸送隊在庫11	{J}
0203A82E	@ITEMSTOCK	輸送隊在庫12	{J}
0203A830	@ITEMSTOCK	輸送隊在庫13	{J}
0203A832	@ITEMSTOCK	輸送隊在庫14	{J}
0203A834	@ITEMSTOCK	輸送隊在庫15	{J}
0203A836	@ITEMSTOCK	輸送隊在庫16	{J}
0203A838	@ITEMSTOCK	輸送隊在庫17	{J}
0203A83A	@ITEMSTOCK	輸送隊在庫18	{J}
0203A83C	@ITEMSTOCK	輸送隊在庫19	{J}
0203A83E	@ITEMSTOCK	輸送隊在庫20	{J}
0203A840	@ITEMSTOCK	輸送隊在庫21	{J}
0203A842	@ITEMSTOCK	輸送隊在庫22	{J}
0203A844	@ITEMSTOCK	輸送隊在庫23	{J}
0203A846	@ITEMSTOCK	輸送隊在庫24	{J}
0203A848	@ITEMSTOCK	輸送隊在庫25	{J}
0203A84A	@ITEMSTOCK	輸送隊在庫26	{J}
0203A84C	@ITEMSTOCK	輸送隊在庫27	{J}
0203A84E	@ITEMSTOCK	輸送隊在庫28	{J}
0203A850	@ITEMSTOCK	輸送隊在庫29	{J}
0203A852	@ITEMSTOCK	輸送隊在庫30	{J}
0203A854	@ITEMSTOCK	輸送隊在庫31	{J}
0203A856	@ITEMSTOCK	輸送隊在庫32	{J}
0203A858	@ITEMSTOCK	輸送隊在庫33	{J}
0203A85A	@ITEMSTOCK	輸送隊在庫34	{J}
0203A85C	@ITEMSTOCK	輸送隊在庫35	{J}
0203A85E	@ITEMSTOCK	輸送隊在庫36	{J}
0203A860	@ITEMSTOCK	輸送隊在庫37	{J}
0203A862	@ITEMSTOCK	輸送隊在庫38	{J}
0203A864	@ITEMSTOCK	輸送隊在庫39	{J}
0203A866	@ITEMSTOCK	輸送隊在庫40	{J}
0203A868	@ITEMSTOCK	輸送隊在庫41	{J}
0203A86A	@ITEMSTOCK	輸送隊在庫42	{J}
0203A86C	@ITEMSTOCK	輸送隊在庫43	{J}
0203A86E	@ITEMSTOCK	輸送隊在庫44	{J}
0203A870	@ITEMSTOCK	輸送隊在庫45	{J}
0203A872	@ITEMSTOCK	輸送隊在庫46	{J}
0203A874	@ITEMSTOCK	輸送隊在庫47	{J}
0203A876	@ITEMSTOCK	輸送隊在庫48	{J}
0203A878	@ITEMSTOCK	輸送隊在庫49	{J}
0203A87A	@ITEMSTOCK	輸送隊在庫50	{J}
0203A87C	@ITEMSTOCK	輸送隊在庫51	{J}
0203A87E	@ITEMSTOCK	輸送隊在庫52	{J}
0203A880	@ITEMSTOCK	輸送隊在庫53	{J}
0203A882	@ITEMSTOCK	輸送隊在庫54	{J}
0203A884	@ITEMSTOCK	輸送隊在庫55	{J}
0203A886	@ITEMSTOCK	輸送隊在庫56	{J}
0203A888	@ITEMSTOCK	輸送隊在庫57	{J}
0203A88A	@ITEMSTOCK	輸送隊在庫58	{J}
0203A88C	@ITEMSTOCK	輸送隊在庫59	{J}
0203A88E	@ITEMSTOCK	輸送隊在庫60	{J}
0203A890	@ITEMSTOCK	輸送隊在庫61	{J}
0203A892	@ITEMSTOCK	輸送隊在庫62	{J}
0203A894	@ITEMSTOCK	輸送隊在庫63	{J}
0203A896	@ITEMSTOCK	輸送隊在庫64	{J}
0203A898	@ITEMSTOCK	輸送隊在庫65	{J}
0203A89A	@ITEMSTOCK	輸送隊在庫66	{J}
0203A89C	@ITEMSTOCK	輸送隊在庫67	{J}
0203A89E	@ITEMSTOCK	輸送隊在庫68	{J}
0203A8A0	@ITEMSTOCK	輸送隊在庫69	{J}
0203A8A2	@ITEMSTOCK	輸送隊在庫70	{J}
0203A8A4	@ITEMSTOCK	輸送隊在庫71	{J}
0203A8A6	@ITEMSTOCK	輸送隊在庫72	{J}
0203A8A8	@ITEMSTOCK	輸送隊在庫73	{J}
0203A8AA	@ITEMSTOCK	輸送隊在庫74	{J}
0203A8AC	@ITEMSTOCK	輸送隊在庫75	{J}
0203A8AE	@ITEMSTOCK	輸送隊在庫76	{J}
0203A8B0	@ITEMSTOCK	輸送隊在庫77	{J}
0203A8B2	@ITEMSTOCK	輸送隊在庫78	{J}
0203A8B4	@ITEMSTOCK	輸送隊在庫79	{J}
0203A8B6	@ITEMSTOCK	輸送隊在庫80	{J}
0203A8B8	@ITEMSTOCK	輸送隊在庫81	{J}
0203A8BA	@ITEMSTOCK	輸送隊在庫82	{J}
0203A8BC	@ITEMSTOCK	輸送隊在庫83	{J}
0203A8BE	@ITEMSTOCK	輸送隊在庫84	{J}
0203A8C0	@ITEMSTOCK	輸送隊在庫85	{J}
0203A8C2	@ITEMSTOCK	輸送隊在庫86	{J}
0203A8C4	@ITEMSTOCK	輸送隊在庫87	{J}
0203A8C6	@ITEMSTOCK	輸送隊在庫88	{J}
0203A8C8	@ITEMSTOCK	輸送隊在庫89	{J}
0203A8CA	@ITEMSTOCK	輸送隊在庫90	{J}
0203A8CC	@ITEMSTOCK	輸送隊在庫91	{J}
0203A8CE	@ITEMSTOCK	輸送隊在庫92	{J}
0203A8D0	@ITEMSTOCK	輸送隊在庫93	{J}
0203A8D2	@ITEMSTOCK	輸送隊在庫94	{J}
0203A8D4	@ITEMSTOCK	輸送隊在庫95	{J}
0203A8D6	@ITEMSTOCK	輸送隊在庫96	{J}
0203A8D8	@ITEMSTOCK	輸送隊在庫97	{J}
0203A8DA	@ITEMSTOCK	輸送隊在庫98	{J}
0203A8DC	@ITEMSTOCK	輸送隊在庫99	{J}
0203A8DE	@ITEMSTOCK	輸送隊在庫100	{J}

0203A81C	@ITEMSTOCK	輸送隊在庫1	{U}
0203A81E	@ITEMSTOCK	輸送隊在庫2	{U}
0203A820	@ITEMSTOCK	輸送隊在庫3	{U}
0203A822	@ITEMSTOCK	輸送隊在庫4	{U}
0203A824	@ITEMSTOCK	輸送隊在庫5	{U}
0203A826	@ITEMSTOCK	輸送隊在庫6	{U}
0203A828	@ITEMSTOCK	輸送隊在庫7	{U}
0203A82A	@ITEMSTOCK	輸送隊在庫8	{U}
0203A82C	@ITEMSTOCK	輸送隊在庫9	{U}
0203A82E	@ITEMSTOCK	輸送隊在庫10	{U}
0203A830	@ITEMSTOCK	輸送隊在庫11	{U}
0203A832	@ITEMSTOCK	輸送隊在庫12	{U}
0203A834	@ITEMSTOCK	輸送隊在庫13	{U}
0203A836	@ITEMSTOCK	輸送隊在庫14	{U}
0203A838	@ITEMSTOCK	輸送隊在庫15	{U}
0203A83A	@ITEMSTOCK	輸送隊在庫16	{U}
0203A83C	@ITEMSTOCK	輸送隊在庫17	{U}
0203A83E	@ITEMSTOCK	輸送隊在庫18	{U}
0203A840	@ITEMSTOCK	輸送隊在庫19	{U}
0203A842	@ITEMSTOCK	輸送隊在庫20	{U}
0203A844	@ITEMSTOCK	輸送隊在庫21	{U}
0203A846	@ITEMSTOCK	輸送隊在庫22	{U}
0203A848	@ITEMSTOCK	輸送隊在庫23	{U}
0203A84A	@ITEMSTOCK	輸送隊在庫24	{U}
0203A84C	@ITEMSTOCK	輸送隊在庫25	{U}
0203A84E	@ITEMSTOCK	輸送隊在庫26	{U}
0203A850	@ITEMSTOCK	輸送隊在庫27	{U}
0203A852	@ITEMSTOCK	輸送隊在庫28	{U}
0203A854	@ITEMSTOCK	輸送隊在庫29	{U}
0203A856	@ITEMSTOCK	輸送隊在庫30	{U}
0203A858	@ITEMSTOCK	輸送隊在庫31	{U}
0203A85A	@ITEMSTOCK	輸送隊在庫32	{U}
0203A85C	@ITEMSTOCK	輸送隊在庫33	{U}
0203A85E	@ITEMSTOCK	輸送隊在庫34	{U}
0203A860	@ITEMSTOCK	輸送隊在庫35	{U}
0203A862	@ITEMSTOCK	輸送隊在庫36	{U}
0203A864	@ITEMSTOCK	輸送隊在庫37	{U}
0203A866	@ITEMSTOCK	輸送隊在庫38	{U}
0203A868	@ITEMSTOCK	輸送隊在庫39	{U}
0203A86A	@ITEMSTOCK	輸送隊在庫40	{U}
0203A86C	@ITEMSTOCK	輸送隊在庫41	{U}
0203A86E	@ITEMSTOCK	輸送隊在庫42	{U}
0203A870	@ITEMSTOCK	輸送隊在庫43	{U}
0203A872	@ITEMSTOCK	輸送隊在庫44	{U}
0203A874	@ITEMSTOCK	輸送隊在庫45	{U}
0203A876	@ITEMSTOCK	輸送隊在庫46	{U}
0203A878	@ITEMSTOCK	輸送隊在庫47	{U}
0203A87A	@ITEMSTOCK	輸送隊在庫48	{U}
0203A87C	@ITEMSTOCK	輸送隊在庫49	{U}
0203A87E	@ITEMSTOCK	輸送隊在庫50	{U}
0203A880	@ITEMSTOCK	輸送隊在庫51	{U}
0203A882	@ITEMSTOCK	輸送隊在庫52	{U}
0203A884	@ITEMSTOCK	輸送隊在庫53	{U}
0203A886	@ITEMSTOCK	輸送隊在庫54	{U}
0203A888	@ITEMSTOCK	輸送隊在庫55	{U}
0203A88A	@ITEMSTOCK	輸送隊在庫56	{U}
0203A88C	@ITEMSTOCK	輸送隊在庫57	{U}
0203A88E	@ITEMSTOCK	輸送隊在庫58	{U}
0203A890	@ITEMSTOCK	輸送隊在庫59	{U}
0203A892	@ITEMSTOCK	輸送隊在庫60	{U}
0203A894	@ITEMSTOCK	輸送隊在庫61	{U}
0203A896	@ITEMSTOCK	輸送隊在庫62	{U}
0203A898	@ITEMSTOCK	輸送隊在庫63	{U}
0203A89A	@ITEMSTOCK	輸送隊在庫64	{U}
0203A89C	@ITEMSTOCK	輸送隊在庫65	{U}
0203A89E	@ITEMSTOCK	輸送隊在庫66	{U}
0203A8A0	@ITEMSTOCK	輸送隊在庫67	{U}
0203A8A2	@ITEMSTOCK	輸送隊在庫68	{U}
0203A8A4	@ITEMSTOCK	輸送隊在庫69	{U}
0203A8A6	@ITEMSTOCK	輸送隊在庫70	{U}
0203A8A8	@ITEMSTOCK	輸送隊在庫71	{U}
0203A8AA	@ITEMSTOCK	輸送隊在庫72	{U}
0203A8AC	@ITEMSTOCK	輸送隊在庫73	{U}
0203A8AE	@ITEMSTOCK	輸送隊在庫74	{U}
0203A8B0	@ITEMSTOCK	輸送隊在庫75	{U}
0203A8B2	@ITEMSTOCK	輸送隊在庫76	{U}
0203A8B4	@ITEMSTOCK	輸送隊在庫77	{U}
0203A8B6	@ITEMSTOCK	輸送隊在庫78	{U}
0203A8B8	@ITEMSTOCK	輸送隊在庫79	{U}
0203A8BA	@ITEMSTOCK	輸送隊在庫80	{U}
0203A8BC	@ITEMSTOCK	輸送隊在庫81	{U}
0203A8BE	@ITEMSTOCK	輸送隊在庫82	{U}
0203A8C0	@ITEMSTOCK	輸送隊在庫83	{U}
0203A8C2	@ITEMSTOCK	輸送隊在庫84	{U}
0203A8C4	@ITEMSTOCK	輸送隊在庫85	{U}
0203A8C6	@ITEMSTOCK	輸送隊在庫86	{U}
0203A8C8	@ITEMSTOCK	輸送隊在庫87	{U}
0203A8CA	@ITEMSTOCK	輸送隊在庫88	{U}
0203A8CC	@ITEMSTOCK	輸送隊在庫89	{U}
0203A8CE	@ITEMSTOCK	輸送隊在庫90	{U}
0203A8D0	@ITEMSTOCK	輸送隊在庫91	{U}
0203A8D2	@ITEMSTOCK	輸送隊在庫92	{U}
0203A8D4	@ITEMSTOCK	輸送隊在庫93	{U}
0203A8D6	@ITEMSTOCK	輸送隊在庫94	{U}
0203A8D8	@ITEMSTOCK	輸送隊在庫95	{U}
0203A8DA	@ITEMSTOCK	輸送隊在庫96	{U}
0203A8DC	@ITEMSTOCK	輸送隊在庫97	{U}
0203A8DE	@ITEMSTOCK	輸送隊在庫98	{U}
0203A8E0	@ITEMSTOCK	輸送隊在庫99	{U}
0203A8E2	@ITEMSTOCK	輸送隊在庫100	{U}


03005260	フラグ 0x01-0x8	{J}
03005261	フラグ 0x09-0x10	{J}
03005262	フラグ 0x11-0x18	{J}
03005263	フラグ 0x19-0x20	{J}
03005264	フラグ 0x21-0x28	{J}
03005240	フラグ 0x65-0x6C	{J}
03005241	フラグ 0x6D-0x74	{J}
03005242	フラグ 0x75-0x7C	{J}
03005243	フラグ 0x7D-0x84	{J}
03005244	フラグ 0x85-0x8C	{J}
03005245	フラグ 0x8D-0x94	{J}
03005246	フラグ 0x95-0x9C	{J}
03005247	フラグ 0x9D-0xA4	{J}
03005248	フラグ 0xA5-0xAC	{J}
03005249	フラグ 0xAD-0xB4	{J}
0300524A	フラグ 0xB5-0xBC	{J}
0300524B	フラグ 0xBD-0xC4	{J}
0300524C	フラグ 0xC5-0xCC	{J}
0300524D	フラグ 0xCD-0xD4	{J}
0300524E	フラグ 0xD5-0xDC	{J}
0300524F	フラグ 0xDD-0xE4	{J}
03005250	フラグ 0xE5-0xEC	{J}
03005251	フラグ 0xED-0xF4	{J}
03005252	フラグ 0xF5-0xFC	{J}
03005253	フラグ 0xFD-0x104	{J}
03005254	フラグ 0x105-0x10C	{J}
03005255	フラグ 0x10D-0x114	{J}
03005256	フラグ 0x115-0x11C	{J}
03005257	フラグ 0x11D-0x124	{J}
03005258	フラグ 0x125-0x12C	{J}

03005270	フラグ 0x01-0x8	{U}
03005271	フラグ 0x09-0x10	{U}
03005272	フラグ 0x11-0x18	{U}
03005273	フラグ 0x19-0x20	{U}
03005274	フラグ 0x21-0x28	{U}
03005250	フラグ 0x65-0x6C	{U}
03005251	フラグ 0x6D-0x74	{U}
03005252	フラグ 0x75-0x7C	{U}
03005253	フラグ 0x7D-0x84	{U}
03005254	フラグ 0x85-0x8C	{U}
03005255	フラグ 0x8D-0x94	{U}
03005256	フラグ 0x95-0x9C	{U}
03005257	フラグ 0x9D-0xA4	{U}
03005258	フラグ 0xA5-0xAC	{U}
03005259	フラグ 0xAD-0xB4	{U}
0300525A	フラグ 0xB5-0xBC	{U}
0300525B	フラグ 0xBD-0xC4	{U}
0300525C	フラグ 0xC5-0xCC	{U}
0300525D	フラグ 0xCD-0xD4	{U}
0300525E	フラグ 0xD5-0xDC	{U}
0300525F	フラグ 0xDD-0xE4	{U}
03005260	フラグ 0xE5-0xEC	{U}
03005261	フラグ 0xED-0xF4	{U}
03005262	フラグ 0xF5-0xFC	{U}
03005263	フラグ 0xFD-0x104	{U}
03005264	フラグ 0x105-0x10C	{U}
03005265	フラグ 0x10D-0x114	{U}
03005266	フラグ 0x115-0x11C	{U}
03005267	フラグ 0x11D-0x124	{U}
03005268	フラグ 0x125-0x12C	{U}

020228A8	Palette wram buffer
02022CA8	BG 0 wram buffer
020234A8	BG 1 wram buffer
02023CA8	BG 2 wram buffer
020244A8	BG 3 wram buffer

0203EFB8	Unit data loaded from events	{U}
0203EFB4	Unit data loaded from events	{J}

02003BFC	Stat screen data	{U}
02003BFC	Stat screen data	{J}

//https://www.dropbox.com/sh/zymc1h221nnxpm9/AACrgal3LFRvbDKL-5qDxF3-a/Tequila/Teq%20Doq?dl=0&preview=Useful+functions.txt
0801A4CC	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{U}
0801A198	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{J}

08019430	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{U}
08019108	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{J}

08018D4C	checks if character is riding a ballista and what the weather is	Usually called before calling 1A4CC, this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{U}
08018A60	checks if character is riding a ballista and what the weather is	Usually called , this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{J}


0800A240	Copy_Text_To_RAM	Calls some functions in IRAM to copy text from the rom to 202A6AC; also stores the text id at 202B6AC.		r0=text id	{U}
08009FA8	Copy_Text_To_RAM	Calls some functions in IRAM to copy text from the rom		r0=text id	{J}

08019150	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{U}
08018E64	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{J}

08019190	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{U}
08018EA4	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{J}
080191B0	Str_Getter	RET=Character's strength	r0=ram char data ptr	{U}
08018EC4	Str_Getter	RET=Character's strength	r0=ram char data ptr	{J}

080191D0	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{U}
08018EE4	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{J}

08019210	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{U}
08018F24	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{J}

08019250	Def_Getter	RET=Character's defense	r0=ram char data ptr	{U}
08018F64	Def_Getter	RET=Character's defense	r0=ram char data ptr	{J}

08019270	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{U}
08018F84	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{J}

08019298	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{U}
08018FAC	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{J}

080189B8	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{U}
080186CC	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{J}

08016B28	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{U}
080168D0	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{J}

0801834C	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{U}
08018060	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{J}

08024DA4	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
08024D54	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}

08024D8C	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
08024D3C	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}

0803C818	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{U}
0803C7A8	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{J}

080192B8	Get_Portrait	Either short 0x6 of char data or (if character doesn't have a character portrait) short 0x8 of class data	RET=index of character's portrait	r0=char data ptr	{U}

08019444	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{U}
0801911C	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{J}
08017548	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{U}
080172F0	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{J}
08083D80	Set_Event_ID	r0=event id to set	{U}
080860BC	Set_Event_ID	r0=event id to set	{J}
08083D94	Unset_Event_ID	r0=event id to unset	{U}
080860BC	Unset_Event_ID	r0=event id to unset	{J}

08083DA8	Check_Event_ID	RET=True if event id is set	r0=event id to check	{U}
080860D0	Check_Event_ID	RET=True if event id is set	r0=event id to check	{J}

0800D07C	Call_Event_Engine	Can be used to run events whenever	r0=pointer to events, r1=0 (something to do with fading?)	{U}
0800D340	Call_Event_Engine	Can be used to run events whenever	r0=pointer to events, r1=0 (something to do with fading?)	{J}

080346B0	Get_Chapter_Events	RET=Pointer to that chapter's events	r0=chapter number	{U}
080345B8	Get_Chapter_Events	RET=Pointer to that chapter's events	r0=chapter number	{J}

08019464	Get_Rom_Character_Data	RET=beginning of character data, or 0 if passed 0	r0=character number	{U}
0801913C	Get_Rom_Character_Data	RET=beginning of character data, or 0 if passed 0	r0=character number	{J}
0801829C	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{U}
08017FB0	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{J}


08016FB8	Heal_Amount_Getter	RET=Amount to heal	r0=ram char data ptr	r1=item id/uses	{U}
08016D60	Heal_Amount_Getter	RET=Amount to heal	r0=ram char data ptr	r1=item id/uses	{J}

080177F4	Clear_Character_Data	Clears a person's ram character struct except for the allegiance byte	r0=ram char data ptr	{U}
0801759C	Clear_Character_Data	Clears a person's ram character struct except for the allegiance byte	r0=ram char data ptr	{J}


080178D8	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{U}
08017680	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{J}


08000DB8	Write_Palette	r0=pointer to palette	{U}
08000D68	Write_Palette	r0=pointer to palette	{J}


08037A04	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{U}
08037A9C	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{J}

080179D8	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{U}
08017780	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{J}
08031570	Count_Items_In_Convoy	RET=Number of items in convoy	{U}
080314BC	Count_Items_In_Convoy	RET=Number of items in convoy	{J}

08024E20	Add_Gold_To_Cashpile	r0=amount of gold	{U}
08024DD0	Add_Gold_To_Cashpile	r0=amount of gold	{J}

080177B0	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{U}
08017558	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{J}


08017A34	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{U}
080177DC	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{J}
08016BC0	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{U}
08016968	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{J}


080197E4	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{U}
080194BC	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{J}
08024D50	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{U}
08024D00	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{J}

0801702C	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{U}
08016DD4	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{J}
